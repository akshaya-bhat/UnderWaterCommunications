/*
	Filename: fir.h
		Header file
		FIR lab wirtten for WES/CSE237C class at UCSD.

*/
#ifndef TRANSMITTER_H_
#define TRANSMITTER_H_

#include <ap_int.h>
#include <iostream>

using namespace std;


typedef int	coef_t;
typedef int16_t data_t;

/**
 * Parameters
 */
#define fs 128e3 //sampling frequency
#define fc 40e3 //carrier frequency (40kHz)
#define N 100 //length of data payload
#define NHalf 50
#define oversample 32 //samples per symbol
#define preambleLen 64
#define preambleLenHalf 32
#define K 7

#define GOL_LEN 32

//PNGEN
const int pnGenSequence[50] = {1, 1,	1,	1,	0,	1,	0,	1,	1,	0,	0,	1,	0,	0,	0,	1,	1,	1,	1,	0,	1,	0,	1,	1,	0,	0,	1,	0,	0,	0,	1,	1,	1,	1,	0,	1,	0,	1,	1,	0,	0,	1,	0,	0,	0,	1,	1,	1,	1,	0};

//CONVOLUTIONAL ENCODER
const int G1[K] = {1,1,1,1,0,0,1};  // 171
const int G2[K] = {1,0,1,1,0,1,1};  // 133
extern int state[K];

//GOLAY PREAMBLE
const int Ga[GOL_LEN] = {1,1,1,1,-1,1,-1,-1,-1,1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1};
const int Gb[GOL_LEN] = {-1,-1,-1,-1,-1,1,-1,1,1,1,-1,-1,-1,1,1,-1,1,1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1};

//PULSE SHAPING
const double h[193] = {0.000536001233313081, 7.06098136602443e-05, -0.000406007114139769, -0.000883634810045066, -0.00135159683852761,
	    				-0.00179895876703321, -0.00221474590344165, -0.00258817136986824, -0.00290887047441511, -0.00316713707124861,
						-0.00335415739962686, -0.00346223677007767, -0.00348501442541717, -0.00341766194891276, -0.00325706072336525,
						-0.00300195416341651, -0.00265307074760023, -0.00221321426357711, -0.00168731814508746, -0.00108246131634044,
						-0.000407843561310084, 0.000325280907160903, 0.00110371230055046, 0.00191245641486070, 0.00273491722288229,
						0.00355312925438673, 0.00434802735471331, 0.00509975066414823, 0.00578797694334343, 0.00639228269717486,
						0.00689252393383350, 0.00726923184983610, 0.00750401726638315, 0.00757997726829826, 0.00748209722254383,
						0.00719764118639714, 0.00671652366149014, 0.00603165571296096, 0.00513925865491922, 0.00403913880429322,
						0.00273491722288229, 0.00123420889803400, -0.000451253550245732, -0.00230555581174162, -0.00430860082883174,
						-0.00643617318776273, -0.00866007043941347, -0.0109483018134326, -0.0132653537380012, -0.0155725205077385,
						-0.0178282973714689, -0.0199888322570730, -0.0220084313298967, -0.0238401126113985, -0.0254362009825603,
						-0.0267489570779595, -0.0277312318560908, -0.0283371380229997, -0.0285227290013921, -0.0282466757861874,
						-0.0274709318180306, -0.0261613759444638, -0.0242884236278811, -0.0218275968012796, -0.0187600431659579,
						-0.0150729962660514, -0.0107601683570693, -0.00582206890099106, -0.000266242458356246, 0.00589257920461199,
						0.0126324148330961, 0.0199240640427574, 0.0277312318560908, 0.0360107476268346, 0.0447128772164509,
						0.0537817259380790, 0.0631557284535285, 0.0727682205183413, 0.0825480862388422, 0.0924204733527715,
						0.102307567989865, 0.112129419427552, 0.121804804545091, 0.131252121010317, 0.140390297718064,
						0.149139710647125, 0.157423092119849, 0.165166421439003, 0.172299785041584, 0.178758194647290,
						0.184482352386305, 0.189419352559961, 0.193523310509509, 0.196755910030787, 0.199086861862235,
						0.200494266974324, 0.200964879682548, 0.200494266974324, 0.199086861862235, 0.196755910030787,
						0.193523310509509, 0.189419352559961, 0.184482352386305, 0.178758194647290, 0.172299785041584,
						0.165166421439003, 0.157423092119849, 0.149139710647125, 0.140390297718064, 0.131252121010317,
						0.121804804545091, 0.112129419427552, 0.102307567989865, 0.0924204733527715, 0.0825480862388422,
						0.0727682205183413, 0.0631557284535285, 0.0537817259380790, 0.0447128772164509, 0.0360107476268346,
						0.0277312318560908, 0.0199240640427574, 0.0126324148330961, 0.00589257920461199, -0.000266242458356246,
						-0.00582206890099106, -0.0107601683570693, -0.0150729962660514, -0.0187600431659579, -0.0218275968012796,
						-0.0242884236278811, -0.0261613759444638, -0.0274709318180306, -0.0282466757861874, -0.0285227290013921,
						-0.0283371380229997, -0.0277312318560908, -0.0267489570779595, -0.0254362009825603, -0.0238401126113985,
						-0.0220084313298967, -0.0199888322570730, -0.0178282973714689, -0.0155725205077385, -0.0132653537380012,
						-0.0109483018134326, -0.00866007043941347, -0.00643617318776273, -0.00430860082883174, -0.00230555581174162,
						-0.000451253550245732, 0.00123420889803400, 0.00273491722288229, 0.00403913880429322, 0.00513925865491922,
						0.00603165571296096, 0.00671652366149014, 0.00719764118639714, 0.00748209722254383, 0.00757997726829826,
						0.00750401726638315, 0.00726923184983610, 0.00689252393383350, 0.00639228269717486, 0.00578797694334343,
						0.00509975066414823, 0.00434802735471331, 0.00355312925438673, 0.00273491722288229, 0.00191245641486070,
						0.00110371230055046, 0.000325280907160903, -0.000407843561310084, -0.00108246131634044, -0.00168731814508746,
						-0.00221321426357711, -0.00265307074760023, -0.00300195416341651, -0.00325706072336525, -0.00341766194891276,
						-0.00348501442541717, -0.00346223677007767, -0.00335415739962686, -0.00316713707124861, -0.00290887047441511,
						-0.00258817136986824, -0.00221474590344165, -0.00179895876703321, -0.00135159683852761, -0.000883634810045066,
						-0.000406007114139769, 7.06098136602443e-05, 0.000536001233313081};

//SIN AND COS LUT
const double cos_coefficients_table[]={1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090,0.000000,-0.195090,-0.382683,-0.555570,-0.707107,-0.831470,-0.923880,-0.980785,-1.000000,-0.980785,-0.923880,-0.831470,-0.707107,-0.555570,-0.382683,-0.195090,-0.000000,0.195090,0.382683,0.555570,0.707107,0.831470,0.923880,0.980785};

const double sin_coefficients_table[]={0.000000,-0.195090,-0.382683,-0.555570,-0.707107,-0.831470,-0.923880,-0.980785,-1.000000,-0.980785,-0.923880,-0.831470,-0.707107,-0.555570,-0.382683,-0.195090,-0.000000,0.195090,0.382683,0.555570,0.707107,0.831470,0.923880,0.980785,1.000000,0.980785,0.923880,0.831470,0.707107,0.555570,0.382683,0.195090};


void transmitter (data_t* input_i, data_t* input_q, double* output_i);
void encoder(data_t bit, data_t *bit0, data_t *bit1);

#endif