-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_75_3_h_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 15; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 193
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);
 
          address2        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce2             : in std_logic; 
          q2              : out std_logic_vector(DataWidth-1 downto 0);
 
          address3        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce3             : in std_logic; 
          q3              : out std_logic_vector(DataWidth-1 downto 0);
 
          address4        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce4             : in std_logic; 
          q4              : out std_logic_vector(DataWidth-1 downto 0);
 
          address5        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce5             : in std_logic; 
          q5              : out std_logic_vector(DataWidth-1 downto 0);
 
          address6        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce6             : in std_logic; 
          q6              : out std_logic_vector(DataWidth-1 downto 0);
 
          address7        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce7             : in std_logic; 
          q7              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of receiver_receiver_Pipeline_VITIS_LOOP_75_3_h_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address2_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address3_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address4_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address5_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address6_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address7_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000000100011", 1 => "000000000000100", 2 => "111111111100101", 3 => "111111111000110", 
    4 => "111111110100111", 5 => "111111110001010", 6 => "111111101101110", 7 => "111111101010110", 
    8 => "111111101000001", 9 => "111111100110000", 10 => "111111100100100", 11 => "111111100011101", 
    12 => "111111100011011", 13 => "111111100100000", 14 => "111111100101010", 15 => "111111100111011", 
    16 => "111111101010010", 17 => "111111101101110", 18 => "111111110010001", 19 => "111111110111001", 
    20 => "111111111100101", 21 => "000000000010101", 22 => "000000001001000", 23 => "000000001111101", 
    24 => "000000010110011", 25 => "000000011101000", 26 => "000000100011100", 27 => "000000101001110", 
    28 => "000000101111011", 29 => "000000110100010", 30 => "000000111000011", 31 => "000000111011100", 
    32 => "000000111101011", 33 => "000000111110000", 34 => "000000111101010", 35 => "000000111010111", 
    36 => "000000110111000", 37 => "000000110001011", 38 => "000000101010000", 39 => "000000100001000", 
    40 => "000000010110011", 41 => "000000001010000", 42 => "111111111100010", 43 => "111111101101000", 
    44 => "111111011100101", 45 => "111111001011010", 46 => "111110111001000", 47 => "111110100110010", 
    48 => "111110010011010", 49 => "111110000000011", 50 => "111101101101111", 51 => "111101011100010", 
    52 => "111101001011101", 53 => "111100111100101", 54 => "111100101111101", 55 => "111100100100110", 
    56 => "111100011100110", 57 => "111100010111110", 58 => "111100010110010", 59 => "111100011000100", 
    60 => "111100011110111", 61 => "111100101001101", 62 => "111100111001000", 63 => "111101001101001", 
    64 => "111101100110010", 65 => "111110000100100", 66 => "111110100111110", 67 => "111111010000010", 
    68 => "111111111101110", 69 => "000000110000010", 70 => "000001100111011", 71 => "000010100011001", 
    72 => "000011100011001", 73 => "000100100111000", 74 => "000101101110010", 75 => "000110111000100", 
    76 => "001000000101010", 77 => "001001010100000", 78 => "001010100100001", 79 => "001011110101000", 
    80 => "001101000110000", 81 => "001110010110100", 82 => "001111100101110", 83 => "010000110011001", 
    84 => "010001111110000", 85 => "010011000101110", 86 => "010100001001100", 87 => "010101001001000", 
    88 => "010110000011011", 89 => "010110111000011", 90 => "010111100111010", 91 => "011000001111101", 
    92 => "011000110001010", 93 => "011001001011110", 94 => "011001011110111", 95 => "011001101010011", 
    96 => "011001101110010", 97 => "011001101010011", 98 => "011001011110111", 99 => "011001001011110", 
    100 => "011000110001010", 101 => "011000001111101", 102 => "010111100111010", 103 => "010110111000011", 
    104 => "010110000011011", 105 => "010101001001000", 106 => "010100001001100", 107 => "010011000101110", 
    108 => "010001111110000", 109 => "010000110011001", 110 => "001111100101110", 111 => "001110010110100", 
    112 => "001101000110000", 113 => "001011110101000", 114 => "001010100100001", 115 => "001001010100000", 
    116 => "001000000101010", 117 => "000110111000100", 118 => "000101101110010", 119 => "000100100111000", 
    120 => "000011100011001", 121 => "000010100011001", 122 => "000001100111011", 123 => "000000110000010", 
    124 => "111111111101110", 125 => "111111010000010", 126 => "111110100111110", 127 => "111110000100100", 
    128 => "111101100110010", 129 => "111101001101001", 130 => "111100111001000", 131 => "111100101001101", 
    132 => "111100011110111", 133 => "111100011000100", 134 => "111100010110010", 135 => "111100010111110", 
    136 => "111100011100110", 137 => "111100100100110", 138 => "111100101111101", 139 => "111100111100101", 
    140 => "111101001011101", 141 => "111101011100010", 142 => "111101101101111", 143 => "111110000000011", 
    144 => "111110010011010", 145 => "111110100110010", 146 => "111110111001000", 147 => "111111001011010", 
    148 => "111111011100101", 149 => "111111101101000", 150 => "111111111100010", 151 => "000000001010000", 
    152 => "000000010110011", 153 => "000000100001000", 154 => "000000101010000", 155 => "000000110001011", 
    156 => "000000110111000", 157 => "000000111010111", 158 => "000000111101010", 159 => "000000111110000", 
    160 => "000000111101011", 161 => "000000111011100", 162 => "000000111000011", 163 => "000000110100010", 
    164 => "000000101111011", 165 => "000000101001110", 166 => "000000100011100", 167 => "000000011101000", 
    168 => "000000010110011", 169 => "000000001111101", 170 => "000000001001000", 171 => "000000000010101", 
    172 => "111111111100101", 173 => "111111110111001", 174 => "111111110010001", 175 => "111111101101110", 
    176 => "111111101010010", 177 => "111111100111011", 178 => "111111100101010", 179 => "111111100100000", 
    180 => "111111100011011", 181 => "111111100011101", 182 => "111111100100100", 183 => "111111100110000", 
    184 => "111111101000001", 185 => "111111101010110", 186 => "111111101101110", 187 => "111111110001010", 
    188 => "111111110100111", 189 => "111111111000110", 190 => "111111111100101", 191 => "000000000000100", 
    192 => "000000000100011");

signal mem1 : mem_array := (
    0 => "000000000100011", 1 => "000000000000100", 2 => "111111111100101", 3 => "111111111000110", 
    4 => "111111110100111", 5 => "111111110001010", 6 => "111111101101110", 7 => "111111101010110", 
    8 => "111111101000001", 9 => "111111100110000", 10 => "111111100100100", 11 => "111111100011101", 
    12 => "111111100011011", 13 => "111111100100000", 14 => "111111100101010", 15 => "111111100111011", 
    16 => "111111101010010", 17 => "111111101101110", 18 => "111111110010001", 19 => "111111110111001", 
    20 => "111111111100101", 21 => "000000000010101", 22 => "000000001001000", 23 => "000000001111101", 
    24 => "000000010110011", 25 => "000000011101000", 26 => "000000100011100", 27 => "000000101001110", 
    28 => "000000101111011", 29 => "000000110100010", 30 => "000000111000011", 31 => "000000111011100", 
    32 => "000000111101011", 33 => "000000111110000", 34 => "000000111101010", 35 => "000000111010111", 
    36 => "000000110111000", 37 => "000000110001011", 38 => "000000101010000", 39 => "000000100001000", 
    40 => "000000010110011", 41 => "000000001010000", 42 => "111111111100010", 43 => "111111101101000", 
    44 => "111111011100101", 45 => "111111001011010", 46 => "111110111001000", 47 => "111110100110010", 
    48 => "111110010011010", 49 => "111110000000011", 50 => "111101101101111", 51 => "111101011100010", 
    52 => "111101001011101", 53 => "111100111100101", 54 => "111100101111101", 55 => "111100100100110", 
    56 => "111100011100110", 57 => "111100010111110", 58 => "111100010110010", 59 => "111100011000100", 
    60 => "111100011110111", 61 => "111100101001101", 62 => "111100111001000", 63 => "111101001101001", 
    64 => "111101100110010", 65 => "111110000100100", 66 => "111110100111110", 67 => "111111010000010", 
    68 => "111111111101110", 69 => "000000110000010", 70 => "000001100111011", 71 => "000010100011001", 
    72 => "000011100011001", 73 => "000100100111000", 74 => "000101101110010", 75 => "000110111000100", 
    76 => "001000000101010", 77 => "001001010100000", 78 => "001010100100001", 79 => "001011110101000", 
    80 => "001101000110000", 81 => "001110010110100", 82 => "001111100101110", 83 => "010000110011001", 
    84 => "010001111110000", 85 => "010011000101110", 86 => "010100001001100", 87 => "010101001001000", 
    88 => "010110000011011", 89 => "010110111000011", 90 => "010111100111010", 91 => "011000001111101", 
    92 => "011000110001010", 93 => "011001001011110", 94 => "011001011110111", 95 => "011001101010011", 
    96 => "011001101110010", 97 => "011001101010011", 98 => "011001011110111", 99 => "011001001011110", 
    100 => "011000110001010", 101 => "011000001111101", 102 => "010111100111010", 103 => "010110111000011", 
    104 => "010110000011011", 105 => "010101001001000", 106 => "010100001001100", 107 => "010011000101110", 
    108 => "010001111110000", 109 => "010000110011001", 110 => "001111100101110", 111 => "001110010110100", 
    112 => "001101000110000", 113 => "001011110101000", 114 => "001010100100001", 115 => "001001010100000", 
    116 => "001000000101010", 117 => "000110111000100", 118 => "000101101110010", 119 => "000100100111000", 
    120 => "000011100011001", 121 => "000010100011001", 122 => "000001100111011", 123 => "000000110000010", 
    124 => "111111111101110", 125 => "111111010000010", 126 => "111110100111110", 127 => "111110000100100", 
    128 => "111101100110010", 129 => "111101001101001", 130 => "111100111001000", 131 => "111100101001101", 
    132 => "111100011110111", 133 => "111100011000100", 134 => "111100010110010", 135 => "111100010111110", 
    136 => "111100011100110", 137 => "111100100100110", 138 => "111100101111101", 139 => "111100111100101", 
    140 => "111101001011101", 141 => "111101011100010", 142 => "111101101101111", 143 => "111110000000011", 
    144 => "111110010011010", 145 => "111110100110010", 146 => "111110111001000", 147 => "111111001011010", 
    148 => "111111011100101", 149 => "111111101101000", 150 => "111111111100010", 151 => "000000001010000", 
    152 => "000000010110011", 153 => "000000100001000", 154 => "000000101010000", 155 => "000000110001011", 
    156 => "000000110111000", 157 => "000000111010111", 158 => "000000111101010", 159 => "000000111110000", 
    160 => "000000111101011", 161 => "000000111011100", 162 => "000000111000011", 163 => "000000110100010", 
    164 => "000000101111011", 165 => "000000101001110", 166 => "000000100011100", 167 => "000000011101000", 
    168 => "000000010110011", 169 => "000000001111101", 170 => "000000001001000", 171 => "000000000010101", 
    172 => "111111111100101", 173 => "111111110111001", 174 => "111111110010001", 175 => "111111101101110", 
    176 => "111111101010010", 177 => "111111100111011", 178 => "111111100101010", 179 => "111111100100000", 
    180 => "111111100011011", 181 => "111111100011101", 182 => "111111100100100", 183 => "111111100110000", 
    184 => "111111101000001", 185 => "111111101010110", 186 => "111111101101110", 187 => "111111110001010", 
    188 => "111111110100111", 189 => "111111111000110", 190 => "111111111100101", 191 => "000000000000100", 
    192 => "000000000100011");

signal mem2 : mem_array := (
    0 => "000000000100011", 1 => "000000000000100", 2 => "111111111100101", 3 => "111111111000110", 
    4 => "111111110100111", 5 => "111111110001010", 6 => "111111101101110", 7 => "111111101010110", 
    8 => "111111101000001", 9 => "111111100110000", 10 => "111111100100100", 11 => "111111100011101", 
    12 => "111111100011011", 13 => "111111100100000", 14 => "111111100101010", 15 => "111111100111011", 
    16 => "111111101010010", 17 => "111111101101110", 18 => "111111110010001", 19 => "111111110111001", 
    20 => "111111111100101", 21 => "000000000010101", 22 => "000000001001000", 23 => "000000001111101", 
    24 => "000000010110011", 25 => "000000011101000", 26 => "000000100011100", 27 => "000000101001110", 
    28 => "000000101111011", 29 => "000000110100010", 30 => "000000111000011", 31 => "000000111011100", 
    32 => "000000111101011", 33 => "000000111110000", 34 => "000000111101010", 35 => "000000111010111", 
    36 => "000000110111000", 37 => "000000110001011", 38 => "000000101010000", 39 => "000000100001000", 
    40 => "000000010110011", 41 => "000000001010000", 42 => "111111111100010", 43 => "111111101101000", 
    44 => "111111011100101", 45 => "111111001011010", 46 => "111110111001000", 47 => "111110100110010", 
    48 => "111110010011010", 49 => "111110000000011", 50 => "111101101101111", 51 => "111101011100010", 
    52 => "111101001011101", 53 => "111100111100101", 54 => "111100101111101", 55 => "111100100100110", 
    56 => "111100011100110", 57 => "111100010111110", 58 => "111100010110010", 59 => "111100011000100", 
    60 => "111100011110111", 61 => "111100101001101", 62 => "111100111001000", 63 => "111101001101001", 
    64 => "111101100110010", 65 => "111110000100100", 66 => "111110100111110", 67 => "111111010000010", 
    68 => "111111111101110", 69 => "000000110000010", 70 => "000001100111011", 71 => "000010100011001", 
    72 => "000011100011001", 73 => "000100100111000", 74 => "000101101110010", 75 => "000110111000100", 
    76 => "001000000101010", 77 => "001001010100000", 78 => "001010100100001", 79 => "001011110101000", 
    80 => "001101000110000", 81 => "001110010110100", 82 => "001111100101110", 83 => "010000110011001", 
    84 => "010001111110000", 85 => "010011000101110", 86 => "010100001001100", 87 => "010101001001000", 
    88 => "010110000011011", 89 => "010110111000011", 90 => "010111100111010", 91 => "011000001111101", 
    92 => "011000110001010", 93 => "011001001011110", 94 => "011001011110111", 95 => "011001101010011", 
    96 => "011001101110010", 97 => "011001101010011", 98 => "011001011110111", 99 => "011001001011110", 
    100 => "011000110001010", 101 => "011000001111101", 102 => "010111100111010", 103 => "010110111000011", 
    104 => "010110000011011", 105 => "010101001001000", 106 => "010100001001100", 107 => "010011000101110", 
    108 => "010001111110000", 109 => "010000110011001", 110 => "001111100101110", 111 => "001110010110100", 
    112 => "001101000110000", 113 => "001011110101000", 114 => "001010100100001", 115 => "001001010100000", 
    116 => "001000000101010", 117 => "000110111000100", 118 => "000101101110010", 119 => "000100100111000", 
    120 => "000011100011001", 121 => "000010100011001", 122 => "000001100111011", 123 => "000000110000010", 
    124 => "111111111101110", 125 => "111111010000010", 126 => "111110100111110", 127 => "111110000100100", 
    128 => "111101100110010", 129 => "111101001101001", 130 => "111100111001000", 131 => "111100101001101", 
    132 => "111100011110111", 133 => "111100011000100", 134 => "111100010110010", 135 => "111100010111110", 
    136 => "111100011100110", 137 => "111100100100110", 138 => "111100101111101", 139 => "111100111100101", 
    140 => "111101001011101", 141 => "111101011100010", 142 => "111101101101111", 143 => "111110000000011", 
    144 => "111110010011010", 145 => "111110100110010", 146 => "111110111001000", 147 => "111111001011010", 
    148 => "111111011100101", 149 => "111111101101000", 150 => "111111111100010", 151 => "000000001010000", 
    152 => "000000010110011", 153 => "000000100001000", 154 => "000000101010000", 155 => "000000110001011", 
    156 => "000000110111000", 157 => "000000111010111", 158 => "000000111101010", 159 => "000000111110000", 
    160 => "000000111101011", 161 => "000000111011100", 162 => "000000111000011", 163 => "000000110100010", 
    164 => "000000101111011", 165 => "000000101001110", 166 => "000000100011100", 167 => "000000011101000", 
    168 => "000000010110011", 169 => "000000001111101", 170 => "000000001001000", 171 => "000000000010101", 
    172 => "111111111100101", 173 => "111111110111001", 174 => "111111110010001", 175 => "111111101101110", 
    176 => "111111101010010", 177 => "111111100111011", 178 => "111111100101010", 179 => "111111100100000", 
    180 => "111111100011011", 181 => "111111100011101", 182 => "111111100100100", 183 => "111111100110000", 
    184 => "111111101000001", 185 => "111111101010110", 186 => "111111101101110", 187 => "111111110001010", 
    188 => "111111110100111", 189 => "111111111000110", 190 => "111111111100101", 191 => "000000000000100", 
    192 => "000000000100011");

signal mem3 : mem_array := (
    0 => "000000000100011", 1 => "000000000000100", 2 => "111111111100101", 3 => "111111111000110", 
    4 => "111111110100111", 5 => "111111110001010", 6 => "111111101101110", 7 => "111111101010110", 
    8 => "111111101000001", 9 => "111111100110000", 10 => "111111100100100", 11 => "111111100011101", 
    12 => "111111100011011", 13 => "111111100100000", 14 => "111111100101010", 15 => "111111100111011", 
    16 => "111111101010010", 17 => "111111101101110", 18 => "111111110010001", 19 => "111111110111001", 
    20 => "111111111100101", 21 => "000000000010101", 22 => "000000001001000", 23 => "000000001111101", 
    24 => "000000010110011", 25 => "000000011101000", 26 => "000000100011100", 27 => "000000101001110", 
    28 => "000000101111011", 29 => "000000110100010", 30 => "000000111000011", 31 => "000000111011100", 
    32 => "000000111101011", 33 => "000000111110000", 34 => "000000111101010", 35 => "000000111010111", 
    36 => "000000110111000", 37 => "000000110001011", 38 => "000000101010000", 39 => "000000100001000", 
    40 => "000000010110011", 41 => "000000001010000", 42 => "111111111100010", 43 => "111111101101000", 
    44 => "111111011100101", 45 => "111111001011010", 46 => "111110111001000", 47 => "111110100110010", 
    48 => "111110010011010", 49 => "111110000000011", 50 => "111101101101111", 51 => "111101011100010", 
    52 => "111101001011101", 53 => "111100111100101", 54 => "111100101111101", 55 => "111100100100110", 
    56 => "111100011100110", 57 => "111100010111110", 58 => "111100010110010", 59 => "111100011000100", 
    60 => "111100011110111", 61 => "111100101001101", 62 => "111100111001000", 63 => "111101001101001", 
    64 => "111101100110010", 65 => "111110000100100", 66 => "111110100111110", 67 => "111111010000010", 
    68 => "111111111101110", 69 => "000000110000010", 70 => "000001100111011", 71 => "000010100011001", 
    72 => "000011100011001", 73 => "000100100111000", 74 => "000101101110010", 75 => "000110111000100", 
    76 => "001000000101010", 77 => "001001010100000", 78 => "001010100100001", 79 => "001011110101000", 
    80 => "001101000110000", 81 => "001110010110100", 82 => "001111100101110", 83 => "010000110011001", 
    84 => "010001111110000", 85 => "010011000101110", 86 => "010100001001100", 87 => "010101001001000", 
    88 => "010110000011011", 89 => "010110111000011", 90 => "010111100111010", 91 => "011000001111101", 
    92 => "011000110001010", 93 => "011001001011110", 94 => "011001011110111", 95 => "011001101010011", 
    96 => "011001101110010", 97 => "011001101010011", 98 => "011001011110111", 99 => "011001001011110", 
    100 => "011000110001010", 101 => "011000001111101", 102 => "010111100111010", 103 => "010110111000011", 
    104 => "010110000011011", 105 => "010101001001000", 106 => "010100001001100", 107 => "010011000101110", 
    108 => "010001111110000", 109 => "010000110011001", 110 => "001111100101110", 111 => "001110010110100", 
    112 => "001101000110000", 113 => "001011110101000", 114 => "001010100100001", 115 => "001001010100000", 
    116 => "001000000101010", 117 => "000110111000100", 118 => "000101101110010", 119 => "000100100111000", 
    120 => "000011100011001", 121 => "000010100011001", 122 => "000001100111011", 123 => "000000110000010", 
    124 => "111111111101110", 125 => "111111010000010", 126 => "111110100111110", 127 => "111110000100100", 
    128 => "111101100110010", 129 => "111101001101001", 130 => "111100111001000", 131 => "111100101001101", 
    132 => "111100011110111", 133 => "111100011000100", 134 => "111100010110010", 135 => "111100010111110", 
    136 => "111100011100110", 137 => "111100100100110", 138 => "111100101111101", 139 => "111100111100101", 
    140 => "111101001011101", 141 => "111101011100010", 142 => "111101101101111", 143 => "111110000000011", 
    144 => "111110010011010", 145 => "111110100110010", 146 => "111110111001000", 147 => "111111001011010", 
    148 => "111111011100101", 149 => "111111101101000", 150 => "111111111100010", 151 => "000000001010000", 
    152 => "000000010110011", 153 => "000000100001000", 154 => "000000101010000", 155 => "000000110001011", 
    156 => "000000110111000", 157 => "000000111010111", 158 => "000000111101010", 159 => "000000111110000", 
    160 => "000000111101011", 161 => "000000111011100", 162 => "000000111000011", 163 => "000000110100010", 
    164 => "000000101111011", 165 => "000000101001110", 166 => "000000100011100", 167 => "000000011101000", 
    168 => "000000010110011", 169 => "000000001111101", 170 => "000000001001000", 171 => "000000000010101", 
    172 => "111111111100101", 173 => "111111110111001", 174 => "111111110010001", 175 => "111111101101110", 
    176 => "111111101010010", 177 => "111111100111011", 178 => "111111100101010", 179 => "111111100100000", 
    180 => "111111100011011", 181 => "111111100011101", 182 => "111111100100100", 183 => "111111100110000", 
    184 => "111111101000001", 185 => "111111101010110", 186 => "111111101101110", 187 => "111111110001010", 
    188 => "111111110100111", 189 => "111111111000110", 190 => "111111111100101", 191 => "000000000000100", 
    192 => "000000000100011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_2: process (address2) 
begin
      address2_tmp <= address2;
--synthesis translate_off
      if (CONV_INTEGER(address2) > AddressRange-1) then
           address2_tmp <= (others => '0');
      else 
           address2_tmp <= address2;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_3: process (address3) 
begin
      address3_tmp <= address3;
--synthesis translate_off
      if (CONV_INTEGER(address3) > AddressRange-1) then
           address3_tmp <= (others => '0');
      else 
           address3_tmp <= address3;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_4: process (address4) 
begin
      address4_tmp <= address4;
--synthesis translate_off
      if (CONV_INTEGER(address4) > AddressRange-1) then
           address4_tmp <= (others => '0');
      else 
           address4_tmp <= address4;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_5: process (address5) 
begin
      address5_tmp <= address5;
--synthesis translate_off
      if (CONV_INTEGER(address5) > AddressRange-1) then
           address5_tmp <= (others => '0');
      else 
           address5_tmp <= address5;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_6: process (address6) 
begin
      address6_tmp <= address6;
--synthesis translate_off
      if (CONV_INTEGER(address6) > AddressRange-1) then
           address6_tmp <= (others => '0');
      else 
           address6_tmp <= address6;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_7: process (address7) 
begin
      address7_tmp <= address7;
--synthesis translate_off
      if (CONV_INTEGER(address7) > AddressRange-1) then
           address7_tmp <= (others => '0');
      else 
           address7_tmp <= address7;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;
 
        if (ce2 = '1') then  
            q2 <= mem1(CONV_INTEGER(address2_tmp)); 
        end if;
 
        if (ce3 = '1') then  
            q3 <= mem1(CONV_INTEGER(address3_tmp)); 
        end if;
 
        if (ce4 = '1') then  
            q4 <= mem2(CONV_INTEGER(address4_tmp)); 
        end if;
 
        if (ce5 = '1') then  
            q5 <= mem2(CONV_INTEGER(address5_tmp)); 
        end if;
 
        if (ce6 = '1') then  
            q6 <= mem3(CONV_INTEGER(address6_tmp)); 
        end if;
 
        if (ce7 = '1') then  
            q7 <= mem3(CONV_INTEGER(address7_tmp)); 
        end if;

end if;
end process;

end rtl;

