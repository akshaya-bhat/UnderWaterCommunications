-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_91_3_h_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 97
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of receiver_receiver_Pipeline_VITIS_LOOP_91_3_h_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000110001", 1 => "1111111111011010", 2 => "1111111110000010", 3 => "1111111100110010", 
    4 => "1111111011110010", 5 => "1111111011001001", 6 => "1111111010111100", 7 => "1111111011010010", 
    8 => "1111111100001010", 9 => "1111111101100011", 10 => "1111111111011010", 11 => "0000000001100110", 
    12 => "0000000011111101", 13 => "0000000110010010", 14 => "0000001000011000", 15 => "0000001001111110", 
    16 => "0000001010110111", 17 => "0000001010110101", 18 => "0000001001101110", 19 => "0000000111011100", 
    20 => "0000000011111101", 21 => "1111111111010110", 22 => "1111111001110000", 23 => "1111110011011101", 
    24 => "1111101100110010", 25 => "1111100110001011", 26 => "1111100000001000", 27 => "1111011011001010", 
    28 => "1111010111110101", 29 => "1111010110101100", 30 => "1111011000001101", 31 => "1111011100110100", 
    32 => "1111100100110101", 33 => "1111110000011010", 34 => "1111111111100111", 35 => "0000010010010010", 
    36 => "0000101000001010", 37 => "0001000000110000", 38 => "0001011011011101", 39 => "0001110111100010", 
    40 => "0010010100001001", 41 => "0010110000011001", 42 => "0011001011010011", 43 => "0011100011111110", 
    44 => "0011111001100001", 45 => "0100001011001010", 46 => "0100011000001111", 47 => "0100100000010011", 
    48 => "0100100011000001", 49 => "0100100000010011", 50 => "0100011000001111", 51 => "0100001011001010", 
    52 => "0011111001100001", 53 => "0011100011111110", 54 => "0011001011010011", 55 => "0010110000011001", 
    56 => "0010010100001001", 57 => "0001110111100010", 58 => "0001011011011101", 59 => "0001000000110000", 
    60 => "0000101000001010", 61 => "0000010010010010", 62 => "1111111111100111", 63 => "1111110000011010", 
    64 => "1111100100110101", 65 => "1111011100110100", 66 => "1111011000001101", 67 => "1111010110101100", 
    68 => "1111010111110101", 69 => "1111011011001010", 70 => "1111100000001000", 71 => "1111100110001011", 
    72 => "1111101100110010", 73 => "1111110011011101", 74 => "1111111001110000", 75 => "1111111111010110", 
    76 => "0000000011111101", 77 => "0000000111011100", 78 => "0000001001101110", 79 => "0000001010110101", 
    80 => "0000001010110111", 81 => "0000001001111110", 82 => "0000001000011000", 83 => "0000000110010010", 
    84 => "0000000011111101", 85 => "0000000001100110", 86 => "1111111111011010", 87 => "1111111101100011", 
    88 => "1111111100001010", 89 => "1111111011010010", 90 => "1111111010111100", 91 => "1111111011001001", 
    92 => "1111111011110010", 93 => "1111111100110010", 94 => "1111111110000010", 95 => "1111111111011010", 
    96 => "0000000000110001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;

end if;
end process;

end rtl;

