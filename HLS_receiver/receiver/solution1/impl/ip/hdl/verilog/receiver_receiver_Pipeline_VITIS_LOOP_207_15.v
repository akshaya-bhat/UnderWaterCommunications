// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_207_15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_3_I_V_address0,
        arr_3_I_V_ce0,
        arr_3_I_V_q0,
        arr_3_I_V_address1,
        arr_3_I_V_ce1,
        arr_3_I_V_q1,
        arr_3_I_V_1_address0,
        arr_3_I_V_1_ce0,
        arr_3_I_V_1_q0,
        arr_3_I_V_1_address1,
        arr_3_I_V_1_ce1,
        arr_3_I_V_1_q1,
        arr_4_I_V_address0,
        arr_4_I_V_ce0,
        arr_4_I_V_we0,
        arr_4_I_V_d0,
        arr_3_Q_V_address0,
        arr_3_Q_V_ce0,
        arr_3_Q_V_q0,
        arr_3_Q_V_address1,
        arr_3_Q_V_ce1,
        arr_3_Q_V_q1,
        arr_3_Q_V_1_address0,
        arr_3_Q_V_1_ce0,
        arr_3_Q_V_1_q0,
        arr_3_Q_V_1_address1,
        arr_3_Q_V_1_ce1,
        arr_3_Q_V_1_q1,
        arr_4_Q_V_address0,
        arr_4_Q_V_ce0,
        arr_4_Q_V_we0,
        arr_4_Q_V_d0,
        arr_3_I_V_2_address0,
        arr_3_I_V_2_ce0,
        arr_3_I_V_2_q0,
        arr_3_I_V_2_address1,
        arr_3_I_V_2_ce1,
        arr_3_I_V_2_q1,
        arr_3_I_V_3_address0,
        arr_3_I_V_3_ce0,
        arr_3_I_V_3_q0,
        arr_3_I_V_3_address1,
        arr_3_I_V_3_ce1,
        arr_3_I_V_3_q1,
        arr_4_I_V_1_address0,
        arr_4_I_V_1_ce0,
        arr_4_I_V_1_we0,
        arr_4_I_V_1_d0,
        arr_3_Q_V_2_address0,
        arr_3_Q_V_2_ce0,
        arr_3_Q_V_2_q0,
        arr_3_Q_V_2_address1,
        arr_3_Q_V_2_ce1,
        arr_3_Q_V_2_q1,
        arr_3_Q_V_3_address0,
        arr_3_Q_V_3_ce0,
        arr_3_Q_V_3_q0,
        arr_3_Q_V_3_address1,
        arr_3_Q_V_3_ce1,
        arr_3_Q_V_3_q1,
        arr_4_Q_V_1_address0,
        arr_4_Q_V_1_ce0,
        arr_4_Q_V_1_we0,
        arr_4_Q_V_1_d0,
        arr_3_I_V_4_address0,
        arr_3_I_V_4_ce0,
        arr_3_I_V_4_q0,
        arr_3_I_V_4_address1,
        arr_3_I_V_4_ce1,
        arr_3_I_V_4_q1,
        arr_3_I_V_5_address0,
        arr_3_I_V_5_ce0,
        arr_3_I_V_5_q0,
        arr_3_I_V_5_address1,
        arr_3_I_V_5_ce1,
        arr_3_I_V_5_q1,
        arr_4_I_V_2_address0,
        arr_4_I_V_2_ce0,
        arr_4_I_V_2_we0,
        arr_4_I_V_2_d0,
        arr_3_Q_V_4_address0,
        arr_3_Q_V_4_ce0,
        arr_3_Q_V_4_q0,
        arr_3_Q_V_4_address1,
        arr_3_Q_V_4_ce1,
        arr_3_Q_V_4_q1,
        arr_3_Q_V_5_address0,
        arr_3_Q_V_5_ce0,
        arr_3_Q_V_5_q0,
        arr_3_Q_V_5_address1,
        arr_3_Q_V_5_ce1,
        arr_3_Q_V_5_q1,
        arr_4_Q_V_2_address0,
        arr_4_Q_V_2_ce0,
        arr_4_Q_V_2_we0,
        arr_4_Q_V_2_d0,
        arr_3_I_V_6_address0,
        arr_3_I_V_6_ce0,
        arr_3_I_V_6_q0,
        arr_3_I_V_6_address1,
        arr_3_I_V_6_ce1,
        arr_3_I_V_6_q1,
        arr_3_I_V_7_address0,
        arr_3_I_V_7_ce0,
        arr_3_I_V_7_q0,
        arr_3_I_V_7_address1,
        arr_3_I_V_7_ce1,
        arr_3_I_V_7_q1,
        arr_4_I_V_3_address0,
        arr_4_I_V_3_ce0,
        arr_4_I_V_3_we0,
        arr_4_I_V_3_d0,
        arr_3_Q_V_6_address0,
        arr_3_Q_V_6_ce0,
        arr_3_Q_V_6_q0,
        arr_3_Q_V_6_address1,
        arr_3_Q_V_6_ce1,
        arr_3_Q_V_6_q1,
        arr_3_Q_V_7_address0,
        arr_3_Q_V_7_ce0,
        arr_3_Q_V_7_q0,
        arr_3_Q_V_7_address1,
        arr_3_Q_V_7_ce1,
        arr_3_Q_V_7_q1,
        arr_4_Q_V_3_address0,
        arr_4_Q_V_3_ce0,
        arr_4_Q_V_3_we0,
        arr_4_Q_V_3_d0,
        arr_4_I_V_4_address0,
        arr_4_I_V_4_ce0,
        arr_4_I_V_4_we0,
        arr_4_I_V_4_d0,
        arr_4_Q_V_4_address0,
        arr_4_Q_V_4_ce0,
        arr_4_Q_V_4_we0,
        arr_4_Q_V_4_d0,
        arr_4_I_V_5_address0,
        arr_4_I_V_5_ce0,
        arr_4_I_V_5_we0,
        arr_4_I_V_5_d0,
        arr_4_Q_V_5_address0,
        arr_4_Q_V_5_ce0,
        arr_4_Q_V_5_we0,
        arr_4_Q_V_5_d0,
        arr_4_I_V_6_address0,
        arr_4_I_V_6_ce0,
        arr_4_I_V_6_we0,
        arr_4_I_V_6_d0,
        arr_4_Q_V_6_address0,
        arr_4_Q_V_6_ce0,
        arr_4_Q_V_6_we0,
        arr_4_Q_V_6_d0,
        arr_4_I_V_7_address0,
        arr_4_I_V_7_ce0,
        arr_4_I_V_7_we0,
        arr_4_I_V_7_d0,
        arr_4_Q_V_7_address0,
        arr_4_Q_V_7_ce0,
        arr_4_Q_V_7_we0,
        arr_4_Q_V_7_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] arr_3_I_V_address0;
output   arr_3_I_V_ce0;
input  [25:0] arr_3_I_V_q0;
output  [5:0] arr_3_I_V_address1;
output   arr_3_I_V_ce1;
input  [25:0] arr_3_I_V_q1;
output  [5:0] arr_3_I_V_1_address0;
output   arr_3_I_V_1_ce0;
input  [25:0] arr_3_I_V_1_q0;
output  [5:0] arr_3_I_V_1_address1;
output   arr_3_I_V_1_ce1;
input  [25:0] arr_3_I_V_1_q1;
output  [4:0] arr_4_I_V_address0;
output   arr_4_I_V_ce0;
output   arr_4_I_V_we0;
output  [26:0] arr_4_I_V_d0;
output  [5:0] arr_3_Q_V_address0;
output   arr_3_Q_V_ce0;
input  [25:0] arr_3_Q_V_q0;
output  [5:0] arr_3_Q_V_address1;
output   arr_3_Q_V_ce1;
input  [25:0] arr_3_Q_V_q1;
output  [5:0] arr_3_Q_V_1_address0;
output   arr_3_Q_V_1_ce0;
input  [25:0] arr_3_Q_V_1_q0;
output  [5:0] arr_3_Q_V_1_address1;
output   arr_3_Q_V_1_ce1;
input  [25:0] arr_3_Q_V_1_q1;
output  [4:0] arr_4_Q_V_address0;
output   arr_4_Q_V_ce0;
output   arr_4_Q_V_we0;
output  [26:0] arr_4_Q_V_d0;
output  [5:0] arr_3_I_V_2_address0;
output   arr_3_I_V_2_ce0;
input  [25:0] arr_3_I_V_2_q0;
output  [5:0] arr_3_I_V_2_address1;
output   arr_3_I_V_2_ce1;
input  [25:0] arr_3_I_V_2_q1;
output  [5:0] arr_3_I_V_3_address0;
output   arr_3_I_V_3_ce0;
input  [25:0] arr_3_I_V_3_q0;
output  [5:0] arr_3_I_V_3_address1;
output   arr_3_I_V_3_ce1;
input  [25:0] arr_3_I_V_3_q1;
output  [4:0] arr_4_I_V_1_address0;
output   arr_4_I_V_1_ce0;
output   arr_4_I_V_1_we0;
output  [26:0] arr_4_I_V_1_d0;
output  [5:0] arr_3_Q_V_2_address0;
output   arr_3_Q_V_2_ce0;
input  [25:0] arr_3_Q_V_2_q0;
output  [5:0] arr_3_Q_V_2_address1;
output   arr_3_Q_V_2_ce1;
input  [25:0] arr_3_Q_V_2_q1;
output  [5:0] arr_3_Q_V_3_address0;
output   arr_3_Q_V_3_ce0;
input  [25:0] arr_3_Q_V_3_q0;
output  [5:0] arr_3_Q_V_3_address1;
output   arr_3_Q_V_3_ce1;
input  [25:0] arr_3_Q_V_3_q1;
output  [4:0] arr_4_Q_V_1_address0;
output   arr_4_Q_V_1_ce0;
output   arr_4_Q_V_1_we0;
output  [26:0] arr_4_Q_V_1_d0;
output  [5:0] arr_3_I_V_4_address0;
output   arr_3_I_V_4_ce0;
input  [25:0] arr_3_I_V_4_q0;
output  [5:0] arr_3_I_V_4_address1;
output   arr_3_I_V_4_ce1;
input  [25:0] arr_3_I_V_4_q1;
output  [5:0] arr_3_I_V_5_address0;
output   arr_3_I_V_5_ce0;
input  [25:0] arr_3_I_V_5_q0;
output  [5:0] arr_3_I_V_5_address1;
output   arr_3_I_V_5_ce1;
input  [25:0] arr_3_I_V_5_q1;
output  [4:0] arr_4_I_V_2_address0;
output   arr_4_I_V_2_ce0;
output   arr_4_I_V_2_we0;
output  [26:0] arr_4_I_V_2_d0;
output  [5:0] arr_3_Q_V_4_address0;
output   arr_3_Q_V_4_ce0;
input  [25:0] arr_3_Q_V_4_q0;
output  [5:0] arr_3_Q_V_4_address1;
output   arr_3_Q_V_4_ce1;
input  [25:0] arr_3_Q_V_4_q1;
output  [5:0] arr_3_Q_V_5_address0;
output   arr_3_Q_V_5_ce0;
input  [25:0] arr_3_Q_V_5_q0;
output  [5:0] arr_3_Q_V_5_address1;
output   arr_3_Q_V_5_ce1;
input  [25:0] arr_3_Q_V_5_q1;
output  [4:0] arr_4_Q_V_2_address0;
output   arr_4_Q_V_2_ce0;
output   arr_4_Q_V_2_we0;
output  [26:0] arr_4_Q_V_2_d0;
output  [5:0] arr_3_I_V_6_address0;
output   arr_3_I_V_6_ce0;
input  [25:0] arr_3_I_V_6_q0;
output  [5:0] arr_3_I_V_6_address1;
output   arr_3_I_V_6_ce1;
input  [25:0] arr_3_I_V_6_q1;
output  [5:0] arr_3_I_V_7_address0;
output   arr_3_I_V_7_ce0;
input  [25:0] arr_3_I_V_7_q0;
output  [5:0] arr_3_I_V_7_address1;
output   arr_3_I_V_7_ce1;
input  [25:0] arr_3_I_V_7_q1;
output  [4:0] arr_4_I_V_3_address0;
output   arr_4_I_V_3_ce0;
output   arr_4_I_V_3_we0;
output  [26:0] arr_4_I_V_3_d0;
output  [5:0] arr_3_Q_V_6_address0;
output   arr_3_Q_V_6_ce0;
input  [25:0] arr_3_Q_V_6_q0;
output  [5:0] arr_3_Q_V_6_address1;
output   arr_3_Q_V_6_ce1;
input  [25:0] arr_3_Q_V_6_q1;
output  [5:0] arr_3_Q_V_7_address0;
output   arr_3_Q_V_7_ce0;
input  [25:0] arr_3_Q_V_7_q0;
output  [5:0] arr_3_Q_V_7_address1;
output   arr_3_Q_V_7_ce1;
input  [25:0] arr_3_Q_V_7_q1;
output  [4:0] arr_4_Q_V_3_address0;
output   arr_4_Q_V_3_ce0;
output   arr_4_Q_V_3_we0;
output  [26:0] arr_4_Q_V_3_d0;
output  [4:0] arr_4_I_V_4_address0;
output   arr_4_I_V_4_ce0;
output   arr_4_I_V_4_we0;
output  [26:0] arr_4_I_V_4_d0;
output  [4:0] arr_4_Q_V_4_address0;
output   arr_4_Q_V_4_ce0;
output   arr_4_Q_V_4_we0;
output  [26:0] arr_4_Q_V_4_d0;
output  [4:0] arr_4_I_V_5_address0;
output   arr_4_I_V_5_ce0;
output   arr_4_I_V_5_we0;
output  [26:0] arr_4_I_V_5_d0;
output  [4:0] arr_4_Q_V_5_address0;
output   arr_4_Q_V_5_ce0;
output   arr_4_Q_V_5_we0;
output  [26:0] arr_4_Q_V_5_d0;
output  [4:0] arr_4_I_V_6_address0;
output   arr_4_I_V_6_ce0;
output   arr_4_I_V_6_we0;
output  [26:0] arr_4_I_V_6_d0;
output  [4:0] arr_4_Q_V_6_address0;
output   arr_4_Q_V_6_ce0;
output   arr_4_Q_V_6_we0;
output  [26:0] arr_4_Q_V_6_d0;
output  [4:0] arr_4_I_V_7_address0;
output   arr_4_I_V_7_ce0;
output   arr_4_I_V_7_we0;
output  [26:0] arr_4_I_V_7_d0;
output  [4:0] arr_4_Q_V_7_address0;
output   arr_4_Q_V_7_ce0;
output   arr_4_Q_V_7_we0;
output  [26:0] arr_4_Q_V_7_d0;

reg ap_idle;
reg arr_3_I_V_ce0;
reg arr_3_I_V_ce1;
reg arr_3_I_V_1_ce0;
reg arr_3_I_V_1_ce1;
reg arr_4_I_V_ce0;
reg arr_4_I_V_we0;
reg arr_3_Q_V_ce0;
reg arr_3_Q_V_ce1;
reg arr_3_Q_V_1_ce0;
reg arr_3_Q_V_1_ce1;
reg arr_4_Q_V_ce0;
reg arr_4_Q_V_we0;
reg arr_3_I_V_2_ce0;
reg arr_3_I_V_2_ce1;
reg arr_3_I_V_3_ce0;
reg arr_3_I_V_3_ce1;
reg arr_4_I_V_1_ce0;
reg arr_4_I_V_1_we0;
reg arr_3_Q_V_2_ce0;
reg arr_3_Q_V_2_ce1;
reg arr_3_Q_V_3_ce0;
reg arr_3_Q_V_3_ce1;
reg arr_4_Q_V_1_ce0;
reg arr_4_Q_V_1_we0;
reg arr_3_I_V_4_ce0;
reg arr_3_I_V_4_ce1;
reg arr_3_I_V_5_ce0;
reg arr_3_I_V_5_ce1;
reg arr_4_I_V_2_ce0;
reg arr_4_I_V_2_we0;
reg arr_3_Q_V_4_ce0;
reg arr_3_Q_V_4_ce1;
reg arr_3_Q_V_5_ce0;
reg arr_3_Q_V_5_ce1;
reg arr_4_Q_V_2_ce0;
reg arr_4_Q_V_2_we0;
reg arr_3_I_V_6_ce0;
reg arr_3_I_V_6_ce1;
reg arr_3_I_V_7_ce0;
reg arr_3_I_V_7_ce1;
reg arr_4_I_V_3_ce0;
reg arr_4_I_V_3_we0;
reg arr_3_Q_V_6_ce0;
reg arr_3_Q_V_6_ce1;
reg arr_3_Q_V_7_ce0;
reg arr_3_Q_V_7_ce1;
reg arr_4_Q_V_3_ce0;
reg arr_4_Q_V_3_we0;
reg arr_4_I_V_4_ce0;
reg arr_4_I_V_4_we0;
reg arr_4_Q_V_4_ce0;
reg arr_4_Q_V_4_we0;
reg arr_4_I_V_5_ce0;
reg arr_4_I_V_5_we0;
reg arr_4_Q_V_5_ce0;
reg arr_4_Q_V_5_we0;
reg arr_4_I_V_6_ce0;
reg arr_4_I_V_6_we0;
reg arr_4_Q_V_6_ce0;
reg arr_4_Q_V_6_we0;
reg arr_4_I_V_7_ce0;
reg arr_4_I_V_7_we0;
reg arr_4_Q_V_7_ce0;
reg arr_4_Q_V_7_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln207_fu_770_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] lshr_ln_reg_1073;
reg   [4:0] lshr_ln_reg_1073_pp0_iter1_reg;
reg   [0:0] icmp_ln207_reg_1148;
reg   [0:0] icmp_ln207_reg_1148_pp0_iter1_reg;
wire   [26:0] ret_V_fu_821_p2;
reg   [26:0] ret_V_reg_1232;
wire   [26:0] ret_V_45_fu_835_p2;
reg   [26:0] ret_V_45_reg_1237;
wire   [26:0] ret_V_46_fu_849_p2;
reg   [26:0] ret_V_46_reg_1242;
wire   [26:0] ret_V_47_fu_863_p2;
reg   [26:0] ret_V_47_reg_1247;
wire   [26:0] ret_V_48_fu_877_p2;
reg   [26:0] ret_V_48_reg_1252;
wire   [26:0] ret_V_49_fu_891_p2;
reg   [26:0] ret_V_49_reg_1257;
wire   [26:0] ret_V_50_fu_905_p2;
reg   [26:0] ret_V_50_reg_1262;
wire   [26:0] ret_V_51_fu_919_p2;
reg   [26:0] ret_V_51_reg_1267;
wire   [26:0] ret_V_52_fu_933_p2;
reg   [26:0] ret_V_52_reg_1272;
wire   [26:0] ret_V_53_fu_947_p2;
reg   [26:0] ret_V_53_reg_1277;
wire   [26:0] ret_V_54_fu_961_p2;
reg   [26:0] ret_V_54_reg_1282;
wire   [26:0] ret_V_55_fu_975_p2;
reg   [26:0] ret_V_55_reg_1287;
wire   [26:0] ret_V_56_fu_989_p2;
reg   [26:0] ret_V_56_reg_1292;
wire   [26:0] ret_V_57_fu_1003_p2;
reg   [26:0] ret_V_57_reg_1297;
wire   [26:0] ret_V_58_fu_1017_p2;
reg   [26:0] ret_V_58_reg_1302;
wire   [26:0] ret_V_59_fu_1031_p2;
reg   [26:0] ret_V_59_reg_1307;
wire   [63:0] zext_ln813_fu_734_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln813_1_fu_782_p1;
wire   [63:0] zext_ln209_fu_1037_p1;
reg   [8:0] i_fu_104;
wire   [8:0] add_ln207_fu_802_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_11;
wire   [5:0] lshr_ln813_6_fu_724_p4;
wire   [8:0] or_ln207_fu_764_p2;
wire   [5:0] or_ln813_fu_776_p2;
wire  signed [26:0] sext_ln813_32_fu_817_p1;
wire  signed [26:0] sext_ln813_fu_813_p1;
wire  signed [26:0] sext_ln813_34_fu_831_p1;
wire  signed [26:0] sext_ln813_33_fu_827_p1;
wire  signed [26:0] sext_ln813_36_fu_845_p1;
wire  signed [26:0] sext_ln813_35_fu_841_p1;
wire  signed [26:0] sext_ln813_38_fu_859_p1;
wire  signed [26:0] sext_ln813_37_fu_855_p1;
wire  signed [26:0] sext_ln813_40_fu_873_p1;
wire  signed [26:0] sext_ln813_39_fu_869_p1;
wire  signed [26:0] sext_ln813_42_fu_887_p1;
wire  signed [26:0] sext_ln813_41_fu_883_p1;
wire  signed [26:0] sext_ln813_44_fu_901_p1;
wire  signed [26:0] sext_ln813_43_fu_897_p1;
wire  signed [26:0] sext_ln813_46_fu_915_p1;
wire  signed [26:0] sext_ln813_45_fu_911_p1;
wire  signed [26:0] sext_ln813_48_fu_929_p1;
wire  signed [26:0] sext_ln813_47_fu_925_p1;
wire  signed [26:0] sext_ln813_50_fu_943_p1;
wire  signed [26:0] sext_ln813_49_fu_939_p1;
wire  signed [26:0] sext_ln813_52_fu_957_p1;
wire  signed [26:0] sext_ln813_51_fu_953_p1;
wire  signed [26:0] sext_ln813_54_fu_971_p1;
wire  signed [26:0] sext_ln813_53_fu_967_p1;
wire  signed [26:0] sext_ln813_56_fu_985_p1;
wire  signed [26:0] sext_ln813_55_fu_981_p1;
wire  signed [26:0] sext_ln813_58_fu_999_p1;
wire  signed [26:0] sext_ln813_57_fu_995_p1;
wire  signed [26:0] sext_ln813_60_fu_1013_p1;
wire  signed [26:0] sext_ln813_59_fu_1009_p1;
wire  signed [26:0] sext_ln813_62_fu_1027_p1;
wire  signed [26:0] sext_ln813_61_fu_1023_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln207_fu_770_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_104 <= add_ln207_fu_802_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln207_reg_1148 <= icmp_ln207_fu_770_p2;
        icmp_ln207_reg_1148_pp0_iter1_reg <= icmp_ln207_reg_1148;
        lshr_ln_reg_1073 <= {{ap_sig_allocacmp_i_11[8:4]}};
        lshr_ln_reg_1073_pp0_iter1_reg <= lshr_ln_reg_1073;
        ret_V_45_reg_1237 <= ret_V_45_fu_835_p2;
        ret_V_46_reg_1242 <= ret_V_46_fu_849_p2;
        ret_V_47_reg_1247 <= ret_V_47_fu_863_p2;
        ret_V_48_reg_1252 <= ret_V_48_fu_877_p2;
        ret_V_49_reg_1257 <= ret_V_49_fu_891_p2;
        ret_V_50_reg_1262 <= ret_V_50_fu_905_p2;
        ret_V_51_reg_1267 <= ret_V_51_fu_919_p2;
        ret_V_reg_1232 <= ret_V_fu_821_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_52_reg_1272 <= ret_V_52_fu_933_p2;
        ret_V_53_reg_1277 <= ret_V_53_fu_947_p2;
        ret_V_54_reg_1282 <= ret_V_54_fu_961_p2;
        ret_V_55_reg_1287 <= ret_V_55_fu_975_p2;
        ret_V_56_reg_1292 <= ret_V_56_fu_989_p2;
        ret_V_57_reg_1297 <= ret_V_57_fu_1003_p2;
        ret_V_58_reg_1302 <= ret_V_58_fu_1017_p2;
        ret_V_59_reg_1307 <= ret_V_59_fu_1031_p2;
    end
end

always @ (*) begin
    if (((icmp_ln207_fu_770_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_11 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_11 = i_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_1_ce0 = 1'b1;
    end else begin
        arr_3_I_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_1_ce1 = 1'b1;
    end else begin
        arr_3_I_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_2_ce0 = 1'b1;
    end else begin
        arr_3_I_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_2_ce1 = 1'b1;
    end else begin
        arr_3_I_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_3_ce0 = 1'b1;
    end else begin
        arr_3_I_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_3_ce1 = 1'b1;
    end else begin
        arr_3_I_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_4_ce0 = 1'b1;
    end else begin
        arr_3_I_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_4_ce1 = 1'b1;
    end else begin
        arr_3_I_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_5_ce0 = 1'b1;
    end else begin
        arr_3_I_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_5_ce1 = 1'b1;
    end else begin
        arr_3_I_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_6_ce0 = 1'b1;
    end else begin
        arr_3_I_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_6_ce1 = 1'b1;
    end else begin
        arr_3_I_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_7_ce0 = 1'b1;
    end else begin
        arr_3_I_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_7_ce1 = 1'b1;
    end else begin
        arr_3_I_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_ce0 = 1'b1;
    end else begin
        arr_3_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_I_V_ce1 = 1'b1;
    end else begin
        arr_3_I_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_1_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_1_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_2_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_2_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_3_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_3_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_4_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_4_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_5_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_5_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_6_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_6_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_7_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_7_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_ce0 = 1'b1;
    end else begin
        arr_3_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_3_Q_V_ce1 = 1'b1;
    end else begin
        arr_3_Q_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_1_ce0 = 1'b1;
    end else begin
        arr_4_I_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_1_we0 = 1'b1;
    end else begin
        arr_4_I_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_2_ce0 = 1'b1;
    end else begin
        arr_4_I_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_2_we0 = 1'b1;
    end else begin
        arr_4_I_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_3_ce0 = 1'b1;
    end else begin
        arr_4_I_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_3_we0 = 1'b1;
    end else begin
        arr_4_I_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_4_ce0 = 1'b1;
    end else begin
        arr_4_I_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_4_we0 = 1'b1;
    end else begin
        arr_4_I_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_5_ce0 = 1'b1;
    end else begin
        arr_4_I_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_5_we0 = 1'b1;
    end else begin
        arr_4_I_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_6_ce0 = 1'b1;
    end else begin
        arr_4_I_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_6_we0 = 1'b1;
    end else begin
        arr_4_I_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_7_ce0 = 1'b1;
    end else begin
        arr_4_I_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_7_we0 = 1'b1;
    end else begin
        arr_4_I_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_ce0 = 1'b1;
    end else begin
        arr_4_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_I_V_we0 = 1'b1;
    end else begin
        arr_4_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_1_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_1_we0 = 1'b1;
    end else begin
        arr_4_Q_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_2_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_2_we0 = 1'b1;
    end else begin
        arr_4_Q_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_3_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_3_we0 = 1'b1;
    end else begin
        arr_4_Q_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_4_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_4_we0 = 1'b1;
    end else begin
        arr_4_Q_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_5_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_5_we0 = 1'b1;
    end else begin
        arr_4_Q_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_6_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_6_we0 = 1'b1;
    end else begin
        arr_4_Q_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_7_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln207_reg_1148_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_7_we0 = 1'b1;
    end else begin
        arr_4_Q_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_ce0 = 1'b1;
    end else begin
        arr_4_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_4_Q_V_we0 = 1'b1;
    end else begin
        arr_4_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln207_fu_802_p2 = (ap_sig_allocacmp_i_11 + 9'd16);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_3_I_V_1_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_1_address1 = zext_ln813_fu_734_p1;

assign arr_3_I_V_2_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_2_address1 = zext_ln813_fu_734_p1;

assign arr_3_I_V_3_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_3_address1 = zext_ln813_fu_734_p1;

assign arr_3_I_V_4_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_4_address1 = zext_ln813_fu_734_p1;

assign arr_3_I_V_5_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_5_address1 = zext_ln813_fu_734_p1;

assign arr_3_I_V_6_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_6_address1 = zext_ln813_fu_734_p1;

assign arr_3_I_V_7_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_7_address1 = zext_ln813_fu_734_p1;

assign arr_3_I_V_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_I_V_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_1_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_1_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_2_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_2_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_3_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_3_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_4_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_4_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_5_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_5_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_6_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_6_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_7_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_7_address1 = zext_ln813_fu_734_p1;

assign arr_3_Q_V_address0 = zext_ln813_1_fu_782_p1;

assign arr_3_Q_V_address1 = zext_ln813_fu_734_p1;

assign arr_4_I_V_1_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_1_d0 = ret_V_46_reg_1242;

assign arr_4_I_V_2_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_2_d0 = ret_V_48_reg_1252;

assign arr_4_I_V_3_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_3_d0 = ret_V_50_reg_1262;

assign arr_4_I_V_4_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_4_d0 = ret_V_52_reg_1272;

assign arr_4_I_V_5_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_5_d0 = ret_V_54_reg_1282;

assign arr_4_I_V_6_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_6_d0 = ret_V_56_reg_1292;

assign arr_4_I_V_7_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_7_d0 = ret_V_58_reg_1302;

assign arr_4_I_V_address0 = zext_ln209_fu_1037_p1;

assign arr_4_I_V_d0 = ret_V_reg_1232;

assign arr_4_Q_V_1_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_1_d0 = ret_V_47_reg_1247;

assign arr_4_Q_V_2_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_2_d0 = ret_V_49_reg_1257;

assign arr_4_Q_V_3_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_3_d0 = ret_V_51_reg_1267;

assign arr_4_Q_V_4_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_4_d0 = ret_V_53_reg_1277;

assign arr_4_Q_V_5_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_5_d0 = ret_V_55_reg_1287;

assign arr_4_Q_V_6_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_6_d0 = ret_V_57_reg_1297;

assign arr_4_Q_V_7_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_7_d0 = ret_V_59_reg_1307;

assign arr_4_Q_V_address0 = zext_ln209_fu_1037_p1;

assign arr_4_Q_V_d0 = ret_V_45_reg_1237;

assign icmp_ln207_fu_770_p2 = ((or_ln207_fu_764_p2 < 9'd280) ? 1'b1 : 1'b0);

assign lshr_ln813_6_fu_724_p4 = {{ap_sig_allocacmp_i_11[8:3]}};

assign or_ln207_fu_764_p2 = (ap_sig_allocacmp_i_11 | 9'd8);

assign or_ln813_fu_776_p2 = (lshr_ln813_6_fu_724_p4 | 6'd1);

assign ret_V_45_fu_835_p2 = ($signed(sext_ln813_34_fu_831_p1) + $signed(sext_ln813_33_fu_827_p1));

assign ret_V_46_fu_849_p2 = ($signed(sext_ln813_36_fu_845_p1) + $signed(sext_ln813_35_fu_841_p1));

assign ret_V_47_fu_863_p2 = ($signed(sext_ln813_38_fu_859_p1) + $signed(sext_ln813_37_fu_855_p1));

assign ret_V_48_fu_877_p2 = ($signed(sext_ln813_40_fu_873_p1) + $signed(sext_ln813_39_fu_869_p1));

assign ret_V_49_fu_891_p2 = ($signed(sext_ln813_42_fu_887_p1) + $signed(sext_ln813_41_fu_883_p1));

assign ret_V_50_fu_905_p2 = ($signed(sext_ln813_44_fu_901_p1) + $signed(sext_ln813_43_fu_897_p1));

assign ret_V_51_fu_919_p2 = ($signed(sext_ln813_46_fu_915_p1) + $signed(sext_ln813_45_fu_911_p1));

assign ret_V_52_fu_933_p2 = ($signed(sext_ln813_48_fu_929_p1) + $signed(sext_ln813_47_fu_925_p1));

assign ret_V_53_fu_947_p2 = ($signed(sext_ln813_50_fu_943_p1) + $signed(sext_ln813_49_fu_939_p1));

assign ret_V_54_fu_961_p2 = ($signed(sext_ln813_52_fu_957_p1) + $signed(sext_ln813_51_fu_953_p1));

assign ret_V_55_fu_975_p2 = ($signed(sext_ln813_54_fu_971_p1) + $signed(sext_ln813_53_fu_967_p1));

assign ret_V_56_fu_989_p2 = ($signed(sext_ln813_56_fu_985_p1) + $signed(sext_ln813_55_fu_981_p1));

assign ret_V_57_fu_1003_p2 = ($signed(sext_ln813_58_fu_999_p1) + $signed(sext_ln813_57_fu_995_p1));

assign ret_V_58_fu_1017_p2 = ($signed(sext_ln813_60_fu_1013_p1) + $signed(sext_ln813_59_fu_1009_p1));

assign ret_V_59_fu_1031_p2 = ($signed(sext_ln813_62_fu_1027_p1) + $signed(sext_ln813_61_fu_1023_p1));

assign ret_V_fu_821_p2 = ($signed(sext_ln813_32_fu_817_p1) + $signed(sext_ln813_fu_813_p1));

assign sext_ln813_32_fu_817_p1 = $signed(arr_3_I_V_1_q1);

assign sext_ln813_33_fu_827_p1 = $signed(arr_3_Q_V_q1);

assign sext_ln813_34_fu_831_p1 = $signed(arr_3_Q_V_1_q1);

assign sext_ln813_35_fu_841_p1 = $signed(arr_3_I_V_2_q1);

assign sext_ln813_36_fu_845_p1 = $signed(arr_3_I_V_3_q1);

assign sext_ln813_37_fu_855_p1 = $signed(arr_3_Q_V_2_q1);

assign sext_ln813_38_fu_859_p1 = $signed(arr_3_Q_V_3_q1);

assign sext_ln813_39_fu_869_p1 = $signed(arr_3_I_V_4_q1);

assign sext_ln813_40_fu_873_p1 = $signed(arr_3_I_V_5_q1);

assign sext_ln813_41_fu_883_p1 = $signed(arr_3_Q_V_4_q1);

assign sext_ln813_42_fu_887_p1 = $signed(arr_3_Q_V_5_q1);

assign sext_ln813_43_fu_897_p1 = $signed(arr_3_I_V_6_q1);

assign sext_ln813_44_fu_901_p1 = $signed(arr_3_I_V_7_q1);

assign sext_ln813_45_fu_911_p1 = $signed(arr_3_Q_V_6_q1);

assign sext_ln813_46_fu_915_p1 = $signed(arr_3_Q_V_7_q1);

assign sext_ln813_47_fu_925_p1 = $signed(arr_3_I_V_q0);

assign sext_ln813_48_fu_929_p1 = $signed(arr_3_I_V_1_q0);

assign sext_ln813_49_fu_939_p1 = $signed(arr_3_Q_V_q0);

assign sext_ln813_50_fu_943_p1 = $signed(arr_3_Q_V_1_q0);

assign sext_ln813_51_fu_953_p1 = $signed(arr_3_I_V_2_q0);

assign sext_ln813_52_fu_957_p1 = $signed(arr_3_I_V_3_q0);

assign sext_ln813_53_fu_967_p1 = $signed(arr_3_Q_V_2_q0);

assign sext_ln813_54_fu_971_p1 = $signed(arr_3_Q_V_3_q0);

assign sext_ln813_55_fu_981_p1 = $signed(arr_3_I_V_4_q0);

assign sext_ln813_56_fu_985_p1 = $signed(arr_3_I_V_5_q0);

assign sext_ln813_57_fu_995_p1 = $signed(arr_3_Q_V_4_q0);

assign sext_ln813_58_fu_999_p1 = $signed(arr_3_Q_V_5_q0);

assign sext_ln813_59_fu_1009_p1 = $signed(arr_3_I_V_6_q0);

assign sext_ln813_60_fu_1013_p1 = $signed(arr_3_I_V_7_q0);

assign sext_ln813_61_fu_1023_p1 = $signed(arr_3_Q_V_6_q0);

assign sext_ln813_62_fu_1027_p1 = $signed(arr_3_Q_V_7_q0);

assign sext_ln813_fu_813_p1 = $signed(arr_3_I_V_q1);

assign zext_ln209_fu_1037_p1 = lshr_ln_reg_1073_pp0_iter1_reg;

assign zext_ln813_1_fu_782_p1 = or_ln813_fu_776_p2;

assign zext_ln813_fu_734_p1 = lshr_ln813_6_fu_724_p4;

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_207_15
