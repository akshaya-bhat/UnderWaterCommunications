// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_244_19 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_7_I_V_address0,
        arr_7_I_V_ce0,
        arr_7_I_V_q0,
        arr_7_I_V_address1,
        arr_7_I_V_ce1,
        arr_7_I_V_q1,
        arr_8_I_V_address0,
        arr_8_I_V_ce0,
        arr_8_I_V_we0,
        arr_8_I_V_d0,
        arr_7_Q_V_address0,
        arr_7_Q_V_ce0,
        arr_7_Q_V_q0,
        arr_7_Q_V_address1,
        arr_7_Q_V_ce1,
        arr_7_Q_V_q1,
        arr_8_Q_V_address0,
        arr_8_Q_V_ce0,
        arr_8_Q_V_we0,
        arr_8_Q_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] arr_7_I_V_address0;
output   arr_7_I_V_ce0;
input  [29:0] arr_7_I_V_q0;
output  [4:0] arr_7_I_V_address1;
output   arr_7_I_V_ce1;
input  [29:0] arr_7_I_V_q1;
output  [2:0] arr_8_I_V_address0;
output   arr_8_I_V_ce0;
output   arr_8_I_V_we0;
output  [30:0] arr_8_I_V_d0;
output  [4:0] arr_7_Q_V_address0;
output   arr_7_Q_V_ce0;
input  [29:0] arr_7_Q_V_q0;
output  [4:0] arr_7_Q_V_address1;
output   arr_7_Q_V_ce1;
input  [29:0] arr_7_Q_V_q1;
output  [2:0] arr_8_Q_V_address0;
output   arr_8_Q_V_ce0;
output   arr_8_Q_V_we0;
output  [30:0] arr_8_Q_V_d0;

reg ap_idle;
reg arr_7_I_V_ce0;
reg arr_7_I_V_ce1;
reg arr_8_I_V_ce0;
reg arr_8_I_V_we0;
reg arr_7_Q_V_ce0;
reg arr_7_Q_V_ce1;
reg arr_8_Q_V_ce0;
reg arr_8_Q_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_130_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] lshr_ln_reg_235;
reg   [2:0] lshr_ln_reg_235_pp0_iter1_reg;
wire   [30:0] ret_V_fu_189_p2;
reg   [30:0] ret_V_reg_250;
wire   [30:0] ret_V_33_fu_203_p2;
reg   [30:0] ret_V_33_reg_255;
wire   [63:0] i_18_cast21_fu_138_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln813_fu_154_p1;
wire   [63:0] zext_ln245_fu_209_p1;
reg   [4:0] i_fu_42;
wire   [4:0] add_ln244_fu_170_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_7;
wire   [3:0] empty_74_fu_144_p1;
wire   [3:0] or_ln245_fu_148_p2;
wire  signed [30:0] sext_ln813_4_fu_185_p1;
wire  signed [30:0] sext_ln813_fu_181_p1;
wire  signed [30:0] sext_ln813_6_fu_199_p1;
wire  signed [30:0] sext_ln813_5_fu_195_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_130_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_42 <= add_ln244_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        lshr_ln_reg_235_pp0_iter1_reg <= lshr_ln_reg_235;
        ret_V_33_reg_255 <= ret_V_33_fu_203_p2;
        ret_V_reg_250 <= ret_V_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_130_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_235 <= {{ap_sig_allocacmp_i_7[3:1]}};
    end
end

always @ (*) begin
    if (((tmp_fu_130_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_7 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_7 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_7_I_V_ce0 = 1'b1;
    end else begin
        arr_7_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_7_I_V_ce1 = 1'b1;
    end else begin
        arr_7_I_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_7_Q_V_ce0 = 1'b1;
    end else begin
        arr_7_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_7_Q_V_ce1 = 1'b1;
    end else begin
        arr_7_Q_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_8_I_V_ce0 = 1'b1;
    end else begin
        arr_8_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_8_I_V_we0 = 1'b1;
    end else begin
        arr_8_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_8_Q_V_ce0 = 1'b1;
    end else begin
        arr_8_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_8_Q_V_we0 = 1'b1;
    end else begin
        arr_8_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln244_fu_170_p2 = (ap_sig_allocacmp_i_7 + 5'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_7_I_V_address0 = zext_ln813_fu_154_p1;

assign arr_7_I_V_address1 = i_18_cast21_fu_138_p1;

assign arr_7_Q_V_address0 = zext_ln813_fu_154_p1;

assign arr_7_Q_V_address1 = i_18_cast21_fu_138_p1;

assign arr_8_I_V_address0 = zext_ln245_fu_209_p1;

assign arr_8_I_V_d0 = ret_V_reg_250;

assign arr_8_Q_V_address0 = zext_ln245_fu_209_p1;

assign arr_8_Q_V_d0 = ret_V_33_reg_255;

assign empty_74_fu_144_p1 = ap_sig_allocacmp_i_7[3:0];

assign i_18_cast21_fu_138_p1 = ap_sig_allocacmp_i_7;

assign or_ln245_fu_148_p2 = (empty_74_fu_144_p1 | 4'd1);

assign ret_V_33_fu_203_p2 = ($signed(sext_ln813_6_fu_199_p1) + $signed(sext_ln813_5_fu_195_p1));

assign ret_V_fu_189_p2 = ($signed(sext_ln813_4_fu_185_p1) + $signed(sext_ln813_fu_181_p1));

assign sext_ln813_4_fu_185_p1 = $signed(arr_7_I_V_q0);

assign sext_ln813_5_fu_195_p1 = $signed(arr_7_Q_V_q1);

assign sext_ln813_6_fu_199_p1 = $signed(arr_7_Q_V_q0);

assign sext_ln813_fu_181_p1 = $signed(arr_7_I_V_q1);

assign tmp_fu_130_p3 = ap_sig_allocacmp_i_7[32'd4];

assign zext_ln245_fu_209_p1 = lshr_ln_reg_235_pp0_iter1_reg;

assign zext_ln813_fu_154_p1 = or_ln245_fu_148_p2;

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_244_19
