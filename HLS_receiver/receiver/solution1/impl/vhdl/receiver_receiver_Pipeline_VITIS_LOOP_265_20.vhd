-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_265_20 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln269 : IN STD_LOGIC_VECTOR (23 downto 0);
    sext_ln269_2 : IN STD_LOGIC_VECTOR (23 downto 0);
    real_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    real_output_ce0 : OUT STD_LOGIC;
    real_output_we0 : OUT STD_LOGIC;
    real_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    real_output_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    real_output_ce1 : OUT STD_LOGIC;
    real_output_we1 : OUT STD_LOGIC;
    real_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imag_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    imag_output_ce0 : OUT STD_LOGIC;
    imag_output_we0 : OUT STD_LOGIC;
    imag_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    imag_output_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    imag_output_ce1 : OUT STD_LOGIC;
    imag_output_we1 : OUT STD_LOGIC;
    imag_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    matched_I_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_I_12_ce0 : OUT STD_LOGIC;
    matched_I_12_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    matched_I_12_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_I_12_ce1 : OUT STD_LOGIC;
    matched_I_12_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
    matched_Q_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_Q_12_ce0 : OUT STD_LOGIC;
    matched_Q_12_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    matched_Q_12_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_Q_12_ce1 : OUT STD_LOGIC;
    matched_Q_12_q1 : IN STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of receiver_receiver_Pipeline_VITIS_LOOP_265_20 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_BC : STD_LOGIC_VECTOR (12 downto 0) := "0000010111100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_EC : STD_LOGIC_VECTOR (7 downto 0) := "11101100";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv8_1A : STD_LOGIC_VECTOR (7 downto 0) := "00011010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_1C : STD_LOGIC_VECTOR (7 downto 0) := "00011100";
    constant ap_const_lv8_1E : STD_LOGIC_VECTOR (7 downto 0) := "00011110";
    constant ap_const_lv13_200 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal icmp_ln265_reg_2320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage7 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_668 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_672 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_676 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_680 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln269_2_cast_fu_684_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_2_cast_reg_1902 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_cast_fu_688_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_cast_reg_1938 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_4_reg_1974 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln_fu_705_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_1979 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln269_1_fu_755_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_1_reg_2037 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_3_fu_759_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_3_reg_2043 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_4_fu_773_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_4_reg_2049 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_5_fu_777_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_5_reg_2055 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_6_fu_813_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_6_reg_2081 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_7_fu_817_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_7_reg_2087 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_8_fu_831_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_8_reg_2093 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_9_fu_835_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_9_reg_2099 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_reg_2125 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_1_reg_2130 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_781_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_2_reg_2135 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_786_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_3_reg_2140 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_10_fu_871_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_10_reg_2145 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_11_fu_875_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_11_reg_2151 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_12_fu_889_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_12_reg_2157 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_13_fu_893_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_13_reg_2163 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_821_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_4_reg_2189 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_826_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_5_reg_2194 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_839_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_6_reg_2199 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_844_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_7_reg_2204 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_14_fu_929_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_14_reg_2209 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_15_fu_933_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_15_reg_2215 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_16_fu_947_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_16_reg_2221 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_17_fu_951_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_17_reg_2227 : STD_LOGIC_VECTOR (39 downto 0);
    signal j_1_reg_2253 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_879_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_8_reg_2271 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_884_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_9_reg_2276 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_897_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_10_reg_2281 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_902_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_11_reg_2286 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_18_fu_1048_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_18_reg_2291 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_19_fu_1052_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_19_reg_2297 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_20_fu_1066_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_20_reg_2303 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_21_fu_1070_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_21_reg_2309 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_11_fu_1084_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_11_reg_2315 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln265_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_937_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_12_reg_2344 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_942_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_13_reg_2349 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_955_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_14_reg_2354 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_960_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_15_reg_2359 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_22_fu_1180_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_22_reg_2364 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_23_fu_1184_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_23_reg_2370 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_24_fu_1198_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_24_reg_2376 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_25_fu_1202_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_25_reg_2382 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1056_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_16_reg_2408 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1061_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_17_reg_2413 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1074_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_18_reg_2418 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1079_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_19_reg_2423 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_26_fu_1310_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_26_reg_2428 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_27_fu_1314_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_27_reg_2434 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_28_fu_1328_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_28_reg_2440 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_29_fu_1332_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_29_reg_2446 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1188_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_20_reg_2452 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1193_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_21_reg_2457 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1206_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_22_reg_2462 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1211_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_23_reg_2467 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_30_fu_1408_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_30_reg_2472 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_31_fu_1412_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_31_reg_2478 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_32_fu_1426_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_32_reg_2484 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_33_fu_1430_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln269_33_reg_2490 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1318_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_24_reg_2496 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1323_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_25_reg_2501 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1336_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_26_reg_2506 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1341_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_27_reg_2511 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1416_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_28_reg_2516 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1421_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_29_reg_2521 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1434_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_30_reg_2526 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1439_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln270_31_reg_2531 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage3 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal zext_ln264_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln265_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_1_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln265_2_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_3_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln265_4_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_5_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln265_6_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_7_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln265_8_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_9_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln265_10_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln269_fu_1022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_11_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_13_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_1_fu_1123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln269_2_fu_1154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_14_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_15_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_3_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_4_fu_1284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_5_fu_1351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_6_fu_1382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_7_fu_1449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_8_fu_1480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_9_fu_1511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_10_fu_1542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_12_fu_1568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_11_fu_1598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_12_fu_1629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_13_fu_1660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_15_fu_1686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_104 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln271_fu_1238_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln265_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_1_fu_733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_2_fu_744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_763_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_768_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_781_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_786_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln265_3_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_4_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_821_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_826_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_839_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_844_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln265_5_fu_849_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_6_fu_860_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_879_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_884_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_897_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_902_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln265_7_fu_907_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_8_fu_918_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_937_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_955_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_960_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln265_9_fu_965_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_10_fu_976_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1696_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1702_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_fu_1016_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1708_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1714_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1056_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1061_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1074_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1079_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln265_11_fu_1096_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_12_fu_1107_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_1_fu_1118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1720_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1726_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_2_fu_1149_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1732_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1738_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1188_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1193_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1206_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1211_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln265_13_fu_1216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln265_14_fu_1227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln265_3_fu_1248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1744_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1750_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_4_fu_1279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1756_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1762_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1318_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1323_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1336_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1341_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln265_5_fu_1346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1768_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1774_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_6_fu_1377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1780_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1786_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1416_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1421_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1434_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1439_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln265_7_fu_1444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1792_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1798_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_8_fu_1475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1804_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1810_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_9_fu_1506_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1816_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1822_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_10_fu_1537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1828_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1834_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1840_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1846_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_12_fu_1593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1852_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1858_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_13_fu_1624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1864_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1870_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln265_14_fu_1655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1876_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1882_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1696_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1696_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1702_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1702_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1708_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1708_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1714_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1714_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1720_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1720_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1726_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1726_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1732_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1732_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1738_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1738_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1744_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1744_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1750_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1750_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1756_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1756_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1762_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1762_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1768_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1768_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1774_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1774_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1780_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1780_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1786_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1786_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1792_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1792_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1798_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1798_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1804_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1804_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1810_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1810_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1816_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1816_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1822_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1822_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1828_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1828_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1834_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1834_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1840_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1840_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1846_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1846_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1852_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1852_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1858_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1858_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1864_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1864_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1870_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1870_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1876_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1876_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1882_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1882_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component receiver_mul_24s_18s_40_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component receiver_mac_mulsub_24s_18s_40s_40_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component receiver_mac_muladd_24s_18s_40s_40_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component receiver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_24s_18s_40_3_1_U590 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_763_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_763_p2);

    mul_24s_18s_40_3_1_U591 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_768_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_768_p2);

    mul_24s_18s_40_3_1_U592 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_781_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_781_p2);

    mul_24s_18s_40_3_1_U593 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_786_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_786_p2);

    mul_24s_18s_40_3_1_U594 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_821_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_821_p2);

    mul_24s_18s_40_3_1_U595 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_826_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_826_p2);

    mul_24s_18s_40_3_1_U596 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_839_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_839_p2);

    mul_24s_18s_40_3_1_U597 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_844_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_844_p2);

    mul_24s_18s_40_3_1_U598 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_879_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_879_p2);

    mul_24s_18s_40_3_1_U599 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_884_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_884_p2);

    mul_24s_18s_40_3_1_U600 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_897_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_897_p2);

    mul_24s_18s_40_3_1_U601 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_902_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_902_p2);

    mul_24s_18s_40_3_1_U602 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_937_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_937_p2);

    mul_24s_18s_40_3_1_U603 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_942_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_942_p2);

    mul_24s_18s_40_3_1_U604 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_955_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_955_p2);

    mul_24s_18s_40_3_1_U605 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_960_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_960_p2);

    mul_24s_18s_40_3_1_U606 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1056_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_1056_p2);

    mul_24s_18s_40_3_1_U607 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1061_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_1061_p2);

    mul_24s_18s_40_3_1_U608 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1074_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_1074_p2);

    mul_24s_18s_40_3_1_U609 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1079_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_1079_p2);

    mul_24s_18s_40_3_1_U610 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1188_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_1188_p2);

    mul_24s_18s_40_3_1_U611 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1193_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_1193_p2);

    mul_24s_18s_40_3_1_U612 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1206_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_1206_p2);

    mul_24s_18s_40_3_1_U613 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1211_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_1211_p2);

    mul_24s_18s_40_3_1_U614 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1318_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_1318_p2);

    mul_24s_18s_40_3_1_U615 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1323_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_1323_p2);

    mul_24s_18s_40_3_1_U616 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1336_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_1336_p2);

    mul_24s_18s_40_3_1_U617 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1341_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_1341_p2);

    mul_24s_18s_40_3_1_U618 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1416_p0,
        din1 => reg_668,
        ce => ap_const_logic_1,
        dout => grp_fu_1416_p2);

    mul_24s_18s_40_3_1_U619 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1421_p0,
        din1 => reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_1421_p2);

    mul_24s_18s_40_3_1_U620 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1434_p0,
        din1 => reg_676,
        ce => ap_const_logic_1,
        dout => grp_fu_1434_p2);

    mul_24s_18s_40_3_1_U621 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1439_p0,
        din1 => reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_1439_p2);

    mac_mulsub_24s_18s_40s_40_4_1_U622 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1696_p0,
        din1 => grp_fu_1696_p1,
        din2 => mul_ln269_reg_2125,
        ce => ap_const_logic_1,
        dout => grp_fu_1696_p3);

    mac_muladd_24s_18s_40s_40_4_1_U623 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1702_p0,
        din1 => grp_fu_1702_p1,
        din2 => mul_ln270_1_reg_2130,
        ce => ap_const_logic_1,
        dout => grp_fu_1702_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U624 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1708_p0,
        din1 => grp_fu_1708_p1,
        din2 => mul_ln269_2_reg_2135,
        ce => ap_const_logic_1,
        dout => grp_fu_1708_p3);

    mac_muladd_24s_18s_40s_40_4_1_U625 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1714_p0,
        din1 => grp_fu_1714_p1,
        din2 => mul_ln270_3_reg_2140,
        ce => ap_const_logic_1,
        dout => grp_fu_1714_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U626 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1720_p0,
        din1 => grp_fu_1720_p1,
        din2 => mul_ln269_4_reg_2189,
        ce => ap_const_logic_1,
        dout => grp_fu_1720_p3);

    mac_muladd_24s_18s_40s_40_4_1_U627 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1726_p0,
        din1 => grp_fu_1726_p1,
        din2 => mul_ln270_5_reg_2194,
        ce => ap_const_logic_1,
        dout => grp_fu_1726_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U628 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1732_p0,
        din1 => grp_fu_1732_p1,
        din2 => mul_ln269_6_reg_2199,
        ce => ap_const_logic_1,
        dout => grp_fu_1732_p3);

    mac_muladd_24s_18s_40s_40_4_1_U629 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1738_p0,
        din1 => grp_fu_1738_p1,
        din2 => mul_ln270_7_reg_2204,
        ce => ap_const_logic_1,
        dout => grp_fu_1738_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U630 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1744_p0,
        din1 => grp_fu_1744_p1,
        din2 => mul_ln269_8_reg_2271,
        ce => ap_const_logic_1,
        dout => grp_fu_1744_p3);

    mac_muladd_24s_18s_40s_40_4_1_U631 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1750_p0,
        din1 => grp_fu_1750_p1,
        din2 => mul_ln270_9_reg_2276,
        ce => ap_const_logic_1,
        dout => grp_fu_1750_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U632 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1756_p0,
        din1 => grp_fu_1756_p1,
        din2 => mul_ln269_10_reg_2281,
        ce => ap_const_logic_1,
        dout => grp_fu_1756_p3);

    mac_muladd_24s_18s_40s_40_4_1_U633 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1762_p0,
        din1 => grp_fu_1762_p1,
        din2 => mul_ln270_11_reg_2286,
        ce => ap_const_logic_1,
        dout => grp_fu_1762_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U634 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1768_p0,
        din1 => grp_fu_1768_p1,
        din2 => mul_ln269_12_reg_2344,
        ce => ap_const_logic_1,
        dout => grp_fu_1768_p3);

    mac_muladd_24s_18s_40s_40_4_1_U635 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1774_p0,
        din1 => grp_fu_1774_p1,
        din2 => mul_ln270_13_reg_2349,
        ce => ap_const_logic_1,
        dout => grp_fu_1774_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U636 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1780_p0,
        din1 => grp_fu_1780_p1,
        din2 => mul_ln269_14_reg_2354,
        ce => ap_const_logic_1,
        dout => grp_fu_1780_p3);

    mac_muladd_24s_18s_40s_40_4_1_U637 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1786_p0,
        din1 => grp_fu_1786_p1,
        din2 => mul_ln270_15_reg_2359,
        ce => ap_const_logic_1,
        dout => grp_fu_1786_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U638 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1792_p0,
        din1 => grp_fu_1792_p1,
        din2 => mul_ln269_16_reg_2408,
        ce => ap_const_logic_1,
        dout => grp_fu_1792_p3);

    mac_muladd_24s_18s_40s_40_4_1_U639 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1798_p0,
        din1 => grp_fu_1798_p1,
        din2 => mul_ln270_17_reg_2413,
        ce => ap_const_logic_1,
        dout => grp_fu_1798_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U640 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1804_p0,
        din1 => grp_fu_1804_p1,
        din2 => mul_ln269_18_reg_2418,
        ce => ap_const_logic_1,
        dout => grp_fu_1804_p3);

    mac_muladd_24s_18s_40s_40_4_1_U641 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1810_p0,
        din1 => grp_fu_1810_p1,
        din2 => mul_ln270_19_reg_2423,
        ce => ap_const_logic_1,
        dout => grp_fu_1810_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U642 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1816_p0,
        din1 => grp_fu_1816_p1,
        din2 => mul_ln269_20_reg_2452,
        ce => ap_const_logic_1,
        dout => grp_fu_1816_p3);

    mac_muladd_24s_18s_40s_40_4_1_U643 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1822_p0,
        din1 => grp_fu_1822_p1,
        din2 => mul_ln270_21_reg_2457,
        ce => ap_const_logic_1,
        dout => grp_fu_1822_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U644 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1828_p0,
        din1 => grp_fu_1828_p1,
        din2 => mul_ln269_22_reg_2462,
        ce => ap_const_logic_1,
        dout => grp_fu_1828_p3);

    mac_muladd_24s_18s_40s_40_4_1_U645 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1834_p0,
        din1 => grp_fu_1834_p1,
        din2 => mul_ln270_23_reg_2467,
        ce => ap_const_logic_1,
        dout => grp_fu_1834_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U646 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1840_p0,
        din1 => grp_fu_1840_p1,
        din2 => mul_ln269_24_reg_2496,
        ce => ap_const_logic_1,
        dout => grp_fu_1840_p3);

    mac_muladd_24s_18s_40s_40_4_1_U647 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1846_p0,
        din1 => grp_fu_1846_p1,
        din2 => mul_ln270_25_reg_2501,
        ce => ap_const_logic_1,
        dout => grp_fu_1846_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U648 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1852_p0,
        din1 => grp_fu_1852_p1,
        din2 => mul_ln269_26_reg_2506,
        ce => ap_const_logic_1,
        dout => grp_fu_1852_p3);

    mac_muladd_24s_18s_40s_40_4_1_U649 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1858_p0,
        din1 => grp_fu_1858_p1,
        din2 => mul_ln270_27_reg_2511,
        ce => ap_const_logic_1,
        dout => grp_fu_1858_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U650 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1864_p0,
        din1 => grp_fu_1864_p1,
        din2 => mul_ln269_28_reg_2516,
        ce => ap_const_logic_1,
        dout => grp_fu_1864_p3);

    mac_muladd_24s_18s_40s_40_4_1_U651 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1870_p0,
        din1 => grp_fu_1870_p1,
        din2 => mul_ln270_29_reg_2521,
        ce => ap_const_logic_1,
        dout => grp_fu_1870_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U652 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1876_p0,
        din1 => grp_fu_1876_p1,
        din2 => mul_ln269_30_reg_2526,
        ce => ap_const_logic_1,
        dout => grp_fu_1876_p3);

    mac_muladd_24s_18s_40s_40_4_1_U653 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1882_p0,
        din1 => grp_fu_1882_p1,
        din2 => mul_ln270_31_reg_2531,
        ce => ap_const_logic_1,
        dout => grp_fu_1882_p3);

    flow_control_loop_pipe_sequential_init_U : component receiver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage7,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage3) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage3) and (ap_idle_pp0_0to0 = ap_const_logic_1)) or ((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_104 <= ap_const_lv13_BC;
            elsif (((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                i_fu_104 <= add_ln271_fu_1238_p2;
            end if; 
        end if;
    end process;

    j_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_100 <= ap_const_lv8_0;
            elsif (((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                j_fu_100 <= add_ln265_15_fu_1686_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_4_reg_1974 <= ap_sig_allocacmp_i_4;
                lshr_ln_reg_1979 <= ap_sig_allocacmp_i_4(11 downto 4);
                mul_ln269_16_reg_2408 <= grp_fu_1056_p2;
                mul_ln269_18_reg_2418 <= grp_fu_1074_p2;
                mul_ln270_17_reg_2413 <= grp_fu_1061_p2;
                mul_ln270_19_reg_2423 <= grp_fu_1079_p2;
                sext_ln269_2_cast_reg_1902 <= sext_ln269_2_cast_fu_684_p1;
                sext_ln269_cast_reg_1938 <= sext_ln269_cast_fu_688_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                icmp_ln265_reg_2320 <= icmp_ln265_fu_1090_p2;
                j_1_reg_2253 <= j_fu_100;
                mul_ln269_10_reg_2281 <= grp_fu_897_p2;
                mul_ln269_8_reg_2271 <= grp_fu_879_p2;
                mul_ln270_11_reg_2286 <= grp_fu_902_p2;
                mul_ln270_9_reg_2276 <= grp_fu_884_p2;
                    or_ln265_11_reg_2315(1 downto 0) <= or_ln265_11_fu_1084_p2(1 downto 0);    or_ln265_11_reg_2315(7 downto 4) <= or_ln265_11_fu_1084_p2(7 downto 4);
                sext_ln269_18_reg_2291 <= sext_ln269_18_fu_1048_p1;
                sext_ln269_19_reg_2297 <= sext_ln269_19_fu_1052_p1;
                sext_ln269_20_reg_2303 <= sext_ln269_20_fu_1066_p1;
                sext_ln269_21_reg_2309 <= sext_ln269_21_fu_1070_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                mul_ln269_12_reg_2344 <= grp_fu_937_p2;
                mul_ln269_14_reg_2354 <= grp_fu_955_p2;
                mul_ln270_13_reg_2349 <= grp_fu_942_p2;
                mul_ln270_15_reg_2359 <= grp_fu_960_p2;
                sext_ln269_22_reg_2364 <= sext_ln269_22_fu_1180_p1;
                sext_ln269_23_reg_2370 <= sext_ln269_23_fu_1184_p1;
                sext_ln269_24_reg_2376 <= sext_ln269_24_fu_1198_p1;
                sext_ln269_25_reg_2382 <= sext_ln269_25_fu_1202_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln269_20_reg_2452 <= grp_fu_1188_p2;
                mul_ln269_22_reg_2462 <= grp_fu_1206_p2;
                mul_ln270_21_reg_2457 <= grp_fu_1193_p2;
                mul_ln270_23_reg_2467 <= grp_fu_1211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln269_24_reg_2496 <= grp_fu_1318_p2;
                mul_ln269_26_reg_2506 <= grp_fu_1336_p2;
                mul_ln270_25_reg_2501 <= grp_fu_1323_p2;
                mul_ln270_27_reg_2511 <= grp_fu_1341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln269_28_reg_2516 <= grp_fu_1416_p2;
                mul_ln269_30_reg_2526 <= grp_fu_1434_p2;
                mul_ln270_29_reg_2521 <= grp_fu_1421_p2;
                mul_ln270_31_reg_2531 <= grp_fu_1439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln269_2_reg_2135 <= grp_fu_781_p2;
                mul_ln269_reg_2125 <= grp_fu_763_p2;
                mul_ln270_1_reg_2130 <= grp_fu_768_p2;
                mul_ln270_3_reg_2140 <= grp_fu_786_p2;
                sext_ln269_10_reg_2145 <= sext_ln269_10_fu_871_p1;
                sext_ln269_11_reg_2151 <= sext_ln269_11_fu_875_p1;
                sext_ln269_12_reg_2157 <= sext_ln269_12_fu_889_p1;
                sext_ln269_13_reg_2163 <= sext_ln269_13_fu_893_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul_ln269_4_reg_2189 <= grp_fu_821_p2;
                mul_ln269_6_reg_2199 <= grp_fu_839_p2;
                mul_ln270_5_reg_2194 <= grp_fu_826_p2;
                mul_ln270_7_reg_2204 <= grp_fu_844_p2;
                sext_ln269_14_reg_2209 <= sext_ln269_14_fu_929_p1;
                sext_ln269_15_reg_2215 <= sext_ln269_15_fu_933_p1;
                sext_ln269_16_reg_2221 <= sext_ln269_16_fu_947_p1;
                sext_ln269_17_reg_2227 <= sext_ln269_17_fu_951_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) 
    and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_668 <= matched_I_12_q1;
                reg_672 <= matched_Q_12_q1;
                reg_676 <= matched_I_12_q0;
                reg_680 <= matched_Q_12_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sext_ln269_1_reg_2037 <= sext_ln269_1_fu_755_p1;
                sext_ln269_3_reg_2043 <= sext_ln269_3_fu_759_p1;
                sext_ln269_4_reg_2049 <= sext_ln269_4_fu_773_p1;
                sext_ln269_5_reg_2055 <= sext_ln269_5_fu_777_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln269_26_reg_2428 <= sext_ln269_26_fu_1310_p1;
                sext_ln269_27_reg_2434 <= sext_ln269_27_fu_1314_p1;
                sext_ln269_28_reg_2440 <= sext_ln269_28_fu_1328_p1;
                sext_ln269_29_reg_2446 <= sext_ln269_29_fu_1332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sext_ln269_30_reg_2472 <= sext_ln269_30_fu_1408_p1;
                sext_ln269_31_reg_2478 <= sext_ln269_31_fu_1412_p1;
                sext_ln269_32_reg_2484 <= sext_ln269_32_fu_1426_p1;
                sext_ln269_33_reg_2490 <= sext_ln269_33_fu_1430_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                sext_ln269_6_reg_2081 <= sext_ln269_6_fu_813_p1;
                sext_ln269_7_reg_2087 <= sext_ln269_7_fu_817_p1;
                sext_ln269_8_reg_2093 <= sext_ln269_8_fu_831_p1;
                sext_ln269_9_reg_2099 <= sext_ln269_9_fu_835_p1;
            end if;
        end if;
    end process;
    or_ln265_11_reg_2315(3 downto 2) <= "11";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage7_subdone, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter1_stage3, ap_block_pp0_stage5_subdone, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage3) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln265_10_fu_976_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_16));
    add_ln265_11_fu_1096_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_18));
    add_ln265_12_fu_1107_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_1A));
    add_ln265_13_fu_1216_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_1C));
    add_ln265_14_fu_1227_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_1E));
    add_ln265_15_fu_1686_p2 <= std_logic_vector(unsigned(j_1_reg_2253) + unsigned(ap_const_lv8_10));
    add_ln265_1_fu_733_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_4));
    add_ln265_2_fu_744_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_6));
    add_ln265_3_fu_791_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_8));
    add_ln265_4_fu_802_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_A));
    add_ln265_5_fu_849_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_C));
    add_ln265_6_fu_860_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_E));
    add_ln265_7_fu_907_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_10));
    add_ln265_8_fu_918_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_12));
    add_ln265_9_fu_965_p2 <= std_logic_vector(unsigned(lshr_ln_reg_1979) + unsigned(ap_const_lv8_14));
    add_ln265_fu_721_p2 <= std_logic_vector(unsigned(lshr_ln_fu_705_p4) + unsigned(ap_const_lv8_2));
    add_ln271_fu_1238_p2 <= std_logic_vector(unsigned(i_4_reg_1974) + unsigned(ap_const_lv13_200));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone, icmp_ln265_reg_2320)
    begin
        if (((icmp_ln265_reg_2320 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage3_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln265_reg_2320, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((icmp_ln265_reg_2320 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter1_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage7;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_104)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv13_BC;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_104;
        end if; 
    end process;

    grp_fu_1056_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1061_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1074_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1079_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1188_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1193_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1206_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1211_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1318_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1323_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1336_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1341_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1416_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1421_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1434_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1439_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_1696_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1696_p1 <= sext_ln269_3_reg_2043(18 - 1 downto 0);
    grp_fu_1702_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1702_p1 <= sext_ln269_1_reg_2037(18 - 1 downto 0);
    grp_fu_1708_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1708_p1 <= sext_ln269_5_reg_2055(18 - 1 downto 0);
    grp_fu_1714_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1714_p1 <= sext_ln269_4_reg_2049(18 - 1 downto 0);
    grp_fu_1720_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1720_p1 <= sext_ln269_7_reg_2087(18 - 1 downto 0);
    grp_fu_1726_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1726_p1 <= sext_ln269_6_reg_2081(18 - 1 downto 0);
    grp_fu_1732_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1732_p1 <= sext_ln269_9_reg_2099(18 - 1 downto 0);
    grp_fu_1738_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1738_p1 <= sext_ln269_8_reg_2093(18 - 1 downto 0);
    grp_fu_1744_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1744_p1 <= sext_ln269_11_reg_2151(18 - 1 downto 0);
    grp_fu_1750_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1750_p1 <= sext_ln269_10_reg_2145(18 - 1 downto 0);
    grp_fu_1756_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1756_p1 <= sext_ln269_13_reg_2163(18 - 1 downto 0);
    grp_fu_1762_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1762_p1 <= sext_ln269_12_reg_2157(18 - 1 downto 0);
    grp_fu_1768_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1768_p1 <= sext_ln269_15_reg_2215(18 - 1 downto 0);
    grp_fu_1774_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1774_p1 <= sext_ln269_14_reg_2209(18 - 1 downto 0);
    grp_fu_1780_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1780_p1 <= sext_ln269_17_reg_2227(18 - 1 downto 0);
    grp_fu_1786_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1786_p1 <= sext_ln269_16_reg_2221(18 - 1 downto 0);
    grp_fu_1792_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1792_p1 <= sext_ln269_19_reg_2297(18 - 1 downto 0);
    grp_fu_1798_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1798_p1 <= sext_ln269_18_reg_2291(18 - 1 downto 0);
    grp_fu_1804_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1804_p1 <= sext_ln269_21_reg_2309(18 - 1 downto 0);
    grp_fu_1810_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1810_p1 <= sext_ln269_20_reg_2303(18 - 1 downto 0);
    grp_fu_1816_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1816_p1 <= sext_ln269_23_reg_2370(18 - 1 downto 0);
    grp_fu_1822_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1822_p1 <= sext_ln269_22_reg_2364(18 - 1 downto 0);
    grp_fu_1828_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1828_p1 <= sext_ln269_25_reg_2382(18 - 1 downto 0);
    grp_fu_1834_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1834_p1 <= sext_ln269_24_reg_2376(18 - 1 downto 0);
    grp_fu_1840_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1840_p1 <= sext_ln269_27_reg_2434(18 - 1 downto 0);
    grp_fu_1846_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1846_p1 <= sext_ln269_26_reg_2428(18 - 1 downto 0);
    grp_fu_1852_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1852_p1 <= sext_ln269_29_reg_2446(18 - 1 downto 0);
    grp_fu_1858_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1858_p1 <= sext_ln269_28_reg_2440(18 - 1 downto 0);
    grp_fu_1864_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1864_p1 <= sext_ln269_31_reg_2478(18 - 1 downto 0);
    grp_fu_1870_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1870_p1 <= sext_ln269_30_reg_2472(18 - 1 downto 0);
    grp_fu_1876_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1876_p1 <= sext_ln269_33_reg_2490(18 - 1 downto 0);
    grp_fu_1882_p0 <= sext_ln269_2_cast_reg_1902(24 - 1 downto 0);
    grp_fu_1882_p1 <= sext_ln269_32_reg_2484(18 - 1 downto 0);
    grp_fu_763_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_768_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_781_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_786_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_821_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_826_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_839_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_844_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_879_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_884_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_897_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_902_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_937_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_942_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_955_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    grp_fu_960_p0 <= sext_ln269_cast_reg_1938(24 - 1 downto 0);
    icmp_ln265_fu_1090_p2 <= "1" when (unsigned(or_ln265_11_fu_1084_p2) < unsigned(ap_const_lv8_EC)) else "0";

    imag_output_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, zext_ln269_fu_1022_p1, ap_block_pp0_stage7, zext_ln269_2_fu_1154_p1, zext_ln269_4_fu_1284_p1, zext_ln269_6_fu_1382_p1, zext_ln269_8_fu_1480_p1, zext_ln269_10_fu_1542_p1, zext_ln269_11_fu_1598_p1, zext_ln269_13_fu_1660_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            imag_output_address0 <= zext_ln269_13_fu_1660_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            imag_output_address0 <= zext_ln269_11_fu_1598_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            imag_output_address0 <= zext_ln269_10_fu_1542_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            imag_output_address0 <= zext_ln269_8_fu_1480_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            imag_output_address0 <= zext_ln269_6_fu_1382_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imag_output_address0 <= zext_ln269_4_fu_1284_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            imag_output_address0 <= zext_ln269_2_fu_1154_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            imag_output_address0 <= zext_ln269_fu_1022_p1(8 - 1 downto 0);
        else 
            imag_output_address0 <= "XXXXXXXX";
        end if; 
    end process;


    imag_output_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, j_cast_fu_990_p1, ap_block_pp0_stage6, zext_ln269_1_fu_1123_p1, ap_block_pp0_stage7, zext_ln269_3_fu_1253_p1, zext_ln269_5_fu_1351_p1, zext_ln269_7_fu_1449_p1, zext_ln269_9_fu_1511_p1, zext_ln265_12_fu_1568_p1, zext_ln269_12_fu_1629_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            imag_output_address1 <= zext_ln269_12_fu_1629_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            imag_output_address1 <= zext_ln265_12_fu_1568_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            imag_output_address1 <= zext_ln269_9_fu_1511_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            imag_output_address1 <= zext_ln269_7_fu_1449_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            imag_output_address1 <= zext_ln269_5_fu_1351_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imag_output_address1 <= zext_ln269_3_fu_1253_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            imag_output_address1 <= zext_ln269_1_fu_1123_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            imag_output_address1 <= j_cast_fu_990_p1(8 - 1 downto 0);
        else 
            imag_output_address1 <= "XXXXXXXX";
        end if; 
    end process;


    imag_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            imag_output_ce0 <= ap_const_logic_1;
        else 
            imag_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    imag_output_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            imag_output_ce1 <= ap_const_logic_1;
        else 
            imag_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    imag_output_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, grp_fu_1714_p3, grp_fu_1738_p3, grp_fu_1762_p3, grp_fu_1786_p3, grp_fu_1810_p3, grp_fu_1834_p3, grp_fu_1858_p3, grp_fu_1882_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            imag_output_d0 <= grp_fu_1882_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            imag_output_d0 <= grp_fu_1858_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            imag_output_d0 <= grp_fu_1834_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            imag_output_d0 <= grp_fu_1810_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            imag_output_d0 <= grp_fu_1786_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imag_output_d0 <= grp_fu_1762_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            imag_output_d0 <= grp_fu_1738_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            imag_output_d0 <= grp_fu_1714_p3(39 downto 8);
        else 
            imag_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    imag_output_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, grp_fu_1702_p3, grp_fu_1726_p3, grp_fu_1750_p3, grp_fu_1774_p3, grp_fu_1798_p3, grp_fu_1822_p3, grp_fu_1846_p3, grp_fu_1870_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            imag_output_d1 <= grp_fu_1870_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            imag_output_d1 <= grp_fu_1846_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            imag_output_d1 <= grp_fu_1822_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            imag_output_d1 <= grp_fu_1798_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            imag_output_d1 <= grp_fu_1774_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imag_output_d1 <= grp_fu_1750_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            imag_output_d1 <= grp_fu_1726_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            imag_output_d1 <= grp_fu_1702_p3(39 downto 8);
        else 
            imag_output_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    imag_output_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, icmp_ln265_reg_2320, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            imag_output_we0 <= ap_const_logic_1;
        else 
            imag_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    imag_output_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, icmp_ln265_reg_2320, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            imag_output_we1 <= ap_const_logic_1;
        else 
            imag_output_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_cast_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_100),64));
    lshr_ln_fu_705_p4 <= ap_sig_allocacmp_i_4(11 downto 4);

    matched_I_12_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, zext_ln265_fu_727_p1, ap_block_pp0_stage1, zext_ln265_2_fu_749_p1, ap_block_pp0_stage2, zext_ln265_4_fu_807_p1, ap_block_pp0_stage3, zext_ln265_6_fu_865_p1, ap_block_pp0_stage4, zext_ln265_8_fu_923_p1, ap_block_pp0_stage5, zext_ln265_10_fu_981_p1, ap_block_pp0_stage6, zext_ln265_13_fu_1112_p1, ap_block_pp0_stage7, zext_ln265_15_fu_1232_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                matched_I_12_address0 <= zext_ln265_15_fu_1232_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                matched_I_12_address0 <= zext_ln265_13_fu_1112_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                matched_I_12_address0 <= zext_ln265_10_fu_981_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                matched_I_12_address0 <= zext_ln265_8_fu_923_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_I_12_address0 <= zext_ln265_6_fu_865_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_I_12_address0 <= zext_ln265_4_fu_807_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_I_12_address0 <= zext_ln265_2_fu_749_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_I_12_address0 <= zext_ln265_fu_727_p1(8 - 1 downto 0);
            else 
                matched_I_12_address0 <= "XXXXXXXX";
            end if;
        else 
            matched_I_12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    matched_I_12_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln264_fu_715_p1, ap_block_pp0_stage0, zext_ln265_1_fu_738_p1, ap_block_pp0_stage1, zext_ln265_3_fu_796_p1, ap_block_pp0_stage2, zext_ln265_5_fu_854_p1, ap_block_pp0_stage3, zext_ln265_7_fu_912_p1, ap_block_pp0_stage4, zext_ln265_9_fu_970_p1, ap_block_pp0_stage5, ap_block_pp0_stage6, zext_ln265_11_fu_1101_p1, ap_block_pp0_stage7, zext_ln265_14_fu_1221_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                matched_I_12_address1 <= zext_ln265_14_fu_1221_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                matched_I_12_address1 <= zext_ln265_11_fu_1101_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                matched_I_12_address1 <= zext_ln265_9_fu_970_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                matched_I_12_address1 <= zext_ln265_7_fu_912_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_I_12_address1 <= zext_ln265_5_fu_854_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_I_12_address1 <= zext_ln265_3_fu_796_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_I_12_address1 <= zext_ln265_1_fu_738_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_I_12_address1 <= zext_ln264_fu_715_p1(8 - 1 downto 0);
            else 
                matched_I_12_address1 <= "XXXXXXXX";
            end if;
        else 
            matched_I_12_address1 <= "XXXXXXXX";
        end if; 
    end process;


    matched_I_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_I_12_ce0 <= ap_const_logic_1;
        else 
            matched_I_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matched_I_12_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_I_12_ce1 <= ap_const_logic_1;
        else 
            matched_I_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matched_Q_12_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, zext_ln265_fu_727_p1, ap_block_pp0_stage1, zext_ln265_2_fu_749_p1, ap_block_pp0_stage2, zext_ln265_4_fu_807_p1, ap_block_pp0_stage3, zext_ln265_6_fu_865_p1, ap_block_pp0_stage4, zext_ln265_8_fu_923_p1, ap_block_pp0_stage5, zext_ln265_10_fu_981_p1, ap_block_pp0_stage6, zext_ln265_13_fu_1112_p1, ap_block_pp0_stage7, zext_ln265_15_fu_1232_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                matched_Q_12_address0 <= zext_ln265_15_fu_1232_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                matched_Q_12_address0 <= zext_ln265_13_fu_1112_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                matched_Q_12_address0 <= zext_ln265_10_fu_981_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                matched_Q_12_address0 <= zext_ln265_8_fu_923_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_Q_12_address0 <= zext_ln265_6_fu_865_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_Q_12_address0 <= zext_ln265_4_fu_807_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_Q_12_address0 <= zext_ln265_2_fu_749_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_Q_12_address0 <= zext_ln265_fu_727_p1(8 - 1 downto 0);
            else 
                matched_Q_12_address0 <= "XXXXXXXX";
            end if;
        else 
            matched_Q_12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    matched_Q_12_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, zext_ln264_fu_715_p1, ap_block_pp0_stage0, zext_ln265_1_fu_738_p1, ap_block_pp0_stage1, zext_ln265_3_fu_796_p1, ap_block_pp0_stage2, zext_ln265_5_fu_854_p1, ap_block_pp0_stage3, zext_ln265_7_fu_912_p1, ap_block_pp0_stage4, zext_ln265_9_fu_970_p1, ap_block_pp0_stage5, ap_block_pp0_stage6, zext_ln265_11_fu_1101_p1, ap_block_pp0_stage7, zext_ln265_14_fu_1221_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                matched_Q_12_address1 <= zext_ln265_14_fu_1221_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                matched_Q_12_address1 <= zext_ln265_11_fu_1101_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                matched_Q_12_address1 <= zext_ln265_9_fu_970_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                matched_Q_12_address1 <= zext_ln265_7_fu_912_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_Q_12_address1 <= zext_ln265_5_fu_854_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_Q_12_address1 <= zext_ln265_3_fu_796_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_Q_12_address1 <= zext_ln265_1_fu_738_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_Q_12_address1 <= zext_ln264_fu_715_p1(8 - 1 downto 0);
            else 
                matched_Q_12_address1 <= "XXXXXXXX";
            end if;
        else 
            matched_Q_12_address1 <= "XXXXXXXX";
        end if; 
    end process;


    matched_Q_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_Q_12_ce0 <= ap_const_logic_1;
        else 
            matched_Q_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matched_Q_12_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_Q_12_ce1 <= ap_const_logic_1;
        else 
            matched_Q_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln265_10_fu_1537_p2 <= (j_1_reg_2253 or ap_const_lv8_B);
    or_ln265_11_fu_1084_p2 <= (j_fu_100 or ap_const_lv8_C);
    or_ln265_12_fu_1593_p2 <= (j_1_reg_2253 or ap_const_lv8_D);
    or_ln265_13_fu_1624_p2 <= (j_1_reg_2253 or ap_const_lv8_E);
    or_ln265_14_fu_1655_p2 <= (j_1_reg_2253 or ap_const_lv8_F);
    or_ln265_1_fu_1118_p2 <= (j_1_reg_2253 or ap_const_lv8_2);
    or_ln265_2_fu_1149_p2 <= (j_1_reg_2253 or ap_const_lv8_3);
    or_ln265_3_fu_1248_p2 <= (j_1_reg_2253 or ap_const_lv8_4);
    or_ln265_4_fu_1279_p2 <= (j_1_reg_2253 or ap_const_lv8_5);
    or_ln265_5_fu_1346_p2 <= (j_1_reg_2253 or ap_const_lv8_6);
    or_ln265_6_fu_1377_p2 <= (j_1_reg_2253 or ap_const_lv8_7);
    or_ln265_7_fu_1444_p2 <= (j_1_reg_2253 or ap_const_lv8_8);
    or_ln265_8_fu_1475_p2 <= (j_1_reg_2253 or ap_const_lv8_9);
    or_ln265_9_fu_1506_p2 <= (j_1_reg_2253 or ap_const_lv8_A);
    or_ln265_fu_1016_p2 <= (j_fu_100 or ap_const_lv8_1);

    real_output_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, zext_ln269_fu_1022_p1, ap_block_pp0_stage7, zext_ln269_2_fu_1154_p1, zext_ln269_4_fu_1284_p1, zext_ln269_6_fu_1382_p1, zext_ln269_8_fu_1480_p1, zext_ln269_10_fu_1542_p1, zext_ln269_11_fu_1598_p1, zext_ln269_13_fu_1660_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            real_output_address0 <= zext_ln269_13_fu_1660_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            real_output_address0 <= zext_ln269_11_fu_1598_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            real_output_address0 <= zext_ln269_10_fu_1542_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            real_output_address0 <= zext_ln269_8_fu_1480_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            real_output_address0 <= zext_ln269_6_fu_1382_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_output_address0 <= zext_ln269_4_fu_1284_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            real_output_address0 <= zext_ln269_2_fu_1154_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            real_output_address0 <= zext_ln269_fu_1022_p1(8 - 1 downto 0);
        else 
            real_output_address0 <= "XXXXXXXX";
        end if; 
    end process;


    real_output_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, j_cast_fu_990_p1, ap_block_pp0_stage6, zext_ln269_1_fu_1123_p1, ap_block_pp0_stage7, zext_ln269_3_fu_1253_p1, zext_ln269_5_fu_1351_p1, zext_ln269_7_fu_1449_p1, zext_ln269_9_fu_1511_p1, zext_ln265_12_fu_1568_p1, zext_ln269_12_fu_1629_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            real_output_address1 <= zext_ln269_12_fu_1629_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            real_output_address1 <= zext_ln265_12_fu_1568_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            real_output_address1 <= zext_ln269_9_fu_1511_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            real_output_address1 <= zext_ln269_7_fu_1449_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            real_output_address1 <= zext_ln269_5_fu_1351_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_output_address1 <= zext_ln269_3_fu_1253_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            real_output_address1 <= zext_ln269_1_fu_1123_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            real_output_address1 <= j_cast_fu_990_p1(8 - 1 downto 0);
        else 
            real_output_address1 <= "XXXXXXXX";
        end if; 
    end process;


    real_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            real_output_ce0 <= ap_const_logic_1;
        else 
            real_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_output_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            real_output_ce1 <= ap_const_logic_1;
        else 
            real_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    real_output_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, grp_fu_1708_p3, grp_fu_1732_p3, grp_fu_1756_p3, grp_fu_1780_p3, grp_fu_1804_p3, grp_fu_1828_p3, grp_fu_1852_p3, grp_fu_1876_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            real_output_d0 <= grp_fu_1876_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            real_output_d0 <= grp_fu_1852_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            real_output_d0 <= grp_fu_1828_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            real_output_d0 <= grp_fu_1804_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            real_output_d0 <= grp_fu_1780_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_output_d0 <= grp_fu_1756_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            real_output_d0 <= grp_fu_1732_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            real_output_d0 <= grp_fu_1708_p3(39 downto 8);
        else 
            real_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    real_output_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, grp_fu_1696_p3, grp_fu_1720_p3, grp_fu_1744_p3, grp_fu_1768_p3, grp_fu_1792_p3, grp_fu_1816_p3, grp_fu_1840_p3, grp_fu_1864_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            real_output_d1 <= grp_fu_1864_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            real_output_d1 <= grp_fu_1840_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            real_output_d1 <= grp_fu_1816_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            real_output_d1 <= grp_fu_1792_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            real_output_d1 <= grp_fu_1768_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_output_d1 <= grp_fu_1744_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            real_output_d1 <= grp_fu_1720_p3(39 downto 8);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            real_output_d1 <= grp_fu_1696_p3(39 downto 8);
        else 
            real_output_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    real_output_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, icmp_ln265_reg_2320, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            real_output_we0 <= ap_const_logic_1;
        else 
            real_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_output_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, icmp_ln265_reg_2320, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln265_reg_2320 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            real_output_we1 <= ap_const_logic_1;
        else 
            real_output_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln269_10_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_11_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_12_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_13_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_14_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_15_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_16_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_17_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_18_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_19_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_1_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_20_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_21_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_22_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_23_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_24_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_25_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_26_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_27_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_28_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_29_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_2_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln269_2),40));

        sext_ln269_30_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_31_fu_1412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_32_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_33_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_3_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_4_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_5_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_6_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_668),40));

        sext_ln269_7_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_672),40));

        sext_ln269_8_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_676),40));

        sext_ln269_9_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_680),40));

        sext_ln269_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln269),40));

    zext_ln264_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_705_p4),64));
    zext_ln265_10_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_10_fu_976_p2),64));
    zext_ln265_11_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_11_fu_1096_p2),64));
    zext_ln265_12_fu_1568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_11_reg_2315),64));
    zext_ln265_13_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_12_fu_1107_p2),64));
    zext_ln265_14_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_13_fu_1216_p2),64));
    zext_ln265_15_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_14_fu_1227_p2),64));
    zext_ln265_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_1_fu_733_p2),64));
    zext_ln265_2_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_2_fu_744_p2),64));
    zext_ln265_3_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_3_fu_791_p2),64));
    zext_ln265_4_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_4_fu_802_p2),64));
    zext_ln265_5_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_5_fu_849_p2),64));
    zext_ln265_6_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_6_fu_860_p2),64));
    zext_ln265_7_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_7_fu_907_p2),64));
    zext_ln265_8_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_8_fu_918_p2),64));
    zext_ln265_9_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_9_fu_965_p2),64));
    zext_ln265_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_fu_721_p2),64));
    zext_ln269_10_fu_1542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_10_fu_1537_p2),64));
    zext_ln269_11_fu_1598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_12_fu_1593_p2),64));
    zext_ln269_12_fu_1629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_13_fu_1624_p2),64));
    zext_ln269_13_fu_1660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_14_fu_1655_p2),64));
    zext_ln269_1_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_1_fu_1118_p2),64));
    zext_ln269_2_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_2_fu_1149_p2),64));
    zext_ln269_3_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_3_fu_1248_p2),64));
    zext_ln269_4_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_4_fu_1279_p2),64));
    zext_ln269_5_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_5_fu_1346_p2),64));
    zext_ln269_6_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_6_fu_1377_p2),64));
    zext_ln269_7_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_7_fu_1444_p2),64));
    zext_ln269_8_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_8_fu_1475_p2),64));
    zext_ln269_9_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_9_fu_1506_p2),64));
    zext_ln269_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln265_fu_1016_p2),64));
end behav;
