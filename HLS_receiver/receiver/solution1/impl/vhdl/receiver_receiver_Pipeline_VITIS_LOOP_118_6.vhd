-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_118_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filt_2_I_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_ce0 : OUT STD_LOGIC;
    filt_2_I_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_V_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_2_ce0 : OUT STD_LOGIC;
    filt_2_I_V_2_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_V_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_4_ce0 : OUT STD_LOGIC;
    filt_2_I_V_4_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_V_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_6_ce0 : OUT STD_LOGIC;
    filt_2_I_V_6_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_1_ce0 : OUT STD_LOGIC;
    filt_2_I_V_1_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_V_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_3_ce0 : OUT STD_LOGIC;
    filt_2_I_V_3_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_V_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_5_ce0 : OUT STD_LOGIC;
    filt_2_I_V_5_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_V_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_I_V_7_ce0 : OUT STD_LOGIC;
    filt_2_I_V_7_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_3_I_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_3_I_V_ce0 : OUT STD_LOGIC;
    filt_3_I_V_we0 : OUT STD_LOGIC;
    filt_3_I_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_2_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_2_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_4_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_4_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_6_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_6_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_1_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_1_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_3_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_3_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_5_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_5_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_V_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    filt_2_Q_V_7_ce0 : OUT STD_LOGIC;
    filt_2_Q_V_7_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_3_Q_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_3_Q_V_ce0 : OUT STD_LOGIC;
    filt_3_Q_V_we0 : OUT STD_LOGIC;
    filt_3_Q_V_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of receiver_receiver_Pipeline_VITIS_LOOP_118_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln118_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_reg_481 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_fu_370_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_reg_571 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_390_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_576 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln6_reg_581 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_419_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_reg_586 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_439_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_reg_591 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln813_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln119_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_fu_74 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln118_fu_356_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln813_2_fu_326_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln813_fu_367_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component receiver_mux_73_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        din4 : IN STD_LOGIC_VECTOR (17 downto 0);
        din5 : IN STD_LOGIC_VECTOR (17 downto 0);
        din6 : IN STD_LOGIC_VECTOR (17 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component receiver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_73_18_1_1_U137 : component receiver_mux_73_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_V_q0,
        din1 => ap_const_lv18_0,
        din2 => filt_2_I_V_2_q0,
        din3 => ap_const_lv18_0,
        din4 => filt_2_I_V_4_q0,
        din5 => ap_const_lv18_0,
        din6 => filt_2_I_V_6_q0,
        din7 => trunc_ln813_fu_367_p1,
        dout => tmp_fu_370_p9);

    mux_73_18_1_1_U138 : component receiver_mux_73_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_V_1_q0,
        din1 => ap_const_lv18_0,
        din2 => filt_2_I_V_3_q0,
        din3 => ap_const_lv18_0,
        din4 => filt_2_I_V_5_q0,
        din5 => ap_const_lv18_0,
        din6 => filt_2_I_V_7_q0,
        din7 => trunc_ln813_fu_367_p1,
        dout => tmp_1_fu_390_p9);

    mux_73_18_1_1_U139 : component receiver_mux_73_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_V_q0,
        din1 => ap_const_lv18_0,
        din2 => filt_2_Q_V_2_q0,
        din3 => ap_const_lv18_0,
        din4 => filt_2_Q_V_4_q0,
        din5 => ap_const_lv18_0,
        din6 => filt_2_Q_V_6_q0,
        din7 => trunc_ln813_fu_367_p1,
        dout => tmp_2_fu_419_p9);

    mux_73_18_1_1_U140 : component receiver_mux_73_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_V_1_q0,
        din1 => ap_const_lv18_0,
        din2 => filt_2_Q_V_3_q0,
        din3 => ap_const_lv18_0,
        din4 => filt_2_Q_V_5_q0,
        din5 => ap_const_lv18_0,
        din6 => filt_2_Q_V_7_q0,
        din7 => trunc_ln813_fu_367_p1,
        dout => tmp_3_fu_439_p9);

    flow_control_loop_pipe_sequential_init_U : component receiver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_5_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln118_fu_320_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_5_fu_74 <= add_ln118_fu_356_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_5_fu_74 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_reg_481 <= ap_sig_allocacmp_i;
                lshr_ln6_reg_581 <= i_reg_481(5 downto 1);
                tmp_1_reg_576 <= tmp_1_fu_390_p9;
                tmp_2_reg_586 <= tmp_2_fu_419_p9;
                tmp_3_reg_591 <= tmp_3_fu_439_p9;
                tmp_reg_571 <= tmp_fu_370_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln118_fu_356_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv6_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln118_fu_320_p2)
    begin
        if (((icmp_ln118_fu_320_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_5_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i <= i_5_fu_74;
        end if; 
    end process;

    filt_2_I_V_1_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_1_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_I_V_2_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_2_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_I_V_3_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_3_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_I_V_4_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_4_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_I_V_5_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_5_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_I_V_6_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_6_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_I_V_7_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_7_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_I_V_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_I_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_I_V_ce0 <= ap_const_logic_1;
        else 
            filt_2_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_1_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_1_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_2_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_2_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_3_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_3_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_4_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_4_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_5_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_5_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_6_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_6_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_7_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_7_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_2_Q_V_address0 <= zext_ln813_fu_336_p1(3 - 1 downto 0);

    filt_2_Q_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_2_Q_V_ce0 <= ap_const_logic_1;
        else 
            filt_2_Q_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_3_I_V_address0 <= zext_ln119_fu_464_p1(5 - 1 downto 0);

    filt_3_I_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            filt_3_I_V_ce0 <= ap_const_logic_1;
        else 
            filt_3_I_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_3_I_V_d0 <= std_logic_vector(unsigned(tmp_1_reg_576) + unsigned(tmp_reg_571));

    filt_3_I_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            filt_3_I_V_we0 <= ap_const_logic_1;
        else 
            filt_3_I_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_3_Q_V_address0 <= zext_ln119_fu_464_p1(5 - 1 downto 0);

    filt_3_Q_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            filt_3_Q_V_ce0 <= ap_const_logic_1;
        else 
            filt_3_Q_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_3_Q_V_d0 <= std_logic_vector(unsigned(tmp_3_reg_591) + unsigned(tmp_2_reg_586));

    filt_3_Q_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            filt_3_Q_V_we0 <= ap_const_logic_1;
        else 
            filt_3_Q_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln118_fu_320_p2 <= "1" when (unsigned(ap_sig_allocacmp_i) < unsigned(ap_const_lv6_30)) else "0";
    lshr_ln813_2_fu_326_p4 <= ap_sig_allocacmp_i(5 downto 3);
    trunc_ln813_fu_367_p1 <= i_reg_481(3 - 1 downto 0);
    zext_ln119_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_reg_581),64));
    zext_ln813_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln813_2_fu_326_p4),64));
end behav;
