-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_118_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filt_2_I_0_0_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_02_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_04_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_0_2_09_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_2_010_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_2_011_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_0_4_015_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_4_016_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_4_017_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_0_6_021_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_6_022_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_6_023_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_0_1_06_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_1_07_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_1_08_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_0_3_012_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_3_013_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_3_014_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_0_5_018_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_5_019_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_5_020_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_0_7_024_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_1_7_025_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_I_2_7_026_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_3_I_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_3_I_ce0 : OUT STD_LOGIC;
    filt_3_I_we0 : OUT STD_LOGIC;
    filt_3_I_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_0_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_028_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_030_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_2_035_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_2_036_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_2_037_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_4_041_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_4_042_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_4_043_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_6_047_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_6_048_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_6_049_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_1_032_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_1_033_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_1_034_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_3_038_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_3_039_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_3_040_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_5_044_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_5_045_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_5_046_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_0_7_050_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_1_7_051_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_2_Q_2_7_052_reload : IN STD_LOGIC_VECTOR (17 downto 0);
    filt_3_Q_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_3_Q_ce0 : OUT STD_LOGIC;
    filt_3_Q_we0 : OUT STD_LOGIC;
    filt_3_Q_d0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of receiver_receiver_Pipeline_VITIS_LOOP_118_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln118_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tmp_fu_536_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_reg_806 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_fu_604_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_811 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln5_reg_816 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_682_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_reg_821 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_750_p9 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_reg_826 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln119_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_5_fu_142 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln118_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_488_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_500_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_512_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_524_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_488_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_11_fu_500_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_12_fu_512_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_13_fu_524_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_fu_474_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_556_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_568_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_fu_580_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_592_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_556_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_fu_568_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_16_fu_580_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_fu_592_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_18_fu_634_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_fu_646_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_658_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_fu_670_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_634_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_646_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_658_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_21_fu_670_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_22_fu_702_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_714_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_24_fu_726_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_738_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_fu_702_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_23_fu_714_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_fu_726_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_25_fu_738_p5 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component receiver_mux_3_2_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component receiver_mux_7_3_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        din4 : IN STD_LOGIC_VECTOR (17 downto 0);
        din5 : IN STD_LOGIC_VECTOR (17 downto 0);
        din6 : IN STD_LOGIC_VECTOR (17 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component receiver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_3_2_18_1_1_U141 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_0_reload,
        din1 => filt_2_I_1_02_reload,
        din2 => filt_2_I_2_04_reload,
        din3 => tmp_s_fu_488_p4,
        dout => tmp_s_fu_488_p5);

    mux_3_2_18_1_1_U142 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_2_09_reload,
        din1 => filt_2_I_1_2_010_reload,
        din2 => filt_2_I_2_2_011_reload,
        din3 => tmp_11_fu_500_p4,
        dout => tmp_11_fu_500_p5);

    mux_3_2_18_1_1_U143 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_4_015_reload,
        din1 => filt_2_I_1_4_016_reload,
        din2 => filt_2_I_2_4_017_reload,
        din3 => tmp_12_fu_512_p4,
        dout => tmp_12_fu_512_p5);

    mux_3_2_18_1_1_U144 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_6_021_reload,
        din1 => filt_2_I_1_6_022_reload,
        din2 => filt_2_I_2_6_023_reload,
        din3 => tmp_13_fu_524_p4,
        dout => tmp_13_fu_524_p5);

    mux_7_3_18_1_1_U145 : component receiver_mux_7_3_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_s_fu_488_p5,
        din1 => ap_const_lv18_0,
        din2 => tmp_11_fu_500_p5,
        din3 => ap_const_lv18_0,
        din4 => tmp_12_fu_512_p5,
        din5 => ap_const_lv18_0,
        din6 => tmp_13_fu_524_p5,
        din7 => empty_fu_474_p1,
        dout => tmp_fu_536_p9);

    mux_3_2_18_1_1_U146 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_1_06_reload,
        din1 => filt_2_I_1_1_07_reload,
        din2 => filt_2_I_2_1_08_reload,
        din3 => tmp_14_fu_556_p4,
        dout => tmp_14_fu_556_p5);

    mux_3_2_18_1_1_U147 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_3_012_reload,
        din1 => filt_2_I_1_3_013_reload,
        din2 => filt_2_I_2_3_014_reload,
        din3 => tmp_15_fu_568_p4,
        dout => tmp_15_fu_568_p5);

    mux_3_2_18_1_1_U148 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_5_018_reload,
        din1 => filt_2_I_1_5_019_reload,
        din2 => filt_2_I_2_5_020_reload,
        din3 => tmp_16_fu_580_p4,
        dout => tmp_16_fu_580_p5);

    mux_3_2_18_1_1_U149 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_I_0_7_024_reload,
        din1 => filt_2_I_1_7_025_reload,
        din2 => filt_2_I_2_7_026_reload,
        din3 => tmp_17_fu_592_p4,
        dout => tmp_17_fu_592_p5);

    mux_7_3_18_1_1_U150 : component receiver_mux_7_3_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_14_fu_556_p5,
        din1 => ap_const_lv18_0,
        din2 => tmp_15_fu_568_p5,
        din3 => ap_const_lv18_0,
        din4 => tmp_16_fu_580_p5,
        din5 => ap_const_lv18_0,
        din6 => tmp_17_fu_592_p5,
        din7 => empty_fu_474_p1,
        dout => tmp_1_fu_604_p9);

    mux_3_2_18_1_1_U151 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_0_reload,
        din1 => filt_2_Q_1_028_reload,
        din2 => filt_2_Q_2_030_reload,
        din3 => tmp_18_fu_634_p4,
        dout => tmp_18_fu_634_p5);

    mux_3_2_18_1_1_U152 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_2_035_reload,
        din1 => filt_2_Q_1_2_036_reload,
        din2 => filt_2_Q_2_2_037_reload,
        din3 => tmp_19_fu_646_p4,
        dout => tmp_19_fu_646_p5);

    mux_3_2_18_1_1_U153 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_4_041_reload,
        din1 => filt_2_Q_1_4_042_reload,
        din2 => filt_2_Q_2_4_043_reload,
        din3 => tmp_20_fu_658_p4,
        dout => tmp_20_fu_658_p5);

    mux_3_2_18_1_1_U154 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_6_047_reload,
        din1 => filt_2_Q_1_6_048_reload,
        din2 => filt_2_Q_2_6_049_reload,
        din3 => tmp_21_fu_670_p4,
        dout => tmp_21_fu_670_p5);

    mux_7_3_18_1_1_U155 : component receiver_mux_7_3_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_18_fu_634_p5,
        din1 => ap_const_lv18_0,
        din2 => tmp_19_fu_646_p5,
        din3 => ap_const_lv18_0,
        din4 => tmp_20_fu_658_p5,
        din5 => ap_const_lv18_0,
        din6 => tmp_21_fu_670_p5,
        din7 => empty_fu_474_p1,
        dout => tmp_2_fu_682_p9);

    mux_3_2_18_1_1_U156 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_1_032_reload,
        din1 => filt_2_Q_1_1_033_reload,
        din2 => filt_2_Q_2_1_034_reload,
        din3 => tmp_22_fu_702_p4,
        dout => tmp_22_fu_702_p5);

    mux_3_2_18_1_1_U157 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_3_038_reload,
        din1 => filt_2_Q_1_3_039_reload,
        din2 => filt_2_Q_2_3_040_reload,
        din3 => tmp_23_fu_714_p4,
        dout => tmp_23_fu_714_p5);

    mux_3_2_18_1_1_U158 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_5_044_reload,
        din1 => filt_2_Q_1_5_045_reload,
        din2 => filt_2_Q_2_5_046_reload,
        din3 => tmp_24_fu_726_p4,
        dout => tmp_24_fu_726_p5);

    mux_3_2_18_1_1_U159 : component receiver_mux_3_2_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 2,
        dout_WIDTH => 18)
    port map (
        din0 => filt_2_Q_0_7_050_reload,
        din1 => filt_2_Q_1_7_051_reload,
        din2 => filt_2_Q_2_7_052_reload,
        din3 => tmp_25_fu_738_p4,
        dout => tmp_25_fu_738_p5);

    mux_7_3_18_1_1_U160 : component receiver_mux_7_3_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        din4_WIDTH => 18,
        din5_WIDTH => 18,
        din6_WIDTH => 18,
        din7_WIDTH => 3,
        dout_WIDTH => 18)
    port map (
        din0 => tmp_22_fu_702_p5,
        din1 => ap_const_lv18_0,
        din2 => tmp_23_fu_714_p5,
        din3 => ap_const_lv18_0,
        din4 => tmp_24_fu_726_p5,
        din5 => ap_const_lv18_0,
        din6 => tmp_25_fu_738_p5,
        din7 => empty_fu_474_p1,
        dout => tmp_3_fu_750_p9);

    flow_control_loop_pipe_sequential_init_U : component receiver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_5_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln118_fu_468_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_5_fu_142 <= add_ln118_fu_770_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_5_fu_142 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln118_fu_468_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln5_reg_816 <= ap_sig_allocacmp_i(4 downto 1);
                tmp_1_reg_811 <= tmp_1_fu_604_p9;
                tmp_2_reg_821 <= tmp_2_fu_682_p9;
                tmp_3_reg_826 <= tmp_3_fu_750_p9;
                tmp_reg_806 <= tmp_fu_536_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln118_fu_770_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv5_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln118_fu_468_p2)
    begin
        if (((icmp_ln118_fu_468_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_5_fu_142, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i <= i_5_fu_142;
        end if; 
    end process;

    empty_fu_474_p1 <= ap_sig_allocacmp_i(3 - 1 downto 0);
    filt_3_I_address0 <= zext_ln119_fu_786_p1(4 - 1 downto 0);

    filt_3_I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_3_I_ce0 <= ap_const_logic_1;
        else 
            filt_3_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_3_I_d0 <= std_logic_vector(unsigned(tmp_1_reg_811) + unsigned(tmp_reg_806));

    filt_3_I_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_3_I_we0 <= ap_const_logic_1;
        else 
            filt_3_I_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_3_Q_address0 <= zext_ln119_fu_786_p1(4 - 1 downto 0);

    filt_3_Q_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_3_Q_ce0 <= ap_const_logic_1;
        else 
            filt_3_Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_3_Q_d0 <= std_logic_vector(unsigned(tmp_3_reg_826) + unsigned(tmp_2_reg_821));

    filt_3_Q_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_3_Q_we0 <= ap_const_logic_1;
        else 
            filt_3_Q_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln118_fu_468_p2 <= "1" when (unsigned(ap_sig_allocacmp_i) < unsigned(ap_const_lv5_18)) else "0";
    tmp_11_fu_500_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_12_fu_512_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_13_fu_524_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_14_fu_556_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_15_fu_568_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_16_fu_580_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_17_fu_592_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_18_fu_634_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_19_fu_646_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_20_fu_658_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_21_fu_670_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_22_fu_702_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_23_fu_714_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_24_fu_726_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_25_fu_738_p4 <= ap_sig_allocacmp_i(4 downto 3);
    tmp_s_fu_488_p4 <= ap_sig_allocacmp_i(4 downto 3);
    zext_ln119_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_reg_816),64));
end behav;
