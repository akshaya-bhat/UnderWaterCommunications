// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_75_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filt_I_address0,
        filt_I_ce0,
        filt_I_we0,
        filt_I_d0,
        filt_Q_address0,
        filt_Q_ce0,
        filt_Q_we0,
        filt_Q_d0,
        filt_I_1_address0,
        filt_I_1_ce0,
        filt_I_1_we0,
        filt_I_1_d0,
        filt_Q_1_address0,
        filt_Q_1_ce0,
        filt_Q_1_we0,
        filt_Q_1_d0,
        filt_I_2_address0,
        filt_I_2_ce0,
        filt_I_2_we0,
        filt_I_2_d0,
        filt_Q_2_address0,
        filt_Q_2_ce0,
        filt_Q_2_we0,
        filt_Q_2_d0,
        filt_I_3_address0,
        filt_I_3_ce0,
        filt_I_3_we0,
        filt_I_3_d0,
        filt_Q_3_address0,
        filt_Q_3_ce0,
        filt_Q_3_we0,
        filt_Q_3_d0,
        filt_I_4_address0,
        filt_I_4_ce0,
        filt_I_4_we0,
        filt_I_4_d0,
        filt_Q_4_address0,
        filt_Q_4_ce0,
        filt_Q_4_we0,
        filt_Q_4_d0,
        filt_I_5_address0,
        filt_I_5_ce0,
        filt_I_5_we0,
        filt_I_5_d0,
        filt_Q_5_address0,
        filt_Q_5_ce0,
        filt_Q_5_we0,
        filt_Q_5_d0,
        filt_I_6_address0,
        filt_I_6_ce0,
        filt_I_6_we0,
        filt_I_6_d0,
        filt_Q_6_address0,
        filt_Q_6_ce0,
        filt_Q_6_we0,
        filt_Q_6_d0,
        filt_I_7_address0,
        filt_I_7_ce0,
        filt_I_7_we0,
        filt_I_7_d0,
        filt_Q_7_address0,
        filt_Q_7_ce0,
        filt_Q_7_we0,
        filt_Q_7_d0,
        delay_line_I_0_address0,
        delay_line_I_0_ce0,
        delay_line_I_0_q0,
        delay_line_Q_0_address0,
        delay_line_Q_0_ce0,
        delay_line_Q_0_q0,
        delay_line_I_1_address0,
        delay_line_I_1_ce0,
        delay_line_I_1_q0,
        delay_line_I_2_address0,
        delay_line_I_2_ce0,
        delay_line_I_2_q0,
        delay_line_I_3_address0,
        delay_line_I_3_ce0,
        delay_line_I_3_q0,
        delay_line_I_4_address0,
        delay_line_I_4_ce0,
        delay_line_I_4_q0,
        delay_line_I_5_address0,
        delay_line_I_5_ce0,
        delay_line_I_5_q0,
        delay_line_I_6_address0,
        delay_line_I_6_ce0,
        delay_line_I_6_q0,
        delay_line_I_7_address0,
        delay_line_I_7_ce0,
        delay_line_I_7_q0,
        delay_line_Q_1_address0,
        delay_line_Q_1_ce0,
        delay_line_Q_1_q0,
        delay_line_Q_2_address0,
        delay_line_Q_2_ce0,
        delay_line_Q_2_q0,
        delay_line_Q_3_address0,
        delay_line_Q_3_ce0,
        delay_line_Q_3_q0,
        delay_line_Q_4_address0,
        delay_line_Q_4_ce0,
        delay_line_Q_4_q0,
        delay_line_Q_5_address0,
        delay_line_Q_5_ce0,
        delay_line_Q_5_q0,
        delay_line_Q_6_address0,
        delay_line_Q_6_ce0,
        delay_line_Q_6_q0,
        delay_line_Q_7_address0,
        delay_line_Q_7_ce0,
        delay_line_Q_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] filt_I_address0;
output   filt_I_ce0;
output   filt_I_we0;
output  [16:0] filt_I_d0;
output  [4:0] filt_Q_address0;
output   filt_Q_ce0;
output   filt_Q_we0;
output  [16:0] filt_Q_d0;
output  [4:0] filt_I_1_address0;
output   filt_I_1_ce0;
output   filt_I_1_we0;
output  [16:0] filt_I_1_d0;
output  [4:0] filt_Q_1_address0;
output   filt_Q_1_ce0;
output   filt_Q_1_we0;
output  [16:0] filt_Q_1_d0;
output  [4:0] filt_I_2_address0;
output   filt_I_2_ce0;
output   filt_I_2_we0;
output  [16:0] filt_I_2_d0;
output  [4:0] filt_Q_2_address0;
output   filt_Q_2_ce0;
output   filt_Q_2_we0;
output  [16:0] filt_Q_2_d0;
output  [4:0] filt_I_3_address0;
output   filt_I_3_ce0;
output   filt_I_3_we0;
output  [16:0] filt_I_3_d0;
output  [4:0] filt_Q_3_address0;
output   filt_Q_3_ce0;
output   filt_Q_3_we0;
output  [16:0] filt_Q_3_d0;
output  [4:0] filt_I_4_address0;
output   filt_I_4_ce0;
output   filt_I_4_we0;
output  [16:0] filt_I_4_d0;
output  [4:0] filt_Q_4_address0;
output   filt_Q_4_ce0;
output   filt_Q_4_we0;
output  [16:0] filt_Q_4_d0;
output  [4:0] filt_I_5_address0;
output   filt_I_5_ce0;
output   filt_I_5_we0;
output  [16:0] filt_I_5_d0;
output  [4:0] filt_Q_5_address0;
output   filt_Q_5_ce0;
output   filt_Q_5_we0;
output  [16:0] filt_Q_5_d0;
output  [4:0] filt_I_6_address0;
output   filt_I_6_ce0;
output   filt_I_6_we0;
output  [16:0] filt_I_6_d0;
output  [4:0] filt_Q_6_address0;
output   filt_Q_6_ce0;
output   filt_Q_6_we0;
output  [16:0] filt_Q_6_d0;
output  [4:0] filt_I_7_address0;
output   filt_I_7_ce0;
output   filt_I_7_we0;
output  [16:0] filt_I_7_d0;
output  [4:0] filt_Q_7_address0;
output   filt_Q_7_ce0;
output   filt_Q_7_we0;
output  [16:0] filt_Q_7_d0;
output  [4:0] delay_line_I_0_address0;
output   delay_line_I_0_ce0;
input  [17:0] delay_line_I_0_q0;
output  [4:0] delay_line_Q_0_address0;
output   delay_line_Q_0_ce0;
input  [17:0] delay_line_Q_0_q0;
output  [4:0] delay_line_I_1_address0;
output   delay_line_I_1_ce0;
input  [17:0] delay_line_I_1_q0;
output  [4:0] delay_line_I_2_address0;
output   delay_line_I_2_ce0;
input  [17:0] delay_line_I_2_q0;
output  [4:0] delay_line_I_3_address0;
output   delay_line_I_3_ce0;
input  [17:0] delay_line_I_3_q0;
output  [4:0] delay_line_I_4_address0;
output   delay_line_I_4_ce0;
input  [17:0] delay_line_I_4_q0;
output  [4:0] delay_line_I_5_address0;
output   delay_line_I_5_ce0;
input  [17:0] delay_line_I_5_q0;
output  [4:0] delay_line_I_6_address0;
output   delay_line_I_6_ce0;
input  [17:0] delay_line_I_6_q0;
output  [4:0] delay_line_I_7_address0;
output   delay_line_I_7_ce0;
input  [17:0] delay_line_I_7_q0;
output  [4:0] delay_line_Q_1_address0;
output   delay_line_Q_1_ce0;
input  [17:0] delay_line_Q_1_q0;
output  [4:0] delay_line_Q_2_address0;
output   delay_line_Q_2_ce0;
input  [17:0] delay_line_Q_2_q0;
output  [4:0] delay_line_Q_3_address0;
output   delay_line_Q_3_ce0;
input  [17:0] delay_line_Q_3_q0;
output  [4:0] delay_line_Q_4_address0;
output   delay_line_Q_4_ce0;
input  [17:0] delay_line_Q_4_q0;
output  [4:0] delay_line_Q_5_address0;
output   delay_line_Q_5_ce0;
input  [17:0] delay_line_Q_5_q0;
output  [4:0] delay_line_Q_6_address0;
output   delay_line_Q_6_ce0;
input  [17:0] delay_line_Q_6_q0;
output  [4:0] delay_line_Q_7_address0;
output   delay_line_Q_7_ce0;
input  [17:0] delay_line_Q_7_q0;

reg ap_idle;
reg filt_I_ce0;
reg filt_I_we0;
reg filt_Q_ce0;
reg filt_Q_we0;
reg filt_I_1_ce0;
reg filt_I_1_we0;
reg filt_Q_1_ce0;
reg filt_Q_1_we0;
reg filt_I_2_ce0;
reg filt_I_2_we0;
reg filt_Q_2_ce0;
reg filt_Q_2_we0;
reg filt_I_3_ce0;
reg filt_I_3_we0;
reg filt_Q_3_ce0;
reg filt_Q_3_we0;
reg filt_I_4_ce0;
reg filt_I_4_we0;
reg filt_Q_4_ce0;
reg filt_Q_4_we0;
reg filt_I_5_ce0;
reg filt_I_5_we0;
reg filt_Q_5_ce0;
reg filt_Q_5_we0;
reg filt_I_6_ce0;
reg filt_I_6_we0;
reg filt_Q_6_ce0;
reg filt_Q_6_we0;
reg filt_I_7_ce0;
reg filt_I_7_we0;
reg filt_Q_7_ce0;
reg filt_Q_7_we0;
reg delay_line_I_0_ce0;
reg delay_line_Q_0_ce0;
reg delay_line_I_1_ce0;
reg delay_line_I_2_ce0;
reg delay_line_I_3_ce0;
reg delay_line_I_4_ce0;
reg delay_line_I_5_ce0;
reg delay_line_I_6_ce0;
reg delay_line_I_7_ce0;
reg delay_line_Q_1_ce0;
reg delay_line_Q_2_ce0;
reg delay_line_Q_3_ce0;
reg delay_line_Q_4_ce0;
reg delay_line_Q_5_ce0;
reg delay_line_Q_6_ce0;
reg delay_line_Q_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln75_fu_684_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] h_address0;
reg    h_ce0;
wire   [14:0] h_q0;
wire   [7:0] h_address1;
reg    h_ce1;
wire   [14:0] h_q1;
wire   [7:0] h_address2;
reg    h_ce2;
wire   [14:0] h_q2;
wire   [7:0] h_address3;
reg    h_ce3;
wire   [14:0] h_q3;
wire   [7:0] h_address4;
reg    h_ce4;
wire   [14:0] h_q4;
wire   [7:0] h_address5;
reg    h_ce5;
wire   [14:0] h_q5;
wire   [7:0] h_address6;
reg    h_ce6;
wire   [14:0] h_q6;
wire   [7:0] h_address7;
reg    h_ce7;
wire   [14:0] h_q7;
wire   [63:0] zext_ln75_fu_658_p1;
reg   [63:0] zext_ln75_reg_1107;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] zext_ln75_reg_1107_pp0_iter1_reg;
reg   [63:0] zext_ln75_reg_1107_pp0_iter2_reg;
reg   [0:0] icmp_ln75_reg_1142;
reg   [0:0] icmp_ln75_reg_1142_pp0_iter1_reg;
reg   [0:0] icmp_ln75_reg_1142_pp0_iter2_reg;
reg  signed [17:0] delay_line_I_0_load_reg_1251;
reg   [14:0] h_load_reg_1256;
reg  signed [17:0] delay_line_Q_0_load_reg_1261;
reg  signed [17:0] delay_line_I_1_load_reg_1266;
reg   [14:0] h_load_1_reg_1271;
reg   [14:0] h_load_2_reg_1276;
reg   [14:0] h_load_3_reg_1281;
reg   [14:0] h_load_4_reg_1286;
reg   [14:0] h_load_5_reg_1291;
reg   [14:0] h_load_6_reg_1296;
reg  signed [17:0] delay_line_I_2_load_reg_1301;
reg  signed [17:0] delay_line_I_3_load_reg_1306;
reg  signed [17:0] delay_line_I_4_load_reg_1311;
reg  signed [17:0] delay_line_I_5_load_reg_1316;
reg  signed [17:0] delay_line_I_6_load_reg_1321;
reg  signed [17:0] delay_line_I_7_load_reg_1326;
reg   [14:0] h_load_7_reg_1331;
reg  signed [17:0] delay_line_Q_1_load_reg_1336;
reg  signed [17:0] delay_line_Q_2_load_reg_1341;
reg  signed [17:0] delay_line_Q_3_load_reg_1346;
reg  signed [17:0] delay_line_Q_4_load_reg_1351;
reg  signed [17:0] delay_line_Q_5_load_reg_1356;
reg  signed [17:0] delay_line_Q_6_load_reg_1361;
reg  signed [17:0] delay_line_Q_7_load_reg_1366;
reg   [16:0] trunc_ln_reg_1371;
reg   [16:0] trunc_ln1_reg_1376;
reg   [16:0] trunc_ln77_1_reg_1381;
reg   [16:0] trunc_ln77_2_reg_1386;
reg   [16:0] trunc_ln77_3_reg_1391;
reg   [16:0] trunc_ln77_4_reg_1396;
reg   [16:0] trunc_ln77_5_reg_1401;
reg   [16:0] trunc_ln77_6_reg_1406;
reg   [16:0] trunc_ln77_7_reg_1411;
reg   [16:0] trunc_ln78_1_reg_1416;
reg   [16:0] trunc_ln78_2_reg_1421;
reg   [16:0] trunc_ln78_3_reg_1426;
reg   [16:0] trunc_ln78_4_reg_1431;
reg   [16:0] trunc_ln78_5_reg_1436;
reg   [16:0] trunc_ln78_6_reg_1441;
reg   [16:0] trunc_ln78_7_reg_1446;
wire    ap_block_pp0_stage0;
wire   [63:0] i_2_cast_fu_643_p1;
wire   [63:0] zext_ln75_1_fu_690_p1;
wire   [63:0] zext_ln77_fu_701_p1;
wire   [63:0] zext_ln77_1_fu_712_p1;
wire   [63:0] zext_ln77_2_fu_723_p1;
wire   [63:0] zext_ln77_3_fu_734_p1;
wire   [63:0] zext_ln77_4_fu_745_p1;
wire   [63:0] zext_ln77_5_fu_756_p1;
reg   [7:0] i_2_fu_118;
wire   [7:0] add_ln75_fu_761_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i;
wire   [4:0] lshr_ln3_fu_648_p4;
wire   [7:0] or_ln75_fu_678_p2;
wire   [7:0] or_ln75_1_fu_695_p2;
wire   [7:0] or_ln75_2_fu_706_p2;
wire   [7:0] or_ln75_3_fu_717_p2;
wire   [7:0] or_ln75_4_fu_728_p2;
wire   [7:0] or_ln75_5_fu_739_p2;
wire   [7:0] or_ln75_6_fu_750_p2;
wire  signed [14:0] mul_ln77_fu_778_p0;
wire  signed [32:0] sext_ln77_1_fu_775_p1;
wire   [32:0] mul_ln77_fu_778_p2;
wire  signed [14:0] mul_ln78_fu_797_p1;
wire   [32:0] mul_ln78_fu_797_p2;
wire  signed [14:0] mul_ln77_1_fu_819_p0;
wire  signed [32:0] sext_ln77_3_fu_816_p1;
wire   [32:0] mul_ln77_1_fu_819_p2;
wire  signed [14:0] mul_ln77_2_fu_853_p1;
wire  signed [32:0] sext_ln77_4_fu_835_p1;
wire   [32:0] mul_ln77_2_fu_853_p2;
wire  signed [14:0] mul_ln77_3_fu_872_p1;
wire  signed [32:0] sext_ln77_5_fu_838_p1;
wire   [32:0] mul_ln77_3_fu_872_p2;
wire  signed [14:0] mul_ln77_4_fu_891_p1;
wire  signed [32:0] sext_ln77_6_fu_841_p1;
wire   [32:0] mul_ln77_4_fu_891_p2;
wire  signed [14:0] mul_ln77_5_fu_910_p1;
wire  signed [32:0] sext_ln77_7_fu_844_p1;
wire   [32:0] mul_ln77_5_fu_910_p2;
wire  signed [14:0] mul_ln77_6_fu_929_p1;
wire  signed [32:0] sext_ln77_8_fu_847_p1;
wire   [32:0] mul_ln77_6_fu_929_p2;
wire  signed [14:0] mul_ln77_7_fu_951_p0;
wire  signed [32:0] sext_ln77_15_fu_948_p1;
wire   [32:0] mul_ln77_7_fu_951_p2;
wire  signed [14:0] mul_ln78_1_fu_970_p1;
wire   [32:0] mul_ln78_1_fu_970_p2;
wire  signed [14:0] mul_ln78_2_fu_989_p1;
wire   [32:0] mul_ln78_2_fu_989_p2;
wire  signed [14:0] mul_ln78_3_fu_1008_p1;
wire   [32:0] mul_ln78_3_fu_1008_p2;
wire  signed [14:0] mul_ln78_4_fu_1027_p1;
wire   [32:0] mul_ln78_4_fu_1027_p2;
wire  signed [14:0] mul_ln78_5_fu_1046_p1;
wire   [32:0] mul_ln78_5_fu_1046_p2;
wire  signed [14:0] mul_ln78_6_fu_1065_p1;
wire   [32:0] mul_ln78_6_fu_1065_p2;
wire  signed [14:0] mul_ln78_7_fu_1084_p1;
wire   [32:0] mul_ln78_7_fu_1084_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_receiver_Pipeline_VITIS_LOOP_75_3_h_ROM_AUTO_1R #(
    .DataWidth( 15 ),
    .AddressRange( 193 ),
    .AddressWidth( 8 ))
h_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(h_address0),
    .ce0(h_ce0),
    .q0(h_q0),
    .address1(h_address1),
    .ce1(h_ce1),
    .q1(h_q1),
    .address2(h_address2),
    .ce2(h_ce2),
    .q2(h_q2),
    .address3(h_address3),
    .ce3(h_ce3),
    .q3(h_q3),
    .address4(h_address4),
    .ce4(h_ce4),
    .q4(h_q4),
    .address5(h_address5),
    .ce5(h_ce5),
    .q5(h_q5),
    .address6(h_address6),
    .ce6(h_ce6),
    .q6(h_q6),
    .address7(h_address7),
    .ce7(h_ce7),
    .q7(h_q7)
);

receiver_mul_15s_18s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_15s_18s_33_1_1_U20(
    .din0(mul_ln77_fu_778_p0),
    .din1(delay_line_I_0_load_reg_1251),
    .dout(mul_ln77_fu_778_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U21(
    .din0(delay_line_Q_0_load_reg_1261),
    .din1(mul_ln78_fu_797_p1),
    .dout(mul_ln78_fu_797_p2)
);

receiver_mul_15s_18s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_15s_18s_33_1_1_U22(
    .din0(mul_ln77_1_fu_819_p0),
    .din1(delay_line_I_1_load_reg_1266),
    .dout(mul_ln77_1_fu_819_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U23(
    .din0(delay_line_I_2_load_reg_1301),
    .din1(mul_ln77_2_fu_853_p1),
    .dout(mul_ln77_2_fu_853_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U24(
    .din0(delay_line_I_3_load_reg_1306),
    .din1(mul_ln77_3_fu_872_p1),
    .dout(mul_ln77_3_fu_872_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U25(
    .din0(delay_line_I_4_load_reg_1311),
    .din1(mul_ln77_4_fu_891_p1),
    .dout(mul_ln77_4_fu_891_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U26(
    .din0(delay_line_I_5_load_reg_1316),
    .din1(mul_ln77_5_fu_910_p1),
    .dout(mul_ln77_5_fu_910_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U27(
    .din0(delay_line_I_6_load_reg_1321),
    .din1(mul_ln77_6_fu_929_p1),
    .dout(mul_ln77_6_fu_929_p2)
);

receiver_mul_15s_18s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_15s_18s_33_1_1_U28(
    .din0(mul_ln77_7_fu_951_p0),
    .din1(delay_line_I_7_load_reg_1326),
    .dout(mul_ln77_7_fu_951_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U29(
    .din0(delay_line_Q_1_load_reg_1336),
    .din1(mul_ln78_1_fu_970_p1),
    .dout(mul_ln78_1_fu_970_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U30(
    .din0(delay_line_Q_2_load_reg_1341),
    .din1(mul_ln78_2_fu_989_p1),
    .dout(mul_ln78_2_fu_989_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U31(
    .din0(delay_line_Q_3_load_reg_1346),
    .din1(mul_ln78_3_fu_1008_p1),
    .dout(mul_ln78_3_fu_1008_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U32(
    .din0(delay_line_Q_4_load_reg_1351),
    .din1(mul_ln78_4_fu_1027_p1),
    .dout(mul_ln78_4_fu_1027_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U33(
    .din0(delay_line_Q_5_load_reg_1356),
    .din1(mul_ln78_5_fu_1046_p1),
    .dout(mul_ln78_5_fu_1046_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U34(
    .din0(delay_line_Q_6_load_reg_1361),
    .din1(mul_ln78_6_fu_1065_p1),
    .dout(mul_ln78_6_fu_1065_p2)
);

receiver_mul_18s_15s_33_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_18s_15s_33_1_1_U35(
    .din0(delay_line_Q_7_load_reg_1366),
    .din1(mul_ln78_7_fu_1084_p1),
    .dout(mul_ln78_7_fu_1084_p2)
);

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln75_fu_684_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_118 <= add_ln75_fu_761_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_118 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        delay_line_I_0_load_reg_1251 <= delay_line_I_0_q0;
        delay_line_Q_0_load_reg_1261 <= delay_line_Q_0_q0;
        icmp_ln75_reg_1142 <= icmp_ln75_fu_684_p2;
        icmp_ln75_reg_1142_pp0_iter1_reg <= icmp_ln75_reg_1142;
        zext_ln75_reg_1107[4 : 0] <= zext_ln75_fu_658_p1[4 : 0];
        zext_ln75_reg_1107_pp0_iter1_reg[4 : 0] <= zext_ln75_reg_1107[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_1_load_reg_1266 <= delay_line_I_1_q0;
        delay_line_I_2_load_reg_1301 <= delay_line_I_2_q0;
        delay_line_I_3_load_reg_1306 <= delay_line_I_3_q0;
        delay_line_I_4_load_reg_1311 <= delay_line_I_4_q0;
        delay_line_I_5_load_reg_1316 <= delay_line_I_5_q0;
        delay_line_I_6_load_reg_1321 <= delay_line_I_6_q0;
        delay_line_I_7_load_reg_1326 <= delay_line_I_7_q0;
        delay_line_Q_1_load_reg_1336 <= delay_line_Q_1_q0;
        delay_line_Q_2_load_reg_1341 <= delay_line_Q_2_q0;
        delay_line_Q_3_load_reg_1346 <= delay_line_Q_3_q0;
        delay_line_Q_4_load_reg_1351 <= delay_line_Q_4_q0;
        delay_line_Q_5_load_reg_1356 <= delay_line_Q_5_q0;
        delay_line_Q_6_load_reg_1361 <= delay_line_Q_6_q0;
        delay_line_Q_7_load_reg_1366 <= delay_line_Q_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_load_1_reg_1271 <= h_q6;
        h_load_2_reg_1276 <= h_q5;
        h_load_3_reg_1281 <= h_q4;
        h_load_4_reg_1286 <= h_q3;
        h_load_5_reg_1291 <= h_q2;
        h_load_6_reg_1296 <= h_q1;
        h_load_7_reg_1331 <= h_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_load_reg_1256 <= h_q7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln75_reg_1142_pp0_iter2_reg <= icmp_ln75_reg_1142_pp0_iter1_reg;
        trunc_ln1_reg_1376 <= {{mul_ln78_fu_797_p2[32:16]}};
        trunc_ln_reg_1371 <= {{mul_ln77_fu_778_p2[32:16]}};
        zext_ln75_reg_1107_pp0_iter2_reg[4 : 0] <= zext_ln75_reg_1107_pp0_iter1_reg[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter1_reg == 1'd1))) begin
        trunc_ln77_1_reg_1381 <= {{mul_ln77_1_fu_819_p2[32:16]}};
        trunc_ln77_2_reg_1386 <= {{mul_ln77_2_fu_853_p2[32:16]}};
        trunc_ln77_3_reg_1391 <= {{mul_ln77_3_fu_872_p2[32:16]}};
        trunc_ln77_4_reg_1396 <= {{mul_ln77_4_fu_891_p2[32:16]}};
        trunc_ln77_5_reg_1401 <= {{mul_ln77_5_fu_910_p2[32:16]}};
        trunc_ln77_6_reg_1406 <= {{mul_ln77_6_fu_929_p2[32:16]}};
        trunc_ln77_7_reg_1411 <= {{mul_ln77_7_fu_951_p2[32:16]}};
        trunc_ln78_1_reg_1416 <= {{mul_ln78_1_fu_970_p2[32:16]}};
        trunc_ln78_2_reg_1421 <= {{mul_ln78_2_fu_989_p2[32:16]}};
        trunc_ln78_3_reg_1426 <= {{mul_ln78_3_fu_1008_p2[32:16]}};
        trunc_ln78_4_reg_1431 <= {{mul_ln78_4_fu_1027_p2[32:16]}};
        trunc_ln78_5_reg_1436 <= {{mul_ln78_5_fu_1046_p2[32:16]}};
        trunc_ln78_6_reg_1441 <= {{mul_ln78_6_fu_1065_p2[32:16]}};
        trunc_ln78_7_reg_1446 <= {{mul_ln78_7_fu_1084_p2[32:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_684_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 8'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_0_ce0 = 1'b1;
    end else begin
        delay_line_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_1_ce0 = 1'b1;
    end else begin
        delay_line_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_2_ce0 = 1'b1;
    end else begin
        delay_line_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_3_ce0 = 1'b1;
    end else begin
        delay_line_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_4_ce0 = 1'b1;
    end else begin
        delay_line_I_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_5_ce0 = 1'b1;
    end else begin
        delay_line_I_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_6_ce0 = 1'b1;
    end else begin
        delay_line_I_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_7_ce0 = 1'b1;
    end else begin
        delay_line_I_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_0_ce0 = 1'b1;
    end else begin
        delay_line_Q_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_1_ce0 = 1'b1;
    end else begin
        delay_line_Q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_2_ce0 = 1'b1;
    end else begin
        delay_line_Q_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_3_ce0 = 1'b1;
    end else begin
        delay_line_Q_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_4_ce0 = 1'b1;
    end else begin
        delay_line_Q_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_5_ce0 = 1'b1;
    end else begin
        delay_line_Q_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_6_ce0 = 1'b1;
    end else begin
        delay_line_Q_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_7_ce0 = 1'b1;
    end else begin
        delay_line_Q_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_1_ce0 = 1'b1;
    end else begin
        filt_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_1_we0 = 1'b1;
    end else begin
        filt_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_2_ce0 = 1'b1;
    end else begin
        filt_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_2_we0 = 1'b1;
    end else begin
        filt_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_3_ce0 = 1'b1;
    end else begin
        filt_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_3_we0 = 1'b1;
    end else begin
        filt_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_4_ce0 = 1'b1;
    end else begin
        filt_I_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_4_we0 = 1'b1;
    end else begin
        filt_I_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_5_ce0 = 1'b1;
    end else begin
        filt_I_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_5_we0 = 1'b1;
    end else begin
        filt_I_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_6_ce0 = 1'b1;
    end else begin
        filt_I_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_6_we0 = 1'b1;
    end else begin
        filt_I_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_7_ce0 = 1'b1;
    end else begin
        filt_I_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_7_we0 = 1'b1;
    end else begin
        filt_I_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_ce0 = 1'b1;
    end else begin
        filt_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_I_we0 = 1'b1;
    end else begin
        filt_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_1_ce0 = 1'b1;
    end else begin
        filt_Q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_1_we0 = 1'b1;
    end else begin
        filt_Q_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_2_ce0 = 1'b1;
    end else begin
        filt_Q_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_2_we0 = 1'b1;
    end else begin
        filt_Q_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_3_ce0 = 1'b1;
    end else begin
        filt_Q_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_3_we0 = 1'b1;
    end else begin
        filt_Q_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_4_ce0 = 1'b1;
    end else begin
        filt_Q_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_4_we0 = 1'b1;
    end else begin
        filt_Q_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_5_ce0 = 1'b1;
    end else begin
        filt_Q_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_5_we0 = 1'b1;
    end else begin
        filt_Q_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_6_ce0 = 1'b1;
    end else begin
        filt_Q_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_6_we0 = 1'b1;
    end else begin
        filt_Q_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_7_ce0 = 1'b1;
    end else begin
        filt_Q_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln75_reg_1142_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_7_we0 = 1'b1;
    end else begin
        filt_Q_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_ce0 = 1'b1;
    end else begin
        filt_Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        filt_Q_we0 = 1'b1;
    end else begin
        filt_Q_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce0 = 1'b1;
    end else begin
        h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce1 = 1'b1;
    end else begin
        h_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce2 = 1'b1;
    end else begin
        h_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce3 = 1'b1;
    end else begin
        h_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce4 = 1'b1;
    end else begin
        h_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce5 = 1'b1;
    end else begin
        h_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce6 = 1'b1;
    end else begin
        h_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_ce7 = 1'b1;
    end else begin
        h_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln75_fu_761_p2 = (ap_sig_allocacmp_i + 8'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign delay_line_I_0_address0 = zext_ln75_fu_658_p1;

assign delay_line_I_1_address0 = zext_ln75_fu_658_p1;

assign delay_line_I_2_address0 = zext_ln75_fu_658_p1;

assign delay_line_I_3_address0 = zext_ln75_fu_658_p1;

assign delay_line_I_4_address0 = zext_ln75_fu_658_p1;

assign delay_line_I_5_address0 = zext_ln75_fu_658_p1;

assign delay_line_I_6_address0 = zext_ln75_fu_658_p1;

assign delay_line_I_7_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_0_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_1_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_2_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_3_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_4_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_5_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_6_address0 = zext_ln75_fu_658_p1;

assign delay_line_Q_7_address0 = zext_ln75_fu_658_p1;

assign filt_I_1_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_1_d0 = trunc_ln77_1_reg_1381;

assign filt_I_2_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_2_d0 = trunc_ln77_2_reg_1386;

assign filt_I_3_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_3_d0 = trunc_ln77_3_reg_1391;

assign filt_I_4_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_4_d0 = trunc_ln77_4_reg_1396;

assign filt_I_5_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_5_d0 = trunc_ln77_5_reg_1401;

assign filt_I_6_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_6_d0 = trunc_ln77_6_reg_1406;

assign filt_I_7_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_7_d0 = trunc_ln77_7_reg_1411;

assign filt_I_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_I_d0 = trunc_ln_reg_1371;

assign filt_Q_1_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_1_d0 = trunc_ln78_1_reg_1416;

assign filt_Q_2_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_2_d0 = trunc_ln78_2_reg_1421;

assign filt_Q_3_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_3_d0 = trunc_ln78_3_reg_1426;

assign filt_Q_4_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_4_d0 = trunc_ln78_4_reg_1431;

assign filt_Q_5_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_5_d0 = trunc_ln78_5_reg_1436;

assign filt_Q_6_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_6_d0 = trunc_ln78_6_reg_1441;

assign filt_Q_7_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_7_d0 = trunc_ln78_7_reg_1446;

assign filt_Q_address0 = zext_ln75_reg_1107_pp0_iter2_reg;

assign filt_Q_d0 = trunc_ln1_reg_1376;

assign h_address0 = zext_ln77_5_fu_756_p1;

assign h_address1 = zext_ln77_4_fu_745_p1;

assign h_address2 = zext_ln77_3_fu_734_p1;

assign h_address3 = zext_ln77_2_fu_723_p1;

assign h_address4 = zext_ln77_1_fu_712_p1;

assign h_address5 = zext_ln77_fu_701_p1;

assign h_address6 = zext_ln75_1_fu_690_p1;

assign h_address7 = i_2_cast_fu_643_p1;

assign i_2_cast_fu_643_p1 = ap_sig_allocacmp_i;

assign icmp_ln75_fu_684_p2 = ((or_ln75_fu_678_p2 < 8'd193) ? 1'b1 : 1'b0);

assign lshr_ln3_fu_648_p4 = {{ap_sig_allocacmp_i[7:3]}};

assign mul_ln77_1_fu_819_p0 = sext_ln77_3_fu_816_p1;

assign mul_ln77_2_fu_853_p1 = sext_ln77_4_fu_835_p1;

assign mul_ln77_3_fu_872_p1 = sext_ln77_5_fu_838_p1;

assign mul_ln77_4_fu_891_p1 = sext_ln77_6_fu_841_p1;

assign mul_ln77_5_fu_910_p1 = sext_ln77_7_fu_844_p1;

assign mul_ln77_6_fu_929_p1 = sext_ln77_8_fu_847_p1;

assign mul_ln77_7_fu_951_p0 = sext_ln77_15_fu_948_p1;

assign mul_ln77_fu_778_p0 = sext_ln77_1_fu_775_p1;

assign mul_ln78_1_fu_970_p1 = sext_ln77_3_fu_816_p1;

assign mul_ln78_2_fu_989_p1 = sext_ln77_4_fu_835_p1;

assign mul_ln78_3_fu_1008_p1 = sext_ln77_5_fu_838_p1;

assign mul_ln78_4_fu_1027_p1 = sext_ln77_6_fu_841_p1;

assign mul_ln78_5_fu_1046_p1 = sext_ln77_7_fu_844_p1;

assign mul_ln78_6_fu_1065_p1 = sext_ln77_8_fu_847_p1;

assign mul_ln78_7_fu_1084_p1 = sext_ln77_15_fu_948_p1;

assign mul_ln78_fu_797_p1 = sext_ln77_1_fu_775_p1;

assign or_ln75_1_fu_695_p2 = (ap_sig_allocacmp_i | 8'd2);

assign or_ln75_2_fu_706_p2 = (ap_sig_allocacmp_i | 8'd3);

assign or_ln75_3_fu_717_p2 = (ap_sig_allocacmp_i | 8'd4);

assign or_ln75_4_fu_728_p2 = (ap_sig_allocacmp_i | 8'd5);

assign or_ln75_5_fu_739_p2 = (ap_sig_allocacmp_i | 8'd6);

assign or_ln75_6_fu_750_p2 = (ap_sig_allocacmp_i | 8'd7);

assign or_ln75_fu_678_p2 = (ap_sig_allocacmp_i | 8'd1);

assign sext_ln77_15_fu_948_p1 = $signed(h_load_7_reg_1331);

assign sext_ln77_1_fu_775_p1 = $signed(h_load_reg_1256);

assign sext_ln77_3_fu_816_p1 = $signed(h_load_1_reg_1271);

assign sext_ln77_4_fu_835_p1 = $signed(h_load_2_reg_1276);

assign sext_ln77_5_fu_838_p1 = $signed(h_load_3_reg_1281);

assign sext_ln77_6_fu_841_p1 = $signed(h_load_4_reg_1286);

assign sext_ln77_7_fu_844_p1 = $signed(h_load_5_reg_1291);

assign sext_ln77_8_fu_847_p1 = $signed(h_load_6_reg_1296);

assign zext_ln75_1_fu_690_p1 = or_ln75_fu_678_p2;

assign zext_ln75_fu_658_p1 = lshr_ln3_fu_648_p4;

assign zext_ln77_1_fu_712_p1 = or_ln75_2_fu_706_p2;

assign zext_ln77_2_fu_723_p1 = or_ln75_3_fu_717_p2;

assign zext_ln77_3_fu_734_p1 = or_ln75_4_fu_728_p2;

assign zext_ln77_4_fu_745_p1 = or_ln75_5_fu_739_p2;

assign zext_ln77_5_fu_756_p1 = or_ln75_6_fu_750_p2;

assign zext_ln77_fu_701_p1 = or_ln75_1_fu_695_p2;

always @ (posedge ap_clk) begin
    zext_ln75_reg_1107[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln75_reg_1107_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln75_reg_1107_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_75_3
