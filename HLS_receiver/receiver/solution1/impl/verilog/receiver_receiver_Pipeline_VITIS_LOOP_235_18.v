// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_235_18 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_6_I_V_address0,
        arr_6_I_V_ce0,
        arr_6_I_V_q0,
        arr_6_I_V_2_address0,
        arr_6_I_V_2_ce0,
        arr_6_I_V_2_q0,
        arr_7_I_V_address0,
        arr_7_I_V_ce0,
        arr_7_I_V_we0,
        arr_7_I_V_d0,
        arr_6_Q_V_address0,
        arr_6_Q_V_ce0,
        arr_6_Q_V_q0,
        arr_6_Q_V_2_address0,
        arr_6_Q_V_2_ce0,
        arr_6_Q_V_2_q0,
        arr_7_Q_V_address0,
        arr_7_Q_V_ce0,
        arr_7_Q_V_we0,
        arr_7_Q_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] arr_6_I_V_address0;
output   arr_6_I_V_ce0;
input  [28:0] arr_6_I_V_q0;
output  [4:0] arr_6_I_V_2_address0;
output   arr_6_I_V_2_ce0;
input  [28:0] arr_6_I_V_2_q0;
output  [4:0] arr_7_I_V_address0;
output   arr_7_I_V_ce0;
output   arr_7_I_V_we0;
output  [29:0] arr_7_I_V_d0;
output  [4:0] arr_6_Q_V_address0;
output   arr_6_Q_V_ce0;
input  [28:0] arr_6_Q_V_q0;
output  [4:0] arr_6_Q_V_2_address0;
output   arr_6_Q_V_2_ce0;
input  [28:0] arr_6_Q_V_2_q0;
output  [4:0] arr_7_Q_V_address0;
output   arr_7_Q_V_ce0;
output   arr_7_Q_V_we0;
output  [29:0] arr_7_Q_V_d0;

reg ap_idle;
reg arr_6_I_V_ce0;
reg arr_6_I_V_2_ce0;
reg arr_7_I_V_ce0;
reg arr_7_I_V_we0;
reg arr_6_Q_V_ce0;
reg arr_6_Q_V_2_ce0;
reg arr_7_Q_V_ce0;
reg arr_7_Q_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln235_fu_132_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln813_fu_148_p1;
reg   [63:0] zext_ln813_reg_206;
reg   [63:0] zext_ln813_reg_206_pp0_iter1_reg;
wire   [29:0] ret_V_fu_175_p2;
reg   [29:0] ret_V_reg_232;
wire   [29:0] ret_V_34_fu_189_p2;
reg   [29:0] ret_V_34_reg_237;
wire    ap_block_pp0_stage0;
reg   [5:0] i_fu_42;
wire   [5:0] add_ln235_fu_156_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_8;
wire   [4:0] lshr_ln813_9_fu_138_p4;
wire  signed [29:0] sext_ln813_7_fu_171_p1;
wire  signed [29:0] sext_ln813_fu_167_p1;
wire  signed [29:0] sext_ln813_9_fu_185_p1;
wire  signed [29:0] sext_ln813_8_fu_181_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln235_fu_132_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_42 <= add_ln235_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ret_V_34_reg_237 <= ret_V_34_fu_189_p2;
        ret_V_reg_232 <= ret_V_fu_175_p2;
        zext_ln813_reg_206_pp0_iter1_reg[4 : 0] <= zext_ln813_reg_206[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln235_fu_132_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln813_reg_206[4 : 0] <= zext_ln813_fu_148_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln235_fu_132_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_8 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_8 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_6_I_V_2_ce0 = 1'b1;
    end else begin
        arr_6_I_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_6_I_V_ce0 = 1'b1;
    end else begin
        arr_6_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_6_Q_V_2_ce0 = 1'b1;
    end else begin
        arr_6_Q_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_6_Q_V_ce0 = 1'b1;
    end else begin
        arr_6_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_7_I_V_ce0 = 1'b1;
    end else begin
        arr_7_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_7_I_V_we0 = 1'b1;
    end else begin
        arr_7_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_7_Q_V_ce0 = 1'b1;
    end else begin
        arr_7_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_7_Q_V_we0 = 1'b1;
    end else begin
        arr_7_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln235_fu_156_p2 = (ap_sig_allocacmp_i_8 + 6'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_6_I_V_2_address0 = zext_ln813_fu_148_p1;

assign arr_6_I_V_address0 = zext_ln813_fu_148_p1;

assign arr_6_Q_V_2_address0 = zext_ln813_fu_148_p1;

assign arr_6_Q_V_address0 = zext_ln813_fu_148_p1;

assign arr_7_I_V_address0 = zext_ln813_reg_206_pp0_iter1_reg;

assign arr_7_I_V_d0 = ret_V_reg_232;

assign arr_7_Q_V_address0 = zext_ln813_reg_206_pp0_iter1_reg;

assign arr_7_Q_V_d0 = ret_V_34_reg_237;

assign icmp_ln235_fu_132_p2 = ((ap_sig_allocacmp_i_8 < 6'd34) ? 1'b1 : 1'b0);

assign lshr_ln813_9_fu_138_p4 = {{ap_sig_allocacmp_i_8[5:1]}};

assign ret_V_34_fu_189_p2 = ($signed(sext_ln813_9_fu_185_p1) + $signed(sext_ln813_8_fu_181_p1));

assign ret_V_fu_175_p2 = ($signed(sext_ln813_7_fu_171_p1) + $signed(sext_ln813_fu_167_p1));

assign sext_ln813_7_fu_171_p1 = $signed(arr_6_I_V_2_q0);

assign sext_ln813_8_fu_181_p1 = $signed(arr_6_Q_V_q0);

assign sext_ln813_9_fu_185_p1 = $signed(arr_6_Q_V_2_q0);

assign sext_ln813_fu_167_p1 = $signed(arr_6_I_V_q0);

assign zext_ln813_fu_148_p1 = lshr_ln813_9_fu_138_p4;

always @ (posedge ap_clk) begin
    zext_ln813_reg_206[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln813_reg_206_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_235_18
