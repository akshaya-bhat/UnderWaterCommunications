// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_227_17 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_5_I_V_address0,
        arr_5_I_V_ce0,
        arr_5_I_V_q0,
        arr_5_I_V_1_address0,
        arr_5_I_V_1_ce0,
        arr_5_I_V_1_q0,
        arr_6_I_V_address0,
        arr_6_I_V_ce0,
        arr_6_I_V_we0,
        arr_6_I_V_d0,
        arr_5_Q_V_address0,
        arr_5_Q_V_ce0,
        arr_5_Q_V_q0,
        arr_5_Q_V_1_address0,
        arr_5_Q_V_1_ce0,
        arr_5_Q_V_1_q0,
        arr_6_Q_V_address0,
        arr_6_Q_V_ce0,
        arr_6_Q_V_we0,
        arr_6_Q_V_d0,
        arr_5_I_V_2_address0,
        arr_5_I_V_2_ce0,
        arr_5_I_V_2_q0,
        arr_5_I_V_3_address0,
        arr_5_I_V_3_ce0,
        arr_5_I_V_3_q0,
        arr_6_I_V_2_address0,
        arr_6_I_V_2_ce0,
        arr_6_I_V_2_we0,
        arr_6_I_V_2_d0,
        arr_5_Q_V_2_address0,
        arr_5_Q_V_2_ce0,
        arr_5_Q_V_2_q0,
        arr_5_Q_V_3_address0,
        arr_5_Q_V_3_ce0,
        arr_5_Q_V_3_q0,
        arr_6_Q_V_2_address0,
        arr_6_Q_V_2_ce0,
        arr_6_Q_V_2_we0,
        arr_6_Q_V_2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] arr_5_I_V_address0;
output   arr_5_I_V_ce0;
input  [27:0] arr_5_I_V_q0;
output  [4:0] arr_5_I_V_1_address0;
output   arr_5_I_V_1_ce0;
input  [27:0] arr_5_I_V_1_q0;
output  [4:0] arr_6_I_V_address0;
output   arr_6_I_V_ce0;
output   arr_6_I_V_we0;
output  [28:0] arr_6_I_V_d0;
output  [4:0] arr_5_Q_V_address0;
output   arr_5_Q_V_ce0;
input  [27:0] arr_5_Q_V_q0;
output  [4:0] arr_5_Q_V_1_address0;
output   arr_5_Q_V_1_ce0;
input  [27:0] arr_5_Q_V_1_q0;
output  [4:0] arr_6_Q_V_address0;
output   arr_6_Q_V_ce0;
output   arr_6_Q_V_we0;
output  [28:0] arr_6_Q_V_d0;
output  [4:0] arr_5_I_V_2_address0;
output   arr_5_I_V_2_ce0;
input  [27:0] arr_5_I_V_2_q0;
output  [4:0] arr_5_I_V_3_address0;
output   arr_5_I_V_3_ce0;
input  [27:0] arr_5_I_V_3_q0;
output  [4:0] arr_6_I_V_2_address0;
output   arr_6_I_V_2_ce0;
output   arr_6_I_V_2_we0;
output  [28:0] arr_6_I_V_2_d0;
output  [4:0] arr_5_Q_V_2_address0;
output   arr_5_Q_V_2_ce0;
input  [27:0] arr_5_Q_V_2_q0;
output  [4:0] arr_5_Q_V_3_address0;
output   arr_5_Q_V_3_ce0;
input  [27:0] arr_5_Q_V_3_q0;
output  [4:0] arr_6_Q_V_2_address0;
output   arr_6_Q_V_2_ce0;
output   arr_6_Q_V_2_we0;
output  [28:0] arr_6_Q_V_2_d0;

reg ap_idle;
reg arr_5_I_V_ce0;
reg arr_5_I_V_1_ce0;
reg arr_6_I_V_ce0;
reg arr_6_I_V_we0;
reg arr_5_Q_V_ce0;
reg arr_5_Q_V_1_ce0;
reg arr_6_Q_V_ce0;
reg arr_6_Q_V_we0;
reg arr_5_I_V_2_ce0;
reg arr_5_I_V_3_ce0;
reg arr_6_I_V_2_ce0;
reg arr_6_I_V_2_we0;
reg arr_5_Q_V_2_ce0;
reg arr_5_Q_V_3_ce0;
reg arr_6_Q_V_2_ce0;
reg arr_6_Q_V_2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln227_fu_254_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln813_fu_236_p1;
reg   [63:0] zext_ln813_reg_334;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] zext_ln813_reg_334_pp0_iter1_reg;
reg   [0:0] icmp_ln227_reg_362;
reg   [0:0] icmp_ln227_reg_362_pp0_iter1_reg;
wire   [28:0] ret_V_fu_279_p2;
reg   [28:0] ret_V_reg_386;
wire   [28:0] ret_V_35_fu_293_p2;
reg   [28:0] ret_V_35_reg_391;
wire   [28:0] ret_V_36_fu_307_p2;
reg   [28:0] ret_V_36_reg_396;
wire   [28:0] ret_V_37_fu_321_p2;
reg   [28:0] ret_V_37_reg_401;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_58;
wire   [6:0] add_ln227_fu_260_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_9;
wire   [4:0] lshr_ln813_8_fu_226_p4;
wire   [6:0] or_ln227_fu_248_p2;
wire  signed [28:0] sext_ln813_10_fu_275_p1;
wire  signed [28:0] sext_ln813_fu_271_p1;
wire  signed [28:0] sext_ln813_12_fu_289_p1;
wire  signed [28:0] sext_ln813_11_fu_285_p1;
wire  signed [28:0] sext_ln813_14_fu_303_p1;
wire  signed [28:0] sext_ln813_13_fu_299_p1;
wire  signed [28:0] sext_ln813_16_fu_317_p1;
wire  signed [28:0] sext_ln813_15_fu_313_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln227_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= add_ln227_fu_260_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln227_reg_362 <= icmp_ln227_fu_254_p2;
        icmp_ln227_reg_362_pp0_iter1_reg <= icmp_ln227_reg_362;
        ret_V_35_reg_391 <= ret_V_35_fu_293_p2;
        ret_V_reg_386 <= ret_V_fu_279_p2;
        zext_ln813_reg_334[4 : 0] <= zext_ln813_fu_236_p1[4 : 0];
        zext_ln813_reg_334_pp0_iter1_reg[4 : 0] <= zext_ln813_reg_334[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln227_reg_362 == 1'd1))) begin
        ret_V_36_reg_396 <= ret_V_36_fu_307_p2;
        ret_V_37_reg_401 <= ret_V_37_fu_321_p2;
    end
end

always @ (*) begin
    if (((icmp_ln227_fu_254_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_9 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_I_V_1_ce0 = 1'b1;
    end else begin
        arr_5_I_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_I_V_2_ce0 = 1'b1;
    end else begin
        arr_5_I_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_I_V_3_ce0 = 1'b1;
    end else begin
        arr_5_I_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_I_V_ce0 = 1'b1;
    end else begin
        arr_5_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_Q_V_1_ce0 = 1'b1;
    end else begin
        arr_5_Q_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_Q_V_2_ce0 = 1'b1;
    end else begin
        arr_5_Q_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_Q_V_3_ce0 = 1'b1;
    end else begin
        arr_5_Q_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_5_Q_V_ce0 = 1'b1;
    end else begin
        arr_5_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_6_I_V_2_ce0 = 1'b1;
    end else begin
        arr_6_I_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln227_reg_362_pp0_iter1_reg == 1'd1))) begin
        arr_6_I_V_2_we0 = 1'b1;
    end else begin
        arr_6_I_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_6_I_V_ce0 = 1'b1;
    end else begin
        arr_6_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_6_I_V_we0 = 1'b1;
    end else begin
        arr_6_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_6_Q_V_2_ce0 = 1'b1;
    end else begin
        arr_6_Q_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln227_reg_362_pp0_iter1_reg == 1'd1))) begin
        arr_6_Q_V_2_we0 = 1'b1;
    end else begin
        arr_6_Q_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_6_Q_V_ce0 = 1'b1;
    end else begin
        arr_6_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        arr_6_Q_V_we0 = 1'b1;
    end else begin
        arr_6_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln227_fu_260_p2 = (ap_sig_allocacmp_i_9 + 7'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign arr_5_I_V_1_address0 = zext_ln813_fu_236_p1;

assign arr_5_I_V_2_address0 = zext_ln813_fu_236_p1;

assign arr_5_I_V_3_address0 = zext_ln813_fu_236_p1;

assign arr_5_I_V_address0 = zext_ln813_fu_236_p1;

assign arr_5_Q_V_1_address0 = zext_ln813_fu_236_p1;

assign arr_5_Q_V_2_address0 = zext_ln813_fu_236_p1;

assign arr_5_Q_V_3_address0 = zext_ln813_fu_236_p1;

assign arr_5_Q_V_address0 = zext_ln813_fu_236_p1;

assign arr_6_I_V_2_address0 = zext_ln813_reg_334_pp0_iter1_reg;

assign arr_6_I_V_2_d0 = ret_V_36_reg_396;

assign arr_6_I_V_address0 = zext_ln813_reg_334_pp0_iter1_reg;

assign arr_6_I_V_d0 = ret_V_reg_386;

assign arr_6_Q_V_2_address0 = zext_ln813_reg_334_pp0_iter1_reg;

assign arr_6_Q_V_2_d0 = ret_V_37_reg_401;

assign arr_6_Q_V_address0 = zext_ln813_reg_334_pp0_iter1_reg;

assign arr_6_Q_V_d0 = ret_V_35_reg_391;

assign icmp_ln227_fu_254_p2 = ((or_ln227_fu_248_p2 < 7'd70) ? 1'b1 : 1'b0);

assign lshr_ln813_8_fu_226_p4 = {{ap_sig_allocacmp_i_9[6:2]}};

assign or_ln227_fu_248_p2 = (ap_sig_allocacmp_i_9 | 7'd2);

assign ret_V_35_fu_293_p2 = ($signed(sext_ln813_12_fu_289_p1) + $signed(sext_ln813_11_fu_285_p1));

assign ret_V_36_fu_307_p2 = ($signed(sext_ln813_14_fu_303_p1) + $signed(sext_ln813_13_fu_299_p1));

assign ret_V_37_fu_321_p2 = ($signed(sext_ln813_16_fu_317_p1) + $signed(sext_ln813_15_fu_313_p1));

assign ret_V_fu_279_p2 = ($signed(sext_ln813_10_fu_275_p1) + $signed(sext_ln813_fu_271_p1));

assign sext_ln813_10_fu_275_p1 = $signed(arr_5_I_V_1_q0);

assign sext_ln813_11_fu_285_p1 = $signed(arr_5_Q_V_q0);

assign sext_ln813_12_fu_289_p1 = $signed(arr_5_Q_V_1_q0);

assign sext_ln813_13_fu_299_p1 = $signed(arr_5_I_V_2_q0);

assign sext_ln813_14_fu_303_p1 = $signed(arr_5_I_V_3_q0);

assign sext_ln813_15_fu_313_p1 = $signed(arr_5_Q_V_2_q0);

assign sext_ln813_16_fu_317_p1 = $signed(arr_5_Q_V_3_q0);

assign sext_ln813_fu_271_p1 = $signed(arr_5_I_V_q0);

assign zext_ln813_fu_236_p1 = lshr_ln813_8_fu_226_p4;

always @ (posedge ap_clk) begin
    zext_ln813_reg_334[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln813_reg_334_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_227_17
