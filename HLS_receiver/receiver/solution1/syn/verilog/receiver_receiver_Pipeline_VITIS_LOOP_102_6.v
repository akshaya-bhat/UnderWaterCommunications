// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_102_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filt_2_I_address0,
        filt_2_I_ce0,
        filt_2_I_q0,
        filt_2_I_2_address0,
        filt_2_I_2_ce0,
        filt_2_I_2_q0,
        filt_2_I_4_address0,
        filt_2_I_4_ce0,
        filt_2_I_4_q0,
        filt_2_I_6_address0,
        filt_2_I_6_ce0,
        filt_2_I_6_q0,
        filt_2_I_1_address0,
        filt_2_I_1_ce0,
        filt_2_I_1_q0,
        filt_2_I_3_address0,
        filt_2_I_3_ce0,
        filt_2_I_3_q0,
        filt_2_I_5_address0,
        filt_2_I_5_ce0,
        filt_2_I_5_q0,
        filt_2_I_7_address0,
        filt_2_I_7_ce0,
        filt_2_I_7_q0,
        filt_3_I_address0,
        filt_3_I_ce0,
        filt_3_I_we0,
        filt_3_I_d0,
        filt_2_Q_address0,
        filt_2_Q_ce0,
        filt_2_Q_q0,
        filt_2_Q_2_address0,
        filt_2_Q_2_ce0,
        filt_2_Q_2_q0,
        filt_2_Q_4_address0,
        filt_2_Q_4_ce0,
        filt_2_Q_4_q0,
        filt_2_Q_6_address0,
        filt_2_Q_6_ce0,
        filt_2_Q_6_q0,
        filt_2_Q_1_address0,
        filt_2_Q_1_ce0,
        filt_2_Q_1_q0,
        filt_2_Q_3_address0,
        filt_2_Q_3_ce0,
        filt_2_Q_3_q0,
        filt_2_Q_5_address0,
        filt_2_Q_5_ce0,
        filt_2_Q_5_q0,
        filt_2_Q_7_address0,
        filt_2_Q_7_ce0,
        filt_2_Q_7_q0,
        filt_3_Q_address0,
        filt_3_Q_ce0,
        filt_3_Q_we0,
        filt_3_Q_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] filt_2_I_address0;
output   filt_2_I_ce0;
input  [17:0] filt_2_I_q0;
output  [2:0] filt_2_I_2_address0;
output   filt_2_I_2_ce0;
input  [17:0] filt_2_I_2_q0;
output  [2:0] filt_2_I_4_address0;
output   filt_2_I_4_ce0;
input  [17:0] filt_2_I_4_q0;
output  [2:0] filt_2_I_6_address0;
output   filt_2_I_6_ce0;
input  [17:0] filt_2_I_6_q0;
output  [2:0] filt_2_I_1_address0;
output   filt_2_I_1_ce0;
input  [17:0] filt_2_I_1_q0;
output  [2:0] filt_2_I_3_address0;
output   filt_2_I_3_ce0;
input  [17:0] filt_2_I_3_q0;
output  [2:0] filt_2_I_5_address0;
output   filt_2_I_5_ce0;
input  [17:0] filt_2_I_5_q0;
output  [2:0] filt_2_I_7_address0;
output   filt_2_I_7_ce0;
input  [17:0] filt_2_I_7_q0;
output  [4:0] filt_3_I_address0;
output   filt_3_I_ce0;
output   filt_3_I_we0;
output  [17:0] filt_3_I_d0;
output  [2:0] filt_2_Q_address0;
output   filt_2_Q_ce0;
input  [17:0] filt_2_Q_q0;
output  [2:0] filt_2_Q_2_address0;
output   filt_2_Q_2_ce0;
input  [17:0] filt_2_Q_2_q0;
output  [2:0] filt_2_Q_4_address0;
output   filt_2_Q_4_ce0;
input  [17:0] filt_2_Q_4_q0;
output  [2:0] filt_2_Q_6_address0;
output   filt_2_Q_6_ce0;
input  [17:0] filt_2_Q_6_q0;
output  [2:0] filt_2_Q_1_address0;
output   filt_2_Q_1_ce0;
input  [17:0] filt_2_Q_1_q0;
output  [2:0] filt_2_Q_3_address0;
output   filt_2_Q_3_ce0;
input  [17:0] filt_2_Q_3_q0;
output  [2:0] filt_2_Q_5_address0;
output   filt_2_Q_5_ce0;
input  [17:0] filt_2_Q_5_q0;
output  [2:0] filt_2_Q_7_address0;
output   filt_2_Q_7_ce0;
input  [17:0] filt_2_Q_7_q0;
output  [4:0] filt_3_Q_address0;
output   filt_3_Q_ce0;
output   filt_3_Q_we0;
output  [17:0] filt_3_Q_d0;

reg ap_idle;
reg filt_2_I_ce0;
reg filt_2_I_2_ce0;
reg filt_2_I_4_ce0;
reg filt_2_I_6_ce0;
reg filt_2_I_1_ce0;
reg filt_2_I_3_ce0;
reg filt_2_I_5_ce0;
reg filt_2_I_7_ce0;
reg filt_3_I_ce0;
reg filt_3_I_we0;
reg filt_2_Q_ce0;
reg filt_2_Q_2_ce0;
reg filt_2_Q_4_ce0;
reg filt_2_Q_6_ce0;
reg filt_2_Q_1_ce0;
reg filt_2_Q_3_ce0;
reg filt_2_Q_5_ce0;
reg filt_2_Q_7_ce0;
reg filt_3_Q_ce0;
reg filt_3_Q_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln102_fu_320_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [5:0] i_reg_481;
wire    ap_block_pp0_stage0_11001;
wire   [17:0] tmp_fu_370_p9;
reg   [17:0] tmp_reg_571;
wire   [17:0] tmp_1_fu_390_p9;
reg   [17:0] tmp_1_reg_576;
reg   [4:0] lshr_ln9_reg_581;
wire   [17:0] tmp_2_fu_419_p9;
reg   [17:0] tmp_2_reg_586;
wire   [17:0] tmp_3_fu_439_p9;
reg   [17:0] tmp_3_reg_591;
wire   [63:0] zext_ln102_fu_336_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln103_fu_464_p1;
reg   [5:0] i_5_fu_74;
wire   [5:0] add_ln102_fu_356_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i;
wire   [2:0] lshr_ln8_fu_326_p4;
wire   [2:0] empty_fu_367_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_mux_7_3_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
mux_7_3_18_1_1_U135(
    .din0(filt_2_I_q0),
    .din1(18'd0),
    .din2(filt_2_I_2_q0),
    .din3(18'd0),
    .din4(filt_2_I_4_q0),
    .din5(18'd0),
    .din6(filt_2_I_6_q0),
    .din7(empty_fu_367_p1),
    .dout(tmp_fu_370_p9)
);

receiver_mux_7_3_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
mux_7_3_18_1_1_U136(
    .din0(filt_2_I_1_q0),
    .din1(18'd0),
    .din2(filt_2_I_3_q0),
    .din3(18'd0),
    .din4(filt_2_I_5_q0),
    .din5(18'd0),
    .din6(filt_2_I_7_q0),
    .din7(empty_fu_367_p1),
    .dout(tmp_1_fu_390_p9)
);

receiver_mux_7_3_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
mux_7_3_18_1_1_U137(
    .din0(filt_2_Q_q0),
    .din1(18'd0),
    .din2(filt_2_Q_2_q0),
    .din3(18'd0),
    .din4(filt_2_Q_4_q0),
    .din5(18'd0),
    .din6(filt_2_Q_6_q0),
    .din7(empty_fu_367_p1),
    .dout(tmp_2_fu_419_p9)
);

receiver_mux_7_3_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .din2_WIDTH( 18 ),
    .din3_WIDTH( 18 ),
    .din4_WIDTH( 18 ),
    .din5_WIDTH( 18 ),
    .din6_WIDTH( 18 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 18 ))
mux_7_3_18_1_1_U138(
    .din0(filt_2_Q_1_q0),
    .din1(18'd0),
    .din2(filt_2_Q_3_q0),
    .din3(18'd0),
    .din4(filt_2_Q_5_q0),
    .din5(18'd0),
    .din6(filt_2_Q_7_q0),
    .din7(empty_fu_367_p1),
    .dout(tmp_3_fu_439_p9)
);

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln102_fu_320_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_5_fu_74 <= add_ln102_fu_356_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_5_fu_74 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_reg_481 <= ap_sig_allocacmp_i;
        lshr_ln9_reg_581 <= {{i_reg_481[5:1]}};
        tmp_1_reg_576 <= tmp_1_fu_390_p9;
        tmp_2_reg_586 <= tmp_2_fu_419_p9;
        tmp_3_reg_591 <= tmp_3_fu_439_p9;
        tmp_reg_571 <= tmp_fu_370_p9;
    end
end

always @ (*) begin
    if (((icmp_ln102_fu_320_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_5_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_1_ce0 = 1'b1;
    end else begin
        filt_2_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_2_ce0 = 1'b1;
    end else begin
        filt_2_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_3_ce0 = 1'b1;
    end else begin
        filt_2_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_4_ce0 = 1'b1;
    end else begin
        filt_2_I_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_5_ce0 = 1'b1;
    end else begin
        filt_2_I_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_6_ce0 = 1'b1;
    end else begin
        filt_2_I_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_7_ce0 = 1'b1;
    end else begin
        filt_2_I_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_I_ce0 = 1'b1;
    end else begin
        filt_2_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_1_ce0 = 1'b1;
    end else begin
        filt_2_Q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_2_ce0 = 1'b1;
    end else begin
        filt_2_Q_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_3_ce0 = 1'b1;
    end else begin
        filt_2_Q_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_4_ce0 = 1'b1;
    end else begin
        filt_2_Q_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_5_ce0 = 1'b1;
    end else begin
        filt_2_Q_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_6_ce0 = 1'b1;
    end else begin
        filt_2_Q_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_7_ce0 = 1'b1;
    end else begin
        filt_2_Q_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filt_2_Q_ce0 = 1'b1;
    end else begin
        filt_2_Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        filt_3_I_ce0 = 1'b1;
    end else begin
        filt_3_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        filt_3_I_we0 = 1'b1;
    end else begin
        filt_3_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        filt_3_Q_ce0 = 1'b1;
    end else begin
        filt_3_Q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        filt_3_Q_we0 = 1'b1;
    end else begin
        filt_3_Q_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_fu_356_p2 = (ap_sig_allocacmp_i + 6'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_367_p1 = i_reg_481[2:0];

assign filt_2_I_1_address0 = zext_ln102_fu_336_p1;

assign filt_2_I_2_address0 = zext_ln102_fu_336_p1;

assign filt_2_I_3_address0 = zext_ln102_fu_336_p1;

assign filt_2_I_4_address0 = zext_ln102_fu_336_p1;

assign filt_2_I_5_address0 = zext_ln102_fu_336_p1;

assign filt_2_I_6_address0 = zext_ln102_fu_336_p1;

assign filt_2_I_7_address0 = zext_ln102_fu_336_p1;

assign filt_2_I_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_1_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_2_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_3_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_4_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_5_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_6_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_7_address0 = zext_ln102_fu_336_p1;

assign filt_2_Q_address0 = zext_ln102_fu_336_p1;

assign filt_3_I_address0 = zext_ln103_fu_464_p1;

assign filt_3_I_d0 = (tmp_1_reg_576 + tmp_reg_571);

assign filt_3_Q_address0 = zext_ln103_fu_464_p1;

assign filt_3_Q_d0 = (tmp_3_reg_591 + tmp_2_reg_586);

assign icmp_ln102_fu_320_p2 = ((ap_sig_allocacmp_i < 6'd48) ? 1'b1 : 1'b0);

assign lshr_ln8_fu_326_p4 = {{ap_sig_allocacmp_i[5:3]}};

assign zext_ln102_fu_336_p1 = lshr_ln8_fu_326_p4;

assign zext_ln103_fu_464_p1 = lshr_ln9_reg_581;

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_102_6
