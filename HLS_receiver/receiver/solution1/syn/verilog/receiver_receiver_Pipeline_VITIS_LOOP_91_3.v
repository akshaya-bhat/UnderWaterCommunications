// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_91_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filt_I_V_address0,
        filt_I_V_ce0,
        filt_I_V_we0,
        filt_I_V_d0,
        filt_Q_V_address0,
        filt_Q_V_ce0,
        filt_Q_V_we0,
        filt_Q_V_d0,
        filt_I_V_8_address0,
        filt_I_V_8_ce0,
        filt_I_V_8_we0,
        filt_I_V_8_d0,
        filt_Q_V_8_address0,
        filt_Q_V_8_ce0,
        filt_Q_V_8_we0,
        filt_Q_V_8_d0,
        filt_I_V_9_address0,
        filt_I_V_9_ce0,
        filt_I_V_9_we0,
        filt_I_V_9_d0,
        filt_Q_V_9_address0,
        filt_Q_V_9_ce0,
        filt_Q_V_9_we0,
        filt_Q_V_9_d0,
        filt_I_V_10_address0,
        filt_I_V_10_ce0,
        filt_I_V_10_we0,
        filt_I_V_10_d0,
        filt_Q_V_10_address0,
        filt_Q_V_10_ce0,
        filt_Q_V_10_we0,
        filt_Q_V_10_d0,
        filt_I_V_11_address0,
        filt_I_V_11_ce0,
        filt_I_V_11_we0,
        filt_I_V_11_d0,
        filt_Q_V_11_address0,
        filt_Q_V_11_ce0,
        filt_Q_V_11_we0,
        filt_Q_V_11_d0,
        filt_I_V_12_address0,
        filt_I_V_12_ce0,
        filt_I_V_12_we0,
        filt_I_V_12_d0,
        filt_Q_V_12_address0,
        filt_Q_V_12_ce0,
        filt_Q_V_12_we0,
        filt_Q_V_12_d0,
        filt_I_V_13_address0,
        filt_I_V_13_ce0,
        filt_I_V_13_we0,
        filt_I_V_13_d0,
        filt_Q_V_13_address0,
        filt_Q_V_13_ce0,
        filt_Q_V_13_we0,
        filt_Q_V_13_d0,
        filt_I_V_14_address0,
        filt_I_V_14_ce0,
        filt_I_V_14_we0,
        filt_I_V_14_d0,
        filt_Q_V_14_address0,
        filt_Q_V_14_ce0,
        filt_Q_V_14_we0,
        filt_Q_V_14_d0,
        delay_line_I_0_address0,
        delay_line_I_0_ce0,
        delay_line_I_0_q0,
        delay_line_Q_0_address0,
        delay_line_Q_0_ce0,
        delay_line_Q_0_q0,
        delay_line_I_1_address0,
        delay_line_I_1_ce0,
        delay_line_I_1_q0,
        delay_line_Q_1_address0,
        delay_line_Q_1_ce0,
        delay_line_Q_1_q0,
        delay_line_I_2_address0,
        delay_line_I_2_ce0,
        delay_line_I_2_q0,
        delay_line_Q_2_address0,
        delay_line_Q_2_ce0,
        delay_line_Q_2_q0,
        delay_line_I_3_address0,
        delay_line_I_3_ce0,
        delay_line_I_3_q0,
        delay_line_Q_3_address0,
        delay_line_Q_3_ce0,
        delay_line_Q_3_q0,
        delay_line_I_4_address0,
        delay_line_I_4_ce0,
        delay_line_I_4_q0,
        delay_line_Q_4_address0,
        delay_line_Q_4_ce0,
        delay_line_Q_4_q0,
        delay_line_I_5_address0,
        delay_line_I_5_ce0,
        delay_line_I_5_q0,
        delay_line_Q_5_address0,
        delay_line_Q_5_ce0,
        delay_line_Q_5_q0,
        delay_line_I_6_address0,
        delay_line_I_6_ce0,
        delay_line_I_6_q0,
        delay_line_Q_6_address0,
        delay_line_Q_6_ce0,
        delay_line_Q_6_q0,
        delay_line_I_7_address0,
        delay_line_I_7_ce0,
        delay_line_I_7_q0,
        delay_line_Q_7_address0,
        delay_line_Q_7_ce0,
        delay_line_Q_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] filt_I_V_address0;
output   filt_I_V_ce0;
output   filt_I_V_we0;
output  [16:0] filt_I_V_d0;
output  [4:0] filt_Q_V_address0;
output   filt_Q_V_ce0;
output   filt_Q_V_we0;
output  [16:0] filt_Q_V_d0;
output  [4:0] filt_I_V_8_address0;
output   filt_I_V_8_ce0;
output   filt_I_V_8_we0;
output  [16:0] filt_I_V_8_d0;
output  [4:0] filt_Q_V_8_address0;
output   filt_Q_V_8_ce0;
output   filt_Q_V_8_we0;
output  [16:0] filt_Q_V_8_d0;
output  [4:0] filt_I_V_9_address0;
output   filt_I_V_9_ce0;
output   filt_I_V_9_we0;
output  [16:0] filt_I_V_9_d0;
output  [4:0] filt_Q_V_9_address0;
output   filt_Q_V_9_ce0;
output   filt_Q_V_9_we0;
output  [16:0] filt_Q_V_9_d0;
output  [4:0] filt_I_V_10_address0;
output   filt_I_V_10_ce0;
output   filt_I_V_10_we0;
output  [16:0] filt_I_V_10_d0;
output  [4:0] filt_Q_V_10_address0;
output   filt_Q_V_10_ce0;
output   filt_Q_V_10_we0;
output  [16:0] filt_Q_V_10_d0;
output  [4:0] filt_I_V_11_address0;
output   filt_I_V_11_ce0;
output   filt_I_V_11_we0;
output  [16:0] filt_I_V_11_d0;
output  [4:0] filt_Q_V_11_address0;
output   filt_Q_V_11_ce0;
output   filt_Q_V_11_we0;
output  [16:0] filt_Q_V_11_d0;
output  [4:0] filt_I_V_12_address0;
output   filt_I_V_12_ce0;
output   filt_I_V_12_we0;
output  [16:0] filt_I_V_12_d0;
output  [4:0] filt_Q_V_12_address0;
output   filt_Q_V_12_ce0;
output   filt_Q_V_12_we0;
output  [16:0] filt_Q_V_12_d0;
output  [4:0] filt_I_V_13_address0;
output   filt_I_V_13_ce0;
output   filt_I_V_13_we0;
output  [16:0] filt_I_V_13_d0;
output  [4:0] filt_Q_V_13_address0;
output   filt_Q_V_13_ce0;
output   filt_Q_V_13_we0;
output  [16:0] filt_Q_V_13_d0;
output  [4:0] filt_I_V_14_address0;
output   filt_I_V_14_ce0;
output   filt_I_V_14_we0;
output  [16:0] filt_I_V_14_d0;
output  [4:0] filt_Q_V_14_address0;
output   filt_Q_V_14_ce0;
output   filt_Q_V_14_we0;
output  [16:0] filt_Q_V_14_d0;
output  [4:0] delay_line_I_0_address0;
output   delay_line_I_0_ce0;
input  [17:0] delay_line_I_0_q0;
output  [4:0] delay_line_Q_0_address0;
output   delay_line_Q_0_ce0;
input  [17:0] delay_line_Q_0_q0;
output  [4:0] delay_line_I_1_address0;
output   delay_line_I_1_ce0;
input  [17:0] delay_line_I_1_q0;
output  [4:0] delay_line_Q_1_address0;
output   delay_line_Q_1_ce0;
input  [17:0] delay_line_Q_1_q0;
output  [4:0] delay_line_I_2_address0;
output   delay_line_I_2_ce0;
input  [17:0] delay_line_I_2_q0;
output  [4:0] delay_line_Q_2_address0;
output   delay_line_Q_2_ce0;
input  [17:0] delay_line_Q_2_q0;
output  [4:0] delay_line_I_3_address0;
output   delay_line_I_3_ce0;
input  [17:0] delay_line_I_3_q0;
output  [4:0] delay_line_Q_3_address0;
output   delay_line_Q_3_ce0;
input  [17:0] delay_line_Q_3_q0;
output  [4:0] delay_line_I_4_address0;
output   delay_line_I_4_ce0;
input  [17:0] delay_line_I_4_q0;
output  [4:0] delay_line_Q_4_address0;
output   delay_line_Q_4_ce0;
input  [17:0] delay_line_Q_4_q0;
output  [4:0] delay_line_I_5_address0;
output   delay_line_I_5_ce0;
input  [17:0] delay_line_I_5_q0;
output  [4:0] delay_line_Q_5_address0;
output   delay_line_Q_5_ce0;
input  [17:0] delay_line_Q_5_q0;
output  [4:0] delay_line_I_6_address0;
output   delay_line_I_6_ce0;
input  [17:0] delay_line_I_6_q0;
output  [4:0] delay_line_Q_6_address0;
output   delay_line_Q_6_ce0;
input  [17:0] delay_line_Q_6_q0;
output  [4:0] delay_line_I_7_address0;
output   delay_line_I_7_ce0;
input  [17:0] delay_line_I_7_q0;
output  [4:0] delay_line_Q_7_address0;
output   delay_line_Q_7_ce0;
input  [17:0] delay_line_Q_7_q0;

reg ap_idle;
reg filt_I_V_ce0;
reg filt_I_V_we0;
reg filt_Q_V_ce0;
reg filt_Q_V_we0;
reg filt_I_V_8_ce0;
reg filt_I_V_8_we0;
reg filt_Q_V_8_ce0;
reg filt_Q_V_8_we0;
reg filt_I_V_9_ce0;
reg filt_I_V_9_we0;
reg filt_Q_V_9_ce0;
reg filt_Q_V_9_we0;
reg filt_I_V_10_ce0;
reg filt_I_V_10_we0;
reg filt_Q_V_10_ce0;
reg filt_Q_V_10_we0;
reg filt_I_V_11_ce0;
reg filt_I_V_11_we0;
reg filt_Q_V_11_ce0;
reg filt_Q_V_11_we0;
reg filt_I_V_12_ce0;
reg filt_I_V_12_we0;
reg filt_Q_V_12_ce0;
reg filt_Q_V_12_we0;
reg filt_I_V_13_ce0;
reg filt_I_V_13_we0;
reg filt_Q_V_13_ce0;
reg filt_Q_V_13_we0;
reg filt_I_V_14_ce0;
reg filt_I_V_14_we0;
reg filt_Q_V_14_ce0;
reg filt_Q_V_14_we0;
reg delay_line_I_0_ce0;
reg delay_line_Q_0_ce0;
reg delay_line_I_1_ce0;
reg delay_line_Q_1_ce0;
reg delay_line_I_2_ce0;
reg delay_line_Q_2_ce0;
reg delay_line_I_3_ce0;
reg delay_line_Q_3_ce0;
reg delay_line_I_4_ce0;
reg delay_line_Q_4_ce0;
reg delay_line_I_5_ce0;
reg delay_line_Q_5_ce0;
reg delay_line_I_6_ce0;
reg delay_line_Q_6_ce0;
reg delay_line_I_7_ce0;
reg delay_line_Q_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln91_fu_684_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] h_V_address0;
reg    h_V_ce0;
wire   [14:0] h_V_q0;
wire   [7:0] h_V_address1;
reg    h_V_ce1;
wire   [14:0] h_V_q1;
wire   [7:0] h_V_address2;
reg    h_V_ce2;
wire   [14:0] h_V_q2;
wire   [7:0] h_V_address3;
reg    h_V_ce3;
wire   [14:0] h_V_q3;
wire   [7:0] h_V_address4;
reg    h_V_ce4;
wire   [14:0] h_V_q4;
wire   [7:0] h_V_address5;
reg    h_V_ce5;
wire   [14:0] h_V_q5;
wire   [7:0] h_V_address6;
reg    h_V_ce6;
wire   [14:0] h_V_q6;
wire   [7:0] h_V_address7;
reg    h_V_ce7;
wire   [14:0] h_V_q7;
wire   [63:0] zext_ln1271_fu_658_p1;
reg   [63:0] zext_ln1271_reg_1147;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] zext_ln1271_reg_1147_pp0_iter1_reg;
reg   [63:0] zext_ln1271_reg_1147_pp0_iter2_reg;
reg   [63:0] zext_ln1271_reg_1147_pp0_iter3_reg;
reg   [0:0] icmp_ln91_reg_1182;
reg   [0:0] icmp_ln91_reg_1182_pp0_iter1_reg;
reg   [0:0] icmp_ln91_reg_1182_pp0_iter2_reg;
reg   [0:0] icmp_ln91_reg_1182_pp0_iter3_reg;
wire  signed [32:0] sext_ln1273_fu_776_p1;
wire  signed [32:0] sext_ln1273_1_fu_788_p1;
wire  signed [32:0] sext_ln1273_2_fu_800_p1;
wire  signed [32:0] sext_ln1273_3_fu_812_p1;
wire  signed [32:0] sext_ln1273_4_fu_824_p1;
wire  signed [32:0] sext_ln1273_5_fu_836_p1;
wire  signed [32:0] sext_ln1273_6_fu_848_p1;
wire  signed [32:0] sext_ln1273_7_fu_860_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] i_2_cast_fu_643_p1;
wire   [63:0] zext_ln91_fu_690_p1;
wire   [63:0] zext_ln1271_1_fu_701_p1;
wire   [63:0] zext_ln1271_2_fu_712_p1;
wire   [63:0] zext_ln1271_3_fu_723_p1;
wire   [63:0] zext_ln1271_4_fu_734_p1;
wire   [63:0] zext_ln1271_5_fu_745_p1;
wire   [63:0] zext_ln1271_6_fu_756_p1;
reg   [7:0] i_fu_118;
wire   [7:0] add_ln91_fu_761_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_1;
wire   [4:0] lshr_ln2_fu_648_p4;
wire   [7:0] or_ln91_fu_678_p2;
wire   [7:0] or_ln91_1_fu_695_p2;
wire   [7:0] or_ln91_2_fu_706_p2;
wire   [7:0] or_ln91_3_fu_717_p2;
wire   [7:0] or_ln91_4_fu_728_p2;
wire   [7:0] or_ln91_5_fu_739_p2;
wire   [7:0] or_ln91_6_fu_750_p2;
wire  signed [32:0] grp_fu_1028_p2;
wire  signed [32:0] grp_fu_1035_p2;
wire  signed [32:0] grp_fu_1042_p2;
wire  signed [32:0] grp_fu_1049_p2;
wire  signed [32:0] grp_fu_1056_p2;
wire  signed [32:0] grp_fu_1063_p2;
wire  signed [32:0] grp_fu_1070_p2;
wire  signed [32:0] grp_fu_1077_p2;
wire  signed [32:0] grp_fu_1084_p2;
wire  signed [32:0] grp_fu_1091_p2;
wire  signed [32:0] grp_fu_1098_p2;
wire  signed [32:0] grp_fu_1105_p2;
wire  signed [32:0] grp_fu_1112_p2;
wire  signed [32:0] grp_fu_1119_p2;
wire  signed [32:0] grp_fu_1126_p2;
wire  signed [32:0] grp_fu_1133_p2;
wire  signed [14:0] grp_fu_1028_p0;
wire  signed [14:0] grp_fu_1035_p1;
wire  signed [14:0] grp_fu_1042_p0;
wire  signed [14:0] grp_fu_1049_p1;
wire  signed [14:0] grp_fu_1056_p0;
wire  signed [14:0] grp_fu_1063_p1;
wire  signed [14:0] grp_fu_1070_p0;
wire  signed [14:0] grp_fu_1077_p1;
wire  signed [14:0] grp_fu_1084_p0;
wire  signed [14:0] grp_fu_1091_p1;
wire  signed [14:0] grp_fu_1098_p0;
wire  signed [14:0] grp_fu_1105_p1;
wire  signed [14:0] grp_fu_1112_p0;
wire  signed [14:0] grp_fu_1119_p1;
wire  signed [14:0] grp_fu_1126_p0;
wire  signed [14:0] grp_fu_1133_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_receiver_Pipeline_VITIS_LOOP_91_3_h_V_ROM_AUTO_1R #(
    .DataWidth( 15 ),
    .AddressRange( 193 ),
    .AddressWidth( 8 ))
h_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(h_V_address0),
    .ce0(h_V_ce0),
    .q0(h_V_q0),
    .address1(h_V_address1),
    .ce1(h_V_ce1),
    .q1(h_V_q1),
    .address2(h_V_address2),
    .ce2(h_V_ce2),
    .q2(h_V_q2),
    .address3(h_V_address3),
    .ce3(h_V_ce3),
    .q3(h_V_q3),
    .address4(h_V_address4),
    .ce4(h_V_ce4),
    .q4(h_V_q4),
    .address5(h_V_address5),
    .ce5(h_V_ce5),
    .q5(h_V_q5),
    .address6(h_V_address6),
    .ce6(h_V_ce6),
    .q6(h_V_q6),
    .address7(h_V_address7),
    .ce7(h_V_ce7),
    .q7(h_V_q7)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1028_p0),
    .din1(delay_line_I_0_q0),
    .ce(1'b1),
    .dout(grp_fu_1028_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_0_q0),
    .din1(grp_fu_1035_p1),
    .ce(1'b1),
    .dout(grp_fu_1035_p2)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1042_p0),
    .din1(delay_line_I_1_q0),
    .ce(1'b1),
    .dout(grp_fu_1042_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_1_q0),
    .din1(grp_fu_1049_p1),
    .ce(1'b1),
    .dout(grp_fu_1049_p2)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1056_p0),
    .din1(delay_line_I_2_q0),
    .ce(1'b1),
    .dout(grp_fu_1056_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_2_q0),
    .din1(grp_fu_1063_p1),
    .ce(1'b1),
    .dout(grp_fu_1063_p2)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1070_p0),
    .din1(delay_line_I_3_q0),
    .ce(1'b1),
    .dout(grp_fu_1070_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_3_q0),
    .din1(grp_fu_1077_p1),
    .ce(1'b1),
    .dout(grp_fu_1077_p2)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1084_p0),
    .din1(delay_line_I_4_q0),
    .ce(1'b1),
    .dout(grp_fu_1084_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_4_q0),
    .din1(grp_fu_1091_p1),
    .ce(1'b1),
    .dout(grp_fu_1091_p2)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1098_p0),
    .din1(delay_line_I_5_q0),
    .ce(1'b1),
    .dout(grp_fu_1098_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_5_q0),
    .din1(grp_fu_1105_p1),
    .ce(1'b1),
    .dout(grp_fu_1105_p2)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1112_p0),
    .din1(delay_line_I_6_q0),
    .ce(1'b1),
    .dout(grp_fu_1112_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_6_q0),
    .din1(grp_fu_1119_p1),
    .ce(1'b1),
    .dout(grp_fu_1119_p2)
);

receiver_mul_mul_15s_18s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 33 ))
mul_mul_15s_18s_33_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1126_p0),
    .din1(delay_line_I_7_q0),
    .ce(1'b1),
    .dout(grp_fu_1126_p2)
);

receiver_mul_mul_18s_15s_33_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 33 ))
mul_mul_18s_15s_33_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(delay_line_Q_7_q0),
    .din1(grp_fu_1133_p1),
    .ce(1'b1),
    .dout(grp_fu_1133_p2)
);

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln91_fu_684_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_118 <= add_ln91_fu_761_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_118 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln91_reg_1182 <= icmp_ln91_fu_684_p2;
        icmp_ln91_reg_1182_pp0_iter1_reg <= icmp_ln91_reg_1182;
        zext_ln1271_reg_1147[4 : 0] <= zext_ln1271_fu_658_p1[4 : 0];
        zext_ln1271_reg_1147_pp0_iter1_reg[4 : 0] <= zext_ln1271_reg_1147[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln91_reg_1182_pp0_iter2_reg <= icmp_ln91_reg_1182_pp0_iter1_reg;
        icmp_ln91_reg_1182_pp0_iter3_reg <= icmp_ln91_reg_1182_pp0_iter2_reg;
        zext_ln1271_reg_1147_pp0_iter2_reg[4 : 0] <= zext_ln1271_reg_1147_pp0_iter1_reg[4 : 0];
        zext_ln1271_reg_1147_pp0_iter3_reg[4 : 0] <= zext_ln1271_reg_1147_pp0_iter2_reg[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln91_fu_684_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_0_ce0 = 1'b1;
    end else begin
        delay_line_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_1_ce0 = 1'b1;
    end else begin
        delay_line_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_2_ce0 = 1'b1;
    end else begin
        delay_line_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_3_ce0 = 1'b1;
    end else begin
        delay_line_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_4_ce0 = 1'b1;
    end else begin
        delay_line_I_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_5_ce0 = 1'b1;
    end else begin
        delay_line_I_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_6_ce0 = 1'b1;
    end else begin
        delay_line_I_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_7_ce0 = 1'b1;
    end else begin
        delay_line_I_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_0_ce0 = 1'b1;
    end else begin
        delay_line_Q_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_1_ce0 = 1'b1;
    end else begin
        delay_line_Q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_2_ce0 = 1'b1;
    end else begin
        delay_line_Q_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_3_ce0 = 1'b1;
    end else begin
        delay_line_Q_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_4_ce0 = 1'b1;
    end else begin
        delay_line_Q_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_5_ce0 = 1'b1;
    end else begin
        delay_line_Q_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_6_ce0 = 1'b1;
    end else begin
        delay_line_Q_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_7_ce0 = 1'b1;
    end else begin
        delay_line_Q_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_10_ce0 = 1'b1;
    end else begin
        filt_I_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_10_we0 = 1'b1;
    end else begin
        filt_I_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_11_ce0 = 1'b1;
    end else begin
        filt_I_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_11_we0 = 1'b1;
    end else begin
        filt_I_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_12_ce0 = 1'b1;
    end else begin
        filt_I_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_12_we0 = 1'b1;
    end else begin
        filt_I_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_13_ce0 = 1'b1;
    end else begin
        filt_I_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_13_we0 = 1'b1;
    end else begin
        filt_I_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_14_ce0 = 1'b1;
    end else begin
        filt_I_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_14_we0 = 1'b1;
    end else begin
        filt_I_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_8_ce0 = 1'b1;
    end else begin
        filt_I_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_8_we0 = 1'b1;
    end else begin
        filt_I_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_9_ce0 = 1'b1;
    end else begin
        filt_I_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_9_we0 = 1'b1;
    end else begin
        filt_I_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_ce0 = 1'b1;
    end else begin
        filt_I_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_I_V_we0 = 1'b1;
    end else begin
        filt_I_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_10_ce0 = 1'b1;
    end else begin
        filt_Q_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_10_we0 = 1'b1;
    end else begin
        filt_Q_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_11_ce0 = 1'b1;
    end else begin
        filt_Q_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_11_we0 = 1'b1;
    end else begin
        filt_Q_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_12_ce0 = 1'b1;
    end else begin
        filt_Q_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_12_we0 = 1'b1;
    end else begin
        filt_Q_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_13_ce0 = 1'b1;
    end else begin
        filt_Q_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_13_we0 = 1'b1;
    end else begin
        filt_Q_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_14_ce0 = 1'b1;
    end else begin
        filt_Q_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_14_we0 = 1'b1;
    end else begin
        filt_Q_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_8_ce0 = 1'b1;
    end else begin
        filt_Q_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_8_we0 = 1'b1;
    end else begin
        filt_Q_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_9_ce0 = 1'b1;
    end else begin
        filt_Q_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln91_reg_1182_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_9_we0 = 1'b1;
    end else begin
        filt_Q_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_ce0 = 1'b1;
    end else begin
        filt_Q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        filt_Q_V_we0 = 1'b1;
    end else begin
        filt_Q_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce0 = 1'b1;
    end else begin
        h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce1 = 1'b1;
    end else begin
        h_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce2 = 1'b1;
    end else begin
        h_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce3 = 1'b1;
    end else begin
        h_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce4 = 1'b1;
    end else begin
        h_V_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce5 = 1'b1;
    end else begin
        h_V_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce6 = 1'b1;
    end else begin
        h_V_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_V_ce7 = 1'b1;
    end else begin
        h_V_ce7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln91_fu_761_p2 = (ap_sig_allocacmp_i_1 + 8'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign delay_line_I_0_address0 = zext_ln1271_fu_658_p1;

assign delay_line_I_1_address0 = zext_ln1271_fu_658_p1;

assign delay_line_I_2_address0 = zext_ln1271_fu_658_p1;

assign delay_line_I_3_address0 = zext_ln1271_fu_658_p1;

assign delay_line_I_4_address0 = zext_ln1271_fu_658_p1;

assign delay_line_I_5_address0 = zext_ln1271_fu_658_p1;

assign delay_line_I_6_address0 = zext_ln1271_fu_658_p1;

assign delay_line_I_7_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_0_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_1_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_2_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_3_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_4_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_5_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_6_address0 = zext_ln1271_fu_658_p1;

assign delay_line_Q_7_address0 = zext_ln1271_fu_658_p1;

assign filt_I_V_10_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_10_d0 = {{grp_fu_1070_p2[32:16]}};

assign filt_I_V_11_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_11_d0 = {{grp_fu_1084_p2[32:16]}};

assign filt_I_V_12_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_12_d0 = {{grp_fu_1098_p2[32:16]}};

assign filt_I_V_13_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_13_d0 = {{grp_fu_1112_p2[32:16]}};

assign filt_I_V_14_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_14_d0 = {{grp_fu_1126_p2[32:16]}};

assign filt_I_V_8_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_8_d0 = {{grp_fu_1042_p2[32:16]}};

assign filt_I_V_9_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_9_d0 = {{grp_fu_1056_p2[32:16]}};

assign filt_I_V_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_I_V_d0 = {{grp_fu_1028_p2[32:16]}};

assign filt_Q_V_10_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_10_d0 = {{grp_fu_1077_p2[32:16]}};

assign filt_Q_V_11_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_11_d0 = {{grp_fu_1091_p2[32:16]}};

assign filt_Q_V_12_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_12_d0 = {{grp_fu_1105_p2[32:16]}};

assign filt_Q_V_13_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_13_d0 = {{grp_fu_1119_p2[32:16]}};

assign filt_Q_V_14_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_14_d0 = {{grp_fu_1133_p2[32:16]}};

assign filt_Q_V_8_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_8_d0 = {{grp_fu_1049_p2[32:16]}};

assign filt_Q_V_9_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_9_d0 = {{grp_fu_1063_p2[32:16]}};

assign filt_Q_V_address0 = zext_ln1271_reg_1147_pp0_iter3_reg;

assign filt_Q_V_d0 = {{grp_fu_1035_p2[32:16]}};

assign grp_fu_1028_p0 = sext_ln1273_fu_776_p1;

assign grp_fu_1035_p1 = sext_ln1273_fu_776_p1;

assign grp_fu_1042_p0 = sext_ln1273_1_fu_788_p1;

assign grp_fu_1049_p1 = sext_ln1273_1_fu_788_p1;

assign grp_fu_1056_p0 = sext_ln1273_2_fu_800_p1;

assign grp_fu_1063_p1 = sext_ln1273_2_fu_800_p1;

assign grp_fu_1070_p0 = sext_ln1273_3_fu_812_p1;

assign grp_fu_1077_p1 = sext_ln1273_3_fu_812_p1;

assign grp_fu_1084_p0 = sext_ln1273_4_fu_824_p1;

assign grp_fu_1091_p1 = sext_ln1273_4_fu_824_p1;

assign grp_fu_1098_p0 = sext_ln1273_5_fu_836_p1;

assign grp_fu_1105_p1 = sext_ln1273_5_fu_836_p1;

assign grp_fu_1112_p0 = sext_ln1273_6_fu_848_p1;

assign grp_fu_1119_p1 = sext_ln1273_6_fu_848_p1;

assign grp_fu_1126_p0 = sext_ln1273_7_fu_860_p1;

assign grp_fu_1133_p1 = sext_ln1273_7_fu_860_p1;

assign h_V_address0 = zext_ln1271_6_fu_756_p1;

assign h_V_address1 = zext_ln1271_5_fu_745_p1;

assign h_V_address2 = zext_ln1271_4_fu_734_p1;

assign h_V_address3 = zext_ln1271_3_fu_723_p1;

assign h_V_address4 = zext_ln1271_2_fu_712_p1;

assign h_V_address5 = zext_ln1271_1_fu_701_p1;

assign h_V_address6 = zext_ln91_fu_690_p1;

assign h_V_address7 = i_2_cast_fu_643_p1;

assign i_2_cast_fu_643_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln91_fu_684_p2 = ((or_ln91_fu_678_p2 < 8'd193) ? 1'b1 : 1'b0);

assign lshr_ln2_fu_648_p4 = {{ap_sig_allocacmp_i_1[7:3]}};

assign or_ln91_1_fu_695_p2 = (ap_sig_allocacmp_i_1 | 8'd2);

assign or_ln91_2_fu_706_p2 = (ap_sig_allocacmp_i_1 | 8'd3);

assign or_ln91_3_fu_717_p2 = (ap_sig_allocacmp_i_1 | 8'd4);

assign or_ln91_4_fu_728_p2 = (ap_sig_allocacmp_i_1 | 8'd5);

assign or_ln91_5_fu_739_p2 = (ap_sig_allocacmp_i_1 | 8'd6);

assign or_ln91_6_fu_750_p2 = (ap_sig_allocacmp_i_1 | 8'd7);

assign or_ln91_fu_678_p2 = (ap_sig_allocacmp_i_1 | 8'd1);

assign sext_ln1273_1_fu_788_p1 = $signed(h_V_q6);

assign sext_ln1273_2_fu_800_p1 = $signed(h_V_q5);

assign sext_ln1273_3_fu_812_p1 = $signed(h_V_q4);

assign sext_ln1273_4_fu_824_p1 = $signed(h_V_q3);

assign sext_ln1273_5_fu_836_p1 = $signed(h_V_q2);

assign sext_ln1273_6_fu_848_p1 = $signed(h_V_q1);

assign sext_ln1273_7_fu_860_p1 = $signed(h_V_q0);

assign sext_ln1273_fu_776_p1 = $signed(h_V_q7);

assign zext_ln1271_1_fu_701_p1 = or_ln91_1_fu_695_p2;

assign zext_ln1271_2_fu_712_p1 = or_ln91_2_fu_706_p2;

assign zext_ln1271_3_fu_723_p1 = or_ln91_3_fu_717_p2;

assign zext_ln1271_4_fu_734_p1 = or_ln91_4_fu_728_p2;

assign zext_ln1271_5_fu_745_p1 = or_ln91_5_fu_739_p2;

assign zext_ln1271_6_fu_756_p1 = or_ln91_6_fu_750_p2;

assign zext_ln1271_fu_658_p1 = lshr_ln2_fu_648_p4;

assign zext_ln91_fu_690_p1 = or_ln91_fu_678_p2;

always @ (posedge ap_clk) begin
    zext_ln1271_reg_1147[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln1271_reg_1147_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln1271_reg_1147_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln1271_reg_1147_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_91_3
