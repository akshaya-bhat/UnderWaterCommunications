// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_63_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        delay_line_I_7_address0,
        delay_line_I_7_ce0,
        delay_line_I_7_we0,
        delay_line_I_7_d0,
        delay_line_I_7_address1,
        delay_line_I_7_ce1,
        delay_line_I_7_q1,
        delay_line_I_6_address0,
        delay_line_I_6_ce0,
        delay_line_I_6_we0,
        delay_line_I_6_d0,
        delay_line_I_6_address1,
        delay_line_I_6_ce1,
        delay_line_I_6_q1,
        delay_line_I_5_address0,
        delay_line_I_5_ce0,
        delay_line_I_5_we0,
        delay_line_I_5_d0,
        delay_line_I_5_address1,
        delay_line_I_5_ce1,
        delay_line_I_5_q1,
        delay_line_I_4_address0,
        delay_line_I_4_ce0,
        delay_line_I_4_we0,
        delay_line_I_4_d0,
        delay_line_I_4_address1,
        delay_line_I_4_ce1,
        delay_line_I_4_q1,
        delay_line_I_3_address0,
        delay_line_I_3_ce0,
        delay_line_I_3_we0,
        delay_line_I_3_d0,
        delay_line_I_3_address1,
        delay_line_I_3_ce1,
        delay_line_I_3_q1,
        delay_line_I_2_address0,
        delay_line_I_2_ce0,
        delay_line_I_2_we0,
        delay_line_I_2_d0,
        delay_line_I_2_address1,
        delay_line_I_2_ce1,
        delay_line_I_2_q1,
        delay_line_I_1_address0,
        delay_line_I_1_ce0,
        delay_line_I_1_we0,
        delay_line_I_1_d0,
        delay_line_I_1_address1,
        delay_line_I_1_ce1,
        delay_line_I_1_q1,
        delay_line_I_0_address0,
        delay_line_I_0_ce0,
        delay_line_I_0_we0,
        delay_line_I_0_d0,
        delay_line_I_0_address1,
        delay_line_I_0_ce1,
        delay_line_I_0_q1,
        delay_line_Q_7_address0,
        delay_line_Q_7_ce0,
        delay_line_Q_7_we0,
        delay_line_Q_7_d0,
        delay_line_Q_7_address1,
        delay_line_Q_7_ce1,
        delay_line_Q_7_q1,
        delay_line_Q_6_address0,
        delay_line_Q_6_ce0,
        delay_line_Q_6_we0,
        delay_line_Q_6_d0,
        delay_line_Q_6_address1,
        delay_line_Q_6_ce1,
        delay_line_Q_6_q1,
        delay_line_Q_5_address0,
        delay_line_Q_5_ce0,
        delay_line_Q_5_we0,
        delay_line_Q_5_d0,
        delay_line_Q_5_address1,
        delay_line_Q_5_ce1,
        delay_line_Q_5_q1,
        delay_line_Q_4_address0,
        delay_line_Q_4_ce0,
        delay_line_Q_4_we0,
        delay_line_Q_4_d0,
        delay_line_Q_4_address1,
        delay_line_Q_4_ce1,
        delay_line_Q_4_q1,
        delay_line_Q_3_address0,
        delay_line_Q_3_ce0,
        delay_line_Q_3_we0,
        delay_line_Q_3_d0,
        delay_line_Q_3_address1,
        delay_line_Q_3_ce1,
        delay_line_Q_3_q1,
        delay_line_Q_2_address0,
        delay_line_Q_2_ce0,
        delay_line_Q_2_we0,
        delay_line_Q_2_d0,
        delay_line_Q_2_address1,
        delay_line_Q_2_ce1,
        delay_line_Q_2_q1,
        delay_line_Q_1_address0,
        delay_line_Q_1_ce0,
        delay_line_Q_1_we0,
        delay_line_Q_1_d0,
        delay_line_Q_1_address1,
        delay_line_Q_1_ce1,
        delay_line_Q_1_q1,
        delay_line_Q_0_address0,
        delay_line_Q_0_ce0,
        delay_line_Q_0_we0,
        delay_line_Q_0_d0,
        delay_line_Q_0_address1,
        delay_line_Q_0_ce1,
        delay_line_Q_0_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] delay_line_I_7_address0;
output   delay_line_I_7_ce0;
output   delay_line_I_7_we0;
output  [17:0] delay_line_I_7_d0;
output  [4:0] delay_line_I_7_address1;
output   delay_line_I_7_ce1;
input  [17:0] delay_line_I_7_q1;
output  [4:0] delay_line_I_6_address0;
output   delay_line_I_6_ce0;
output   delay_line_I_6_we0;
output  [17:0] delay_line_I_6_d0;
output  [4:0] delay_line_I_6_address1;
output   delay_line_I_6_ce1;
input  [17:0] delay_line_I_6_q1;
output  [4:0] delay_line_I_5_address0;
output   delay_line_I_5_ce0;
output   delay_line_I_5_we0;
output  [17:0] delay_line_I_5_d0;
output  [4:0] delay_line_I_5_address1;
output   delay_line_I_5_ce1;
input  [17:0] delay_line_I_5_q1;
output  [4:0] delay_line_I_4_address0;
output   delay_line_I_4_ce0;
output   delay_line_I_4_we0;
output  [17:0] delay_line_I_4_d0;
output  [4:0] delay_line_I_4_address1;
output   delay_line_I_4_ce1;
input  [17:0] delay_line_I_4_q1;
output  [4:0] delay_line_I_3_address0;
output   delay_line_I_3_ce0;
output   delay_line_I_3_we0;
output  [17:0] delay_line_I_3_d0;
output  [4:0] delay_line_I_3_address1;
output   delay_line_I_3_ce1;
input  [17:0] delay_line_I_3_q1;
output  [4:0] delay_line_I_2_address0;
output   delay_line_I_2_ce0;
output   delay_line_I_2_we0;
output  [17:0] delay_line_I_2_d0;
output  [4:0] delay_line_I_2_address1;
output   delay_line_I_2_ce1;
input  [17:0] delay_line_I_2_q1;
output  [4:0] delay_line_I_1_address0;
output   delay_line_I_1_ce0;
output   delay_line_I_1_we0;
output  [17:0] delay_line_I_1_d0;
output  [4:0] delay_line_I_1_address1;
output   delay_line_I_1_ce1;
input  [17:0] delay_line_I_1_q1;
output  [4:0] delay_line_I_0_address0;
output   delay_line_I_0_ce0;
output   delay_line_I_0_we0;
output  [17:0] delay_line_I_0_d0;
output  [4:0] delay_line_I_0_address1;
output   delay_line_I_0_ce1;
input  [17:0] delay_line_I_0_q1;
output  [4:0] delay_line_Q_7_address0;
output   delay_line_Q_7_ce0;
output   delay_line_Q_7_we0;
output  [17:0] delay_line_Q_7_d0;
output  [4:0] delay_line_Q_7_address1;
output   delay_line_Q_7_ce1;
input  [17:0] delay_line_Q_7_q1;
output  [4:0] delay_line_Q_6_address0;
output   delay_line_Q_6_ce0;
output   delay_line_Q_6_we0;
output  [17:0] delay_line_Q_6_d0;
output  [4:0] delay_line_Q_6_address1;
output   delay_line_Q_6_ce1;
input  [17:0] delay_line_Q_6_q1;
output  [4:0] delay_line_Q_5_address0;
output   delay_line_Q_5_ce0;
output   delay_line_Q_5_we0;
output  [17:0] delay_line_Q_5_d0;
output  [4:0] delay_line_Q_5_address1;
output   delay_line_Q_5_ce1;
input  [17:0] delay_line_Q_5_q1;
output  [4:0] delay_line_Q_4_address0;
output   delay_line_Q_4_ce0;
output   delay_line_Q_4_we0;
output  [17:0] delay_line_Q_4_d0;
output  [4:0] delay_line_Q_4_address1;
output   delay_line_Q_4_ce1;
input  [17:0] delay_line_Q_4_q1;
output  [4:0] delay_line_Q_3_address0;
output   delay_line_Q_3_ce0;
output   delay_line_Q_3_we0;
output  [17:0] delay_line_Q_3_d0;
output  [4:0] delay_line_Q_3_address1;
output   delay_line_Q_3_ce1;
input  [17:0] delay_line_Q_3_q1;
output  [4:0] delay_line_Q_2_address0;
output   delay_line_Q_2_ce0;
output   delay_line_Q_2_we0;
output  [17:0] delay_line_Q_2_d0;
output  [4:0] delay_line_Q_2_address1;
output   delay_line_Q_2_ce1;
input  [17:0] delay_line_Q_2_q1;
output  [4:0] delay_line_Q_1_address0;
output   delay_line_Q_1_ce0;
output   delay_line_Q_1_we0;
output  [17:0] delay_line_Q_1_d0;
output  [4:0] delay_line_Q_1_address1;
output   delay_line_Q_1_ce1;
input  [17:0] delay_line_Q_1_q1;
output  [4:0] delay_line_Q_0_address0;
output   delay_line_Q_0_ce0;
output   delay_line_Q_0_we0;
output  [17:0] delay_line_Q_0_d0;
output  [4:0] delay_line_Q_0_address1;
output   delay_line_Q_0_ce1;
input  [17:0] delay_line_Q_0_q1;

reg ap_idle;
reg delay_line_I_7_ce0;
reg delay_line_I_7_we0;
reg delay_line_I_7_ce1;
reg delay_line_I_6_ce0;
reg delay_line_I_6_we0;
reg delay_line_I_6_ce1;
reg delay_line_I_5_ce0;
reg delay_line_I_5_we0;
reg delay_line_I_5_ce1;
reg delay_line_I_4_ce0;
reg delay_line_I_4_we0;
reg delay_line_I_4_ce1;
reg delay_line_I_3_ce0;
reg delay_line_I_3_we0;
reg delay_line_I_3_ce1;
reg delay_line_I_2_ce0;
reg delay_line_I_2_we0;
reg delay_line_I_2_ce1;
reg delay_line_I_1_ce0;
reg delay_line_I_1_we0;
reg delay_line_I_1_ce1;
reg delay_line_I_0_ce0;
reg delay_line_I_0_we0;
reg delay_line_I_0_ce1;
reg delay_line_Q_7_ce0;
reg delay_line_Q_7_we0;
reg delay_line_Q_7_ce1;
reg delay_line_Q_6_ce0;
reg delay_line_Q_6_we0;
reg delay_line_Q_6_ce1;
reg delay_line_Q_5_ce0;
reg delay_line_Q_5_we0;
reg delay_line_Q_5_ce1;
reg delay_line_Q_4_ce0;
reg delay_line_Q_4_we0;
reg delay_line_Q_4_ce1;
reg delay_line_Q_3_ce0;
reg delay_line_Q_3_we0;
reg delay_line_Q_3_ce1;
reg delay_line_Q_2_ce0;
reg delay_line_Q_2_we0;
reg delay_line_Q_2_ce1;
reg delay_line_Q_1_ce0;
reg delay_line_Q_1_we0;
reg delay_line_Q_1_ce1;
reg delay_line_Q_0_ce0;
reg delay_line_Q_0_we0;
reg delay_line_Q_0_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln63_fu_636_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] lshr_ln1_reg_1464;
reg   [4:0] delay_line_I_7_addr_reg_1469;
wire   [0:0] addr_cmp77_fu_677_p2;
reg   [0:0] addr_cmp77_reg_1475;
reg   [4:0] delay_line_Q_7_addr_reg_1480;
reg   [4:0] delay_line_I_6_addr_reg_1486;
reg   [4:0] delay_line_Q_6_addr_reg_1492;
reg   [4:0] delay_line_I_5_addr_reg_1498;
reg   [4:0] delay_line_Q_5_addr_reg_1504;
reg   [4:0] delay_line_I_4_addr_reg_1510;
reg   [4:0] delay_line_Q_4_addr_reg_1516;
reg   [4:0] delay_line_I_3_addr_reg_1522;
reg   [4:0] delay_line_Q_3_addr_reg_1528;
reg   [4:0] delay_line_I_2_addr_reg_1534;
reg   [4:0] delay_line_Q_2_addr_reg_1540;
reg   [4:0] delay_line_I_1_addr_reg_1546;
reg   [4:0] delay_line_Q_1_addr_reg_1552;
wire   [0:0] addr_cmp71_fu_840_p2;
reg   [0:0] addr_cmp71_reg_1568;
wire   [0:0] addr_cmp65_fu_849_p2;
reg   [0:0] addr_cmp65_reg_1573;
wire   [0:0] addr_cmp59_fu_858_p2;
reg   [0:0] addr_cmp59_reg_1578;
wire   [0:0] addr_cmp53_fu_867_p2;
reg   [0:0] addr_cmp53_reg_1583;
wire   [0:0] addr_cmp47_fu_876_p2;
reg   [0:0] addr_cmp47_reg_1588;
wire   [0:0] addr_cmp41_fu_885_p2;
reg   [0:0] addr_cmp41_reg_1593;
wire   [0:0] addr_cmp35_fu_929_p2;
reg   [0:0] addr_cmp35_reg_1598;
wire   [0:0] addr_cmp29_fu_938_p2;
reg   [0:0] addr_cmp29_reg_1603;
wire   [0:0] addr_cmp23_fu_952_p2;
reg   [0:0] addr_cmp23_reg_1608;
wire   [0:0] addr_cmp17_fu_966_p2;
reg   [0:0] addr_cmp17_reg_1613;
wire   [0:0] addr_cmp11_fu_980_p2;
reg   [0:0] addr_cmp11_reg_1618;
wire   [0:0] addr_cmp5_fu_994_p2;
reg   [0:0] addr_cmp5_reg_1623;
wire   [0:0] addr_cmp_fu_1008_p2;
reg   [0:0] addr_cmp_reg_1628;
wire   [63:0] zext_ln65_fu_668_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln65_1_fu_699_p1;
wire   [63:0] zext_ln65_2_fu_721_p1;
wire   [63:0] zext_ln65_3_fu_743_p1;
wire   [63:0] zext_ln65_4_fu_765_p1;
wire   [63:0] zext_ln65_5_fu_787_p1;
wire   [63:0] zext_ln65_6_fu_809_p1;
wire   [63:0] zext_ln65_7_fu_831_p1;
wire   [63:0] zext_ln63_fu_1029_p1;
reg   [63:0] reuse_addr_reg74_fu_82;
wire    ap_loop_init;
reg   [17:0] reuse_reg73_fu_86;
wire   [17:0] reuse_select72_fu_1048_p3;
reg   [63:0] reuse_addr_reg68_fu_90;
reg   [17:0] reuse_reg67_fu_94;
wire   [17:0] reuse_select66_fu_1059_p3;
reg   [63:0] reuse_addr_reg62_fu_98;
reg   [17:0] reuse_reg61_fu_102;
wire   [17:0] reuse_select60_fu_1070_p3;
reg   [63:0] reuse_addr_reg56_fu_106;
reg   [17:0] reuse_reg55_fu_110;
wire   [17:0] reuse_select54_fu_1081_p3;
reg   [63:0] reuse_addr_reg50_fu_114;
reg   [17:0] reuse_reg49_fu_118;
wire   [17:0] reuse_select48_fu_1092_p3;
reg   [63:0] reuse_addr_reg44_fu_122;
reg   [17:0] reuse_reg43_fu_126;
wire   [17:0] reuse_select42_fu_1103_p3;
reg   [63:0] reuse_addr_reg38_fu_130;
reg   [17:0] reuse_reg37_fu_134;
reg   [63:0] reuse_addr_reg32_fu_138;
reg   [17:0] reuse_reg31_fu_142;
wire   [17:0] reuse_select30_fu_1160_p3;
reg   [63:0] reuse_addr_reg26_fu_146;
reg   [17:0] reuse_reg25_fu_150;
wire   [17:0] reuse_select24_fu_1176_p3;
reg   [63:0] reuse_addr_reg20_fu_154;
reg   [17:0] reuse_reg19_fu_158;
wire   [17:0] reuse_select18_fu_1192_p3;
reg   [63:0] reuse_addr_reg14_fu_162;
reg   [17:0] reuse_reg13_fu_166;
wire   [17:0] reuse_select12_fu_1208_p3;
reg   [63:0] reuse_addr_reg8_fu_170;
reg   [17:0] reuse_reg7_fu_174;
wire   [17:0] reuse_select6_fu_1224_p3;
reg   [63:0] reuse_addr_reg2_fu_178;
reg   [17:0] reuse_reg1_fu_182;
wire   [17:0] reuse_select_fu_1240_p3;
reg   [63:0] reuse_addr_reg_fu_186;
reg   [17:0] reuse_reg_fu_190;
reg   [7:0] i_1_fu_194;
wire   [7:0] add_ln65_7_fu_815_p2;
wire   [7:0] add_ln65_fu_652_p2;
wire   [4:0] lshr_ln2_fu_658_p4;
wire   [7:0] add_ln65_1_fu_683_p2;
wire   [4:0] lshr_ln65_1_fu_689_p4;
wire   [7:0] add_ln65_2_fu_705_p2;
wire   [4:0] lshr_ln65_2_fu_711_p4;
wire   [7:0] add_ln65_3_fu_727_p2;
wire   [4:0] lshr_ln65_3_fu_733_p4;
wire   [7:0] add_ln65_4_fu_749_p2;
wire   [4:0] lshr_ln65_4_fu_755_p4;
wire   [7:0] add_ln65_5_fu_771_p2;
wire   [4:0] lshr_ln65_5_fu_777_p4;
wire   [7:0] add_ln65_6_fu_793_p2;
wire   [4:0] lshr_ln65_6_fu_799_p4;
wire   [4:0] lshr_ln65_7_fu_821_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_1_fu_194 <= 8'd192;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_1_fu_194 <= add_ln65_7_fu_815_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg14_fu_162 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg14_fu_162 <= zext_ln65_3_fu_743_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg20_fu_154 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg20_fu_154 <= zext_ln65_2_fu_721_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg26_fu_146 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg26_fu_146 <= zext_ln65_1_fu_699_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg2_fu_178 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg2_fu_178 <= zext_ln65_5_fu_787_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg32_fu_138 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg32_fu_138 <= zext_ln65_fu_668_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg38_fu_130 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg38_fu_130 <= zext_ln65_6_fu_809_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg44_fu_122 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg44_fu_122 <= zext_ln65_5_fu_787_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg50_fu_114 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg50_fu_114 <= zext_ln65_4_fu_765_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg56_fu_106 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg56_fu_106 <= zext_ln65_3_fu_743_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg62_fu_98 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg62_fu_98 <= zext_ln65_2_fu_721_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg68_fu_90 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg68_fu_90 <= zext_ln65_1_fu_699_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg74_fu_82 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg74_fu_82 <= zext_ln65_fu_668_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg8_fu_170 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg8_fu_170 <= zext_ln65_4_fu_765_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_186 <= 64'd18446744073709551615;
        end else if (((icmp_ln63_fu_636_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg_fu_186 <= zext_ln65_6_fu_809_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg13_fu_166 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg13_fu_166 <= reuse_select12_fu_1208_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg19_fu_158 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg19_fu_158 <= reuse_select18_fu_1192_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg1_fu_182 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg1_fu_182 <= reuse_select_fu_1240_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg25_fu_150 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg25_fu_150 <= reuse_select24_fu_1176_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg31_fu_142 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg31_fu_142 <= reuse_select30_fu_1160_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg37_fu_134 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg37_fu_134 <= delay_line_I_0_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg43_fu_126 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg43_fu_126 <= reuse_select42_fu_1103_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg49_fu_118 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg49_fu_118 <= reuse_select48_fu_1092_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg55_fu_110 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg55_fu_110 <= reuse_select54_fu_1081_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg61_fu_102 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg61_fu_102 <= reuse_select60_fu_1070_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg67_fu_94 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg67_fu_94 <= reuse_select66_fu_1059_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg73_fu_86 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg73_fu_86 <= reuse_select72_fu_1048_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg7_fu_174 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg7_fu_174 <= reuse_select6_fu_1224_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_190 <= 18'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_190 <= delay_line_Q_0_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_636_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp11_reg_1618 <= addr_cmp11_fu_980_p2;
        addr_cmp17_reg_1613 <= addr_cmp17_fu_966_p2;
        addr_cmp23_reg_1608 <= addr_cmp23_fu_952_p2;
        addr_cmp29_reg_1603 <= addr_cmp29_fu_938_p2;
        addr_cmp35_reg_1598 <= addr_cmp35_fu_929_p2;
        addr_cmp41_reg_1593 <= addr_cmp41_fu_885_p2;
        addr_cmp47_reg_1588 <= addr_cmp47_fu_876_p2;
        addr_cmp53_reg_1583 <= addr_cmp53_fu_867_p2;
        addr_cmp59_reg_1578 <= addr_cmp59_fu_858_p2;
        addr_cmp5_reg_1623 <= addr_cmp5_fu_994_p2;
        addr_cmp65_reg_1573 <= addr_cmp65_fu_849_p2;
        addr_cmp71_reg_1568 <= addr_cmp71_fu_840_p2;
        addr_cmp77_reg_1475 <= addr_cmp77_fu_677_p2;
        addr_cmp_reg_1628 <= addr_cmp_fu_1008_p2;
        delay_line_I_1_addr_reg_1546 <= zext_ln65_6_fu_809_p1;
        delay_line_I_2_addr_reg_1534 <= zext_ln65_5_fu_787_p1;
        delay_line_I_3_addr_reg_1522 <= zext_ln65_4_fu_765_p1;
        delay_line_I_4_addr_reg_1510 <= zext_ln65_3_fu_743_p1;
        delay_line_I_5_addr_reg_1498 <= zext_ln65_2_fu_721_p1;
        delay_line_I_6_addr_reg_1486 <= zext_ln65_1_fu_699_p1;
        delay_line_I_7_addr_reg_1469 <= zext_ln65_fu_668_p1;
        delay_line_Q_1_addr_reg_1552 <= zext_ln65_6_fu_809_p1;
        delay_line_Q_2_addr_reg_1540 <= zext_ln65_5_fu_787_p1;
        delay_line_Q_3_addr_reg_1528 <= zext_ln65_4_fu_765_p1;
        delay_line_Q_4_addr_reg_1516 <= zext_ln65_3_fu_743_p1;
        delay_line_Q_5_addr_reg_1504 <= zext_ln65_2_fu_721_p1;
        delay_line_Q_6_addr_reg_1492 <= zext_ln65_1_fu_699_p1;
        delay_line_Q_7_addr_reg_1480 <= zext_ln65_fu_668_p1;
        lshr_ln1_reg_1464 <= {{i_1_fu_194[7:3]}};
    end
end

always @ (*) begin
    if (((icmp_ln63_fu_636_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_0_ce0 = 1'b1;
    end else begin
        delay_line_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_0_ce1 = 1'b1;
    end else begin
        delay_line_I_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_0_we0 = 1'b1;
    end else begin
        delay_line_I_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_1_ce0 = 1'b1;
    end else begin
        delay_line_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_1_ce1 = 1'b1;
    end else begin
        delay_line_I_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_1_we0 = 1'b1;
    end else begin
        delay_line_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_2_ce0 = 1'b1;
    end else begin
        delay_line_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_2_ce1 = 1'b1;
    end else begin
        delay_line_I_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_2_we0 = 1'b1;
    end else begin
        delay_line_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_3_ce0 = 1'b1;
    end else begin
        delay_line_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_3_ce1 = 1'b1;
    end else begin
        delay_line_I_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_3_we0 = 1'b1;
    end else begin
        delay_line_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_4_ce0 = 1'b1;
    end else begin
        delay_line_I_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_4_ce1 = 1'b1;
    end else begin
        delay_line_I_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_4_we0 = 1'b1;
    end else begin
        delay_line_I_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_5_ce0 = 1'b1;
    end else begin
        delay_line_I_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_5_ce1 = 1'b1;
    end else begin
        delay_line_I_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_5_we0 = 1'b1;
    end else begin
        delay_line_I_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_6_ce0 = 1'b1;
    end else begin
        delay_line_I_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_6_ce1 = 1'b1;
    end else begin
        delay_line_I_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_6_we0 = 1'b1;
    end else begin
        delay_line_I_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_7_ce0 = 1'b1;
    end else begin
        delay_line_I_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_I_7_ce1 = 1'b1;
    end else begin
        delay_line_I_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_I_7_we0 = 1'b1;
    end else begin
        delay_line_I_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_0_ce0 = 1'b1;
    end else begin
        delay_line_Q_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_0_ce1 = 1'b1;
    end else begin
        delay_line_Q_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_0_we0 = 1'b1;
    end else begin
        delay_line_Q_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_1_ce0 = 1'b1;
    end else begin
        delay_line_Q_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_1_ce1 = 1'b1;
    end else begin
        delay_line_Q_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_1_we0 = 1'b1;
    end else begin
        delay_line_Q_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_2_ce0 = 1'b1;
    end else begin
        delay_line_Q_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_2_ce1 = 1'b1;
    end else begin
        delay_line_Q_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_2_we0 = 1'b1;
    end else begin
        delay_line_Q_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_3_ce0 = 1'b1;
    end else begin
        delay_line_Q_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_3_ce1 = 1'b1;
    end else begin
        delay_line_Q_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_3_we0 = 1'b1;
    end else begin
        delay_line_Q_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_4_ce0 = 1'b1;
    end else begin
        delay_line_Q_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_4_ce1 = 1'b1;
    end else begin
        delay_line_Q_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_4_we0 = 1'b1;
    end else begin
        delay_line_Q_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_5_ce0 = 1'b1;
    end else begin
        delay_line_Q_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_5_ce1 = 1'b1;
    end else begin
        delay_line_Q_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_5_we0 = 1'b1;
    end else begin
        delay_line_Q_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_6_ce0 = 1'b1;
    end else begin
        delay_line_Q_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_6_ce1 = 1'b1;
    end else begin
        delay_line_Q_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_6_we0 = 1'b1;
    end else begin
        delay_line_Q_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_7_ce0 = 1'b1;
    end else begin
        delay_line_Q_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_line_Q_7_ce1 = 1'b1;
    end else begin
        delay_line_Q_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        delay_line_Q_7_we0 = 1'b1;
    end else begin
        delay_line_Q_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln65_1_fu_683_p2 = ($signed(i_1_fu_194) + $signed(8'd254));

assign add_ln65_2_fu_705_p2 = ($signed(i_1_fu_194) + $signed(8'd253));

assign add_ln65_3_fu_727_p2 = ($signed(i_1_fu_194) + $signed(8'd252));

assign add_ln65_4_fu_749_p2 = ($signed(i_1_fu_194) + $signed(8'd251));

assign add_ln65_5_fu_771_p2 = ($signed(i_1_fu_194) + $signed(8'd250));

assign add_ln65_6_fu_793_p2 = ($signed(i_1_fu_194) + $signed(8'd249));

assign add_ln65_7_fu_815_p2 = ($signed(i_1_fu_194) + $signed(8'd248));

assign add_ln65_fu_652_p2 = ($signed(i_1_fu_194) + $signed(8'd255));

assign addr_cmp11_fu_980_p2 = ((reuse_addr_reg8_fu_170 == zext_ln65_4_fu_765_p1) ? 1'b1 : 1'b0);

assign addr_cmp17_fu_966_p2 = ((reuse_addr_reg14_fu_162 == zext_ln65_3_fu_743_p1) ? 1'b1 : 1'b0);

assign addr_cmp23_fu_952_p2 = ((reuse_addr_reg20_fu_154 == zext_ln65_2_fu_721_p1) ? 1'b1 : 1'b0);

assign addr_cmp29_fu_938_p2 = ((reuse_addr_reg26_fu_146 == zext_ln65_1_fu_699_p1) ? 1'b1 : 1'b0);

assign addr_cmp35_fu_929_p2 = ((reuse_addr_reg32_fu_138 == zext_ln65_fu_668_p1) ? 1'b1 : 1'b0);

assign addr_cmp41_fu_885_p2 = ((reuse_addr_reg38_fu_130 == zext_ln65_6_fu_809_p1) ? 1'b1 : 1'b0);

assign addr_cmp47_fu_876_p2 = ((reuse_addr_reg44_fu_122 == zext_ln65_5_fu_787_p1) ? 1'b1 : 1'b0);

assign addr_cmp53_fu_867_p2 = ((reuse_addr_reg50_fu_114 == zext_ln65_4_fu_765_p1) ? 1'b1 : 1'b0);

assign addr_cmp59_fu_858_p2 = ((reuse_addr_reg56_fu_106 == zext_ln65_3_fu_743_p1) ? 1'b1 : 1'b0);

assign addr_cmp5_fu_994_p2 = ((reuse_addr_reg2_fu_178 == zext_ln65_5_fu_787_p1) ? 1'b1 : 1'b0);

assign addr_cmp65_fu_849_p2 = ((reuse_addr_reg62_fu_98 == zext_ln65_2_fu_721_p1) ? 1'b1 : 1'b0);

assign addr_cmp71_fu_840_p2 = ((reuse_addr_reg68_fu_90 == zext_ln65_1_fu_699_p1) ? 1'b1 : 1'b0);

assign addr_cmp77_fu_677_p2 = ((reuse_addr_reg74_fu_82 == zext_ln65_fu_668_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_1008_p2 = ((reuse_addr_reg_fu_186 == zext_ln65_6_fu_809_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign delay_line_I_0_address0 = zext_ln63_fu_1029_p1;

assign delay_line_I_0_address1 = zext_ln65_7_fu_831_p1;

assign delay_line_I_0_d0 = ((addr_cmp77_reg_1475[0:0] == 1'b1) ? reuse_reg73_fu_86 : delay_line_I_7_q1);

assign delay_line_I_1_address0 = delay_line_I_1_addr_reg_1546;

assign delay_line_I_1_address1 = zext_ln65_6_fu_809_p1;

assign delay_line_I_1_d0 = delay_line_I_0_q1;

assign delay_line_I_2_address0 = delay_line_I_2_addr_reg_1534;

assign delay_line_I_2_address1 = zext_ln65_5_fu_787_p1;

assign delay_line_I_2_d0 = ((addr_cmp41_reg_1593[0:0] == 1'b1) ? reuse_reg37_fu_134 : delay_line_I_1_q1);

assign delay_line_I_3_address0 = delay_line_I_3_addr_reg_1522;

assign delay_line_I_3_address1 = zext_ln65_4_fu_765_p1;

assign delay_line_I_3_d0 = ((addr_cmp47_reg_1588[0:0] == 1'b1) ? reuse_reg43_fu_126 : delay_line_I_2_q1);

assign delay_line_I_4_address0 = delay_line_I_4_addr_reg_1510;

assign delay_line_I_4_address1 = zext_ln65_3_fu_743_p1;

assign delay_line_I_4_d0 = ((addr_cmp53_reg_1583[0:0] == 1'b1) ? reuse_reg49_fu_118 : delay_line_I_3_q1);

assign delay_line_I_5_address0 = delay_line_I_5_addr_reg_1498;

assign delay_line_I_5_address1 = zext_ln65_2_fu_721_p1;

assign delay_line_I_5_d0 = ((addr_cmp59_reg_1578[0:0] == 1'b1) ? reuse_reg55_fu_110 : delay_line_I_4_q1);

assign delay_line_I_6_address0 = delay_line_I_6_addr_reg_1486;

assign delay_line_I_6_address1 = zext_ln65_1_fu_699_p1;

assign delay_line_I_6_d0 = ((addr_cmp65_reg_1573[0:0] == 1'b1) ? reuse_reg61_fu_102 : delay_line_I_5_q1);

assign delay_line_I_7_address0 = delay_line_I_7_addr_reg_1469;

assign delay_line_I_7_address1 = zext_ln65_fu_668_p1;

assign delay_line_I_7_d0 = ((addr_cmp71_reg_1568[0:0] == 1'b1) ? reuse_reg67_fu_94 : delay_line_I_6_q1);

assign delay_line_Q_0_address0 = zext_ln63_fu_1029_p1;

assign delay_line_Q_0_address1 = zext_ln65_7_fu_831_p1;

assign delay_line_Q_0_d0 = ((addr_cmp35_reg_1598[0:0] == 1'b1) ? reuse_reg31_fu_142 : delay_line_Q_7_q1);

assign delay_line_Q_1_address0 = delay_line_Q_1_addr_reg_1552;

assign delay_line_Q_1_address1 = zext_ln65_6_fu_809_p1;

assign delay_line_Q_1_d0 = delay_line_Q_0_q1;

assign delay_line_Q_2_address0 = delay_line_Q_2_addr_reg_1540;

assign delay_line_Q_2_address1 = zext_ln65_5_fu_787_p1;

assign delay_line_Q_2_d0 = ((addr_cmp_reg_1628[0:0] == 1'b1) ? reuse_reg_fu_190 : delay_line_Q_1_q1);

assign delay_line_Q_3_address0 = delay_line_Q_3_addr_reg_1528;

assign delay_line_Q_3_address1 = zext_ln65_4_fu_765_p1;

assign delay_line_Q_3_d0 = ((addr_cmp5_reg_1623[0:0] == 1'b1) ? reuse_reg1_fu_182 : delay_line_Q_2_q1);

assign delay_line_Q_4_address0 = delay_line_Q_4_addr_reg_1516;

assign delay_line_Q_4_address1 = zext_ln65_3_fu_743_p1;

assign delay_line_Q_4_d0 = ((addr_cmp11_reg_1618[0:0] == 1'b1) ? reuse_reg7_fu_174 : delay_line_Q_3_q1);

assign delay_line_Q_5_address0 = delay_line_Q_5_addr_reg_1504;

assign delay_line_Q_5_address1 = zext_ln65_2_fu_721_p1;

assign delay_line_Q_5_d0 = ((addr_cmp17_reg_1613[0:0] == 1'b1) ? reuse_reg13_fu_166 : delay_line_Q_4_q1);

assign delay_line_Q_6_address0 = delay_line_Q_6_addr_reg_1492;

assign delay_line_Q_6_address1 = zext_ln65_1_fu_699_p1;

assign delay_line_Q_6_d0 = ((addr_cmp23_reg_1608[0:0] == 1'b1) ? reuse_reg19_fu_158 : delay_line_Q_5_q1);

assign delay_line_Q_7_address0 = delay_line_Q_7_addr_reg_1480;

assign delay_line_Q_7_address1 = zext_ln65_fu_668_p1;

assign delay_line_Q_7_d0 = ((addr_cmp29_reg_1603[0:0] == 1'b1) ? reuse_reg25_fu_150 : delay_line_Q_6_q1);

assign icmp_ln63_fu_636_p2 = ((i_1_fu_194 == 8'd0) ? 1'b1 : 1'b0);

assign lshr_ln2_fu_658_p4 = {{add_ln65_fu_652_p2[7:3]}};

assign lshr_ln65_1_fu_689_p4 = {{add_ln65_1_fu_683_p2[7:3]}};

assign lshr_ln65_2_fu_711_p4 = {{add_ln65_2_fu_705_p2[7:3]}};

assign lshr_ln65_3_fu_733_p4 = {{add_ln65_3_fu_727_p2[7:3]}};

assign lshr_ln65_4_fu_755_p4 = {{add_ln65_4_fu_749_p2[7:3]}};

assign lshr_ln65_5_fu_777_p4 = {{add_ln65_5_fu_771_p2[7:3]}};

assign lshr_ln65_6_fu_799_p4 = {{add_ln65_6_fu_793_p2[7:3]}};

assign lshr_ln65_7_fu_821_p4 = {{add_ln65_7_fu_815_p2[7:3]}};

assign reuse_select12_fu_1208_p3 = ((addr_cmp11_reg_1618[0:0] == 1'b1) ? reuse_reg7_fu_174 : delay_line_Q_3_q1);

assign reuse_select18_fu_1192_p3 = ((addr_cmp17_reg_1613[0:0] == 1'b1) ? reuse_reg13_fu_166 : delay_line_Q_4_q1);

assign reuse_select24_fu_1176_p3 = ((addr_cmp23_reg_1608[0:0] == 1'b1) ? reuse_reg19_fu_158 : delay_line_Q_5_q1);

assign reuse_select30_fu_1160_p3 = ((addr_cmp29_reg_1603[0:0] == 1'b1) ? reuse_reg25_fu_150 : delay_line_Q_6_q1);

assign reuse_select42_fu_1103_p3 = ((addr_cmp41_reg_1593[0:0] == 1'b1) ? reuse_reg37_fu_134 : delay_line_I_1_q1);

assign reuse_select48_fu_1092_p3 = ((addr_cmp47_reg_1588[0:0] == 1'b1) ? reuse_reg43_fu_126 : delay_line_I_2_q1);

assign reuse_select54_fu_1081_p3 = ((addr_cmp53_reg_1583[0:0] == 1'b1) ? reuse_reg49_fu_118 : delay_line_I_3_q1);

assign reuse_select60_fu_1070_p3 = ((addr_cmp59_reg_1578[0:0] == 1'b1) ? reuse_reg55_fu_110 : delay_line_I_4_q1);

assign reuse_select66_fu_1059_p3 = ((addr_cmp65_reg_1573[0:0] == 1'b1) ? reuse_reg61_fu_102 : delay_line_I_5_q1);

assign reuse_select6_fu_1224_p3 = ((addr_cmp5_reg_1623[0:0] == 1'b1) ? reuse_reg1_fu_182 : delay_line_Q_2_q1);

assign reuse_select72_fu_1048_p3 = ((addr_cmp71_reg_1568[0:0] == 1'b1) ? reuse_reg67_fu_94 : delay_line_I_6_q1);

assign reuse_select_fu_1240_p3 = ((addr_cmp_reg_1628[0:0] == 1'b1) ? reuse_reg_fu_190 : delay_line_Q_1_q1);

assign zext_ln63_fu_1029_p1 = lshr_ln1_reg_1464;

assign zext_ln65_1_fu_699_p1 = lshr_ln65_1_fu_689_p4;

assign zext_ln65_2_fu_721_p1 = lshr_ln65_2_fu_711_p4;

assign zext_ln65_3_fu_743_p1 = lshr_ln65_3_fu_733_p4;

assign zext_ln65_4_fu_765_p1 = lshr_ln65_4_fu_755_p4;

assign zext_ln65_5_fu_787_p1 = lshr_ln65_5_fu_777_p4;

assign zext_ln65_6_fu_809_p1 = lshr_ln65_6_fu_799_p4;

assign zext_ln65_7_fu_831_p1 = lshr_ln65_7_fu_821_p4;

assign zext_ln65_fu_668_p1 = lshr_ln2_fu_658_p4;

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_63_2
