// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module receiver_receiver_Pipeline_VITIS_LOOP_260_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arr_9_I_V_0_0_reload,
        arr_9_I_V_2_0121_reload,
        arr_9_I_V_1_0120_reload,
        arr_9_I_V_3_0122_reload,
        arr_9_Q_V_0_0_reload,
        arr_9_Q_V_2_0124_reload,
        arr_9_Q_V_1_0123_reload,
        arr_9_Q_V_3_0125_reload,
        arr_10_Q_V_1_0127_out,
        arr_10_Q_V_1_0127_out_ap_vld,
        arr_10_Q_V_0_0_out,
        arr_10_Q_V_0_0_out_ap_vld,
        arr_10_I_V_1_0126_out,
        arr_10_I_V_1_0126_out_ap_vld,
        arr_10_I_V_0_0_out,
        arr_10_I_V_0_0_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] arr_9_I_V_0_0_reload;
input  [23:0] arr_9_I_V_2_0121_reload;
input  [23:0] arr_9_I_V_1_0120_reload;
input  [23:0] arr_9_I_V_3_0122_reload;
input  [23:0] arr_9_Q_V_0_0_reload;
input  [23:0] arr_9_Q_V_2_0124_reload;
input  [23:0] arr_9_Q_V_1_0123_reload;
input  [23:0] arr_9_Q_V_3_0125_reload;
output  [23:0] arr_10_Q_V_1_0127_out;
output   arr_10_Q_V_1_0127_out_ap_vld;
output  [23:0] arr_10_Q_V_0_0_out;
output   arr_10_Q_V_0_0_out_ap_vld;
output  [23:0] arr_10_I_V_1_0126_out;
output   arr_10_I_V_1_0126_out_ap_vld;
output  [23:0] arr_10_I_V_0_0_out;
output   arr_10_I_V_0_0_out_ap_vld;

reg ap_idle;
reg arr_10_Q_V_1_0127_out_ap_vld;
reg arr_10_Q_V_0_0_out_ap_vld;
reg arr_10_I_V_1_0126_out_ap_vld;
reg arr_10_I_V_0_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_174_p3;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] i_fu_60;
wire   [2:0] add_ln260_fu_292_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [23:0] arr_10_I_V_1_fu_64;
wire   [23:0] arr_10_I_V_1_6_fu_250_p3;
reg   [23:0] arr_10_I_V_1_3_fu_68;
wire   [23:0] arr_10_I_V_1_5_fu_242_p3;
reg   [23:0] arr_10_Q_V_1_fu_72;
wire   [23:0] arr_10_Q_V_1_6_fu_284_p3;
reg   [23:0] arr_10_Q_V_1_3_fu_76;
wire   [23:0] arr_10_Q_V_1_5_fu_276_p3;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] empty_72_fu_194_p1;
wire   [0:0] icmp_ln813_fu_198_p2;
wire   [1:0] or_ln813_fu_210_p2;
wire   [0:0] icmp_ln813_1_fu_216_p2;
wire   [23:0] select_ln813_1_fu_222_p3;
wire   [23:0] select_ln813_fu_204_p3;
wire   [0:0] tmp_1_fu_234_p3;
wire   [23:0] arr_10_I_V_0_fu_228_p2;
wire   [23:0] select_ln813_3_fu_264_p3;
wire   [23:0] select_ln813_2_fu_258_p3;
wire   [23:0] arr_10_Q_V_0_fu_270_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

receiver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_10_I_V_1_fu_64 <= 24'd0;
        end else if (((tmp_fu_174_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_10_I_V_1_fu_64 <= arr_10_I_V_1_6_fu_250_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            arr_10_Q_V_1_fu_72 <= 24'd0;
        end else if (((tmp_fu_174_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            arr_10_Q_V_1_fu_72 <= arr_10_Q_V_1_6_fu_284_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 3'd0;
        end else if (((tmp_fu_174_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_60 <= add_ln260_fu_292_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_174_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_10_I_V_1_3_fu_68 <= arr_10_I_V_1_5_fu_242_p3;
        arr_10_Q_V_1_3_fu_76 <= arr_10_Q_V_1_5_fu_276_p3;
    end
end

always @ (*) begin
    if (((tmp_fu_174_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_174_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_10_I_V_0_0_out_ap_vld = 1'b1;
    end else begin
        arr_10_I_V_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_174_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_10_I_V_1_0126_out_ap_vld = 1'b1;
    end else begin
        arr_10_I_V_1_0126_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_174_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_10_Q_V_0_0_out_ap_vld = 1'b1;
    end else begin
        arr_10_Q_V_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_174_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arr_10_Q_V_1_0127_out_ap_vld = 1'b1;
    end else begin
        arr_10_Q_V_1_0127_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln260_fu_292_p2 = (i_fu_60 + 3'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arr_10_I_V_0_0_out = arr_10_I_V_1_fu_64;

assign arr_10_I_V_0_fu_228_p2 = (select_ln813_1_fu_222_p3 + select_ln813_fu_204_p3);

assign arr_10_I_V_1_0126_out = arr_10_I_V_1_3_fu_68;

assign arr_10_I_V_1_5_fu_242_p3 = ((tmp_1_fu_234_p3[0:0] == 1'b1) ? arr_10_I_V_0_fu_228_p2 : arr_10_I_V_1_3_fu_68);

assign arr_10_I_V_1_6_fu_250_p3 = ((tmp_1_fu_234_p3[0:0] == 1'b1) ? arr_10_I_V_1_fu_64 : arr_10_I_V_0_fu_228_p2);

assign arr_10_Q_V_0_0_out = arr_10_Q_V_1_fu_72;

assign arr_10_Q_V_0_fu_270_p2 = (select_ln813_3_fu_264_p3 + select_ln813_2_fu_258_p3);

assign arr_10_Q_V_1_0127_out = arr_10_Q_V_1_3_fu_76;

assign arr_10_Q_V_1_5_fu_276_p3 = ((tmp_1_fu_234_p3[0:0] == 1'b1) ? arr_10_Q_V_0_fu_270_p2 : arr_10_Q_V_1_3_fu_76);

assign arr_10_Q_V_1_6_fu_284_p3 = ((tmp_1_fu_234_p3[0:0] == 1'b1) ? arr_10_Q_V_1_fu_72 : arr_10_Q_V_0_fu_270_p2);

assign empty_72_fu_194_p1 = i_fu_60[1:0];

assign icmp_ln813_1_fu_216_p2 = ((or_ln813_fu_210_p2 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln813_fu_198_p2 = ((empty_72_fu_194_p1 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln813_fu_210_p2 = (empty_72_fu_194_p1 | 2'd1);

assign select_ln813_1_fu_222_p3 = ((icmp_ln813_1_fu_216_p2[0:0] == 1'b1) ? arr_9_I_V_1_0120_reload : arr_9_I_V_3_0122_reload);

assign select_ln813_2_fu_258_p3 = ((icmp_ln813_fu_198_p2[0:0] == 1'b1) ? arr_9_Q_V_0_0_reload : arr_9_Q_V_2_0124_reload);

assign select_ln813_3_fu_264_p3 = ((icmp_ln813_1_fu_216_p2[0:0] == 1'b1) ? arr_9_Q_V_1_0123_reload : arr_9_Q_V_3_0125_reload);

assign select_ln813_fu_204_p3 = ((icmp_ln813_fu_198_p2[0:0] == 1'b1) ? arr_9_I_V_0_0_reload : arr_9_I_V_2_0121_reload);

assign tmp_1_fu_234_p3 = i_fu_60[32'd1];

assign tmp_fu_174_p3 = i_fu_60[32'd2];

endmodule //receiver_receiver_Pipeline_VITIS_LOOP_260_21
