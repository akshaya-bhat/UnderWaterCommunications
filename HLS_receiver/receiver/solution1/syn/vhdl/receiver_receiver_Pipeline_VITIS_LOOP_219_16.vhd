-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_219_16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arr_5_I_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_I_ce0 : OUT STD_LOGIC;
    arr_5_I_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_5_I_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_I_2_ce0 : OUT STD_LOGIC;
    arr_5_I_2_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_5_I_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_I_1_ce0 : OUT STD_LOGIC;
    arr_5_I_1_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_5_I_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_I_3_ce0 : OUT STD_LOGIC;
    arr_5_I_3_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_6_I_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    arr_6_I_ce0 : OUT STD_LOGIC;
    arr_6_I_we0 : OUT STD_LOGIC;
    arr_6_I_d0 : OUT STD_LOGIC_VECTOR (28 downto 0);
    arr_5_Q_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_Q_ce0 : OUT STD_LOGIC;
    arr_5_Q_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_5_Q_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_Q_2_ce0 : OUT STD_LOGIC;
    arr_5_Q_2_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_5_Q_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_Q_1_ce0 : OUT STD_LOGIC;
    arr_5_Q_1_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_5_Q_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    arr_5_Q_3_ce0 : OUT STD_LOGIC;
    arr_5_Q_3_q0 : IN STD_LOGIC_VECTOR (27 downto 0);
    arr_6_Q_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    arr_6_Q_ce0 : OUT STD_LOGIC;
    arr_6_Q_we0 : OUT STD_LOGIC;
    arr_6_Q_d0 : OUT STD_LOGIC_VECTOR (28 downto 0) );
end;


architecture behav of receiver_receiver_Pipeline_VITIS_LOOP_219_16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln219_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_8_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_s_fu_242_p5 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_s_reg_387 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_fu_254_p5 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_1_reg_392 : STD_LOGIC_VECTOR (27 downto 0);
    signal lshr_ln1_reg_397 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_275_p5 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_2_reg_402 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_3_fu_287_p5 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_3_reg_407 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln219_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln220_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_58 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln219_fu_228_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_8 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_fu_206_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_239_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln220_1_fu_302_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln220_fu_299_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln221_1_fu_320_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln221_fu_317_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component receiver_mux_3_2_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component receiver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_3_2_28_1_1_U549 : component receiver_mux_3_2_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => arr_5_I_q0,
        din1 => ap_const_lv28_0,
        din2 => arr_5_I_2_q0,
        din3 => empty_fu_239_p1,
        dout => tmp_s_fu_242_p5);

    mux_3_2_28_1_1_U550 : component receiver_mux_3_2_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => arr_5_I_1_q0,
        din1 => ap_const_lv28_0,
        din2 => arr_5_I_3_q0,
        din3 => empty_fu_239_p1,
        dout => tmp_1_fu_254_p5);

    mux_3_2_28_1_1_U551 : component receiver_mux_3_2_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => arr_5_Q_q0,
        din1 => ap_const_lv28_0,
        din2 => arr_5_Q_2_q0,
        din3 => empty_fu_239_p1,
        dout => tmp_2_fu_275_p5);

    mux_3_2_28_1_1_U552 : component receiver_mux_3_2_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 28,
        din2_WIDTH => 28,
        din3_WIDTH => 2,
        dout_WIDTH => 28)
    port map (
        din0 => arr_5_Q_1_q0,
        din1 => ap_const_lv28_0,
        din2 => arr_5_Q_3_q0,
        din3 => empty_fu_239_p1,
        dout => tmp_3_fu_287_p5);

    flow_control_loop_pipe_sequential_init_U : component receiver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln219_fu_200_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_58 <= add_ln219_fu_228_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_58 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_8_reg_337 <= ap_sig_allocacmp_i_8;
                lshr_ln1_reg_397 <= i_8_reg_337(5 downto 1);
                tmp_1_reg_392 <= tmp_1_fu_254_p5;
                tmp_2_reg_402 <= tmp_2_fu_275_p5;
                tmp_3_reg_407 <= tmp_3_fu_287_p5;
                tmp_s_reg_387 <= tmp_s_fu_242_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln219_fu_228_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_8) + unsigned(ap_const_lv6_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln219_fu_200_p2)
    begin
        if (((icmp_ln219_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_8 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_8 <= i_fu_58;
        end if; 
    end process;

    arr_5_I_1_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_I_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_I_1_ce0 <= ap_const_logic_1;
        else 
            arr_5_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_I_2_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_I_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_I_2_ce0 <= ap_const_logic_1;
        else 
            arr_5_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_I_3_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_I_3_ce0 <= ap_const_logic_1;
        else 
            arr_5_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_I_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_I_ce0 <= ap_const_logic_1;
        else 
            arr_5_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_Q_1_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_Q_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_Q_1_ce0 <= ap_const_logic_1;
        else 
            arr_5_Q_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_Q_2_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_Q_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_Q_2_ce0 <= ap_const_logic_1;
        else 
            arr_5_Q_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_Q_3_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_Q_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_Q_3_ce0 <= ap_const_logic_1;
        else 
            arr_5_Q_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_5_Q_address0 <= zext_ln219_fu_216_p1(4 - 1 downto 0);

    arr_5_Q_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            arr_5_Q_ce0 <= ap_const_logic_1;
        else 
            arr_5_Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_6_I_address0 <= zext_ln220_fu_312_p1(5 - 1 downto 0);

    arr_6_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            arr_6_I_ce0 <= ap_const_logic_1;
        else 
            arr_6_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_6_I_d0 <= std_logic_vector(signed(sext_ln220_1_fu_302_p1) + signed(sext_ln220_fu_299_p1));

    arr_6_I_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            arr_6_I_we0 <= ap_const_logic_1;
        else 
            arr_6_I_we0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_6_Q_address0 <= zext_ln220_fu_312_p1(5 - 1 downto 0);

    arr_6_Q_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            arr_6_Q_ce0 <= ap_const_logic_1;
        else 
            arr_6_Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr_6_Q_d0 <= std_logic_vector(signed(sext_ln221_1_fu_320_p1) + signed(sext_ln221_fu_317_p1));

    arr_6_Q_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            arr_6_Q_we0 <= ap_const_logic_1;
        else 
            arr_6_Q_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_239_p1 <= i_8_reg_337(2 - 1 downto 0);
    icmp_ln219_fu_200_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_8) < unsigned(ap_const_lv6_22)) else "0";
    lshr_ln_fu_206_p4 <= ap_sig_allocacmp_i_8(5 downto 2);
        sext_ln220_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_392),29));

        sext_ln220_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_387),29));

        sext_ln221_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_407),29));

        sext_ln221_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_402),29));

    zext_ln219_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_206_p4),64));
    zext_ln220_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_397),64));
end behav;
