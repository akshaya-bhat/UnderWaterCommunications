-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_75_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filt_I_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_ce0 : OUT STD_LOGIC;
    filt_I_we0 : OUT STD_LOGIC;
    filt_I_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_ce0 : OUT STD_LOGIC;
    filt_Q_we0 : OUT STD_LOGIC;
    filt_Q_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_I_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_1_ce0 : OUT STD_LOGIC;
    filt_I_1_we0 : OUT STD_LOGIC;
    filt_I_1_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_1_ce0 : OUT STD_LOGIC;
    filt_Q_1_we0 : OUT STD_LOGIC;
    filt_Q_1_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_I_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_2_ce0 : OUT STD_LOGIC;
    filt_I_2_we0 : OUT STD_LOGIC;
    filt_I_2_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_2_ce0 : OUT STD_LOGIC;
    filt_Q_2_we0 : OUT STD_LOGIC;
    filt_Q_2_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_I_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_3_ce0 : OUT STD_LOGIC;
    filt_I_3_we0 : OUT STD_LOGIC;
    filt_I_3_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_3_ce0 : OUT STD_LOGIC;
    filt_Q_3_we0 : OUT STD_LOGIC;
    filt_Q_3_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_I_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_4_ce0 : OUT STD_LOGIC;
    filt_I_4_we0 : OUT STD_LOGIC;
    filt_I_4_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_4_ce0 : OUT STD_LOGIC;
    filt_Q_4_we0 : OUT STD_LOGIC;
    filt_Q_4_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_I_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_5_ce0 : OUT STD_LOGIC;
    filt_I_5_we0 : OUT STD_LOGIC;
    filt_I_5_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_5_ce0 : OUT STD_LOGIC;
    filt_Q_5_we0 : OUT STD_LOGIC;
    filt_Q_5_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_I_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_6_ce0 : OUT STD_LOGIC;
    filt_I_6_we0 : OUT STD_LOGIC;
    filt_I_6_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_6_ce0 : OUT STD_LOGIC;
    filt_Q_6_we0 : OUT STD_LOGIC;
    filt_Q_6_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_I_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_I_7_ce0 : OUT STD_LOGIC;
    filt_I_7_we0 : OUT STD_LOGIC;
    filt_I_7_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    filt_Q_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    filt_Q_7_ce0 : OUT STD_LOGIC;
    filt_Q_7_we0 : OUT STD_LOGIC;
    filt_Q_7_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    delay_line_I_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_0_ce0 : OUT STD_LOGIC;
    delay_line_I_0_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_0_ce0 : OUT STD_LOGIC;
    delay_line_Q_0_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_1_ce0 : OUT STD_LOGIC;
    delay_line_I_1_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_2_ce0 : OUT STD_LOGIC;
    delay_line_I_2_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_3_ce0 : OUT STD_LOGIC;
    delay_line_I_3_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_4_ce0 : OUT STD_LOGIC;
    delay_line_I_4_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_5_ce0 : OUT STD_LOGIC;
    delay_line_I_5_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_6_ce0 : OUT STD_LOGIC;
    delay_line_I_6_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_I_7_ce0 : OUT STD_LOGIC;
    delay_line_I_7_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_1_ce0 : OUT STD_LOGIC;
    delay_line_Q_1_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_2_ce0 : OUT STD_LOGIC;
    delay_line_Q_2_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_3_ce0 : OUT STD_LOGIC;
    delay_line_Q_3_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_4_ce0 : OUT STD_LOGIC;
    delay_line_Q_4_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_5_ce0 : OUT STD_LOGIC;
    delay_line_Q_5_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_6_ce0 : OUT STD_LOGIC;
    delay_line_Q_6_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_7_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    delay_line_Q_7_ce0 : OUT STD_LOGIC;
    delay_line_Q_7_q0 : IN STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of receiver_receiver_Pipeline_VITIS_LOOP_75_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C1 : STD_LOGIC_VECTOR (7 downto 0) := "11000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln75_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal h_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce1 : STD_LOGIC;
    signal h_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce2 : STD_LOGIC;
    signal h_q2 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce3 : STD_LOGIC;
    signal h_q3 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce4 : STD_LOGIC;
    signal h_q4 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce5 : STD_LOGIC;
    signal h_q5 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce6 : STD_LOGIC;
    signal h_q6 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_ce7 : STD_LOGIC;
    signal h_q7 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln75_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_1107 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln75_reg_1107_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_reg_1107_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln75_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1142_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_1142_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal delay_line_I_0_load_reg_1251 : STD_LOGIC_VECTOR (17 downto 0);
    signal h_load_reg_1256 : STD_LOGIC_VECTOR (14 downto 0);
    signal delay_line_Q_0_load_reg_1261 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_I_1_load_reg_1266 : STD_LOGIC_VECTOR (17 downto 0);
    signal h_load_1_reg_1271 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_load_2_reg_1276 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_load_3_reg_1281 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_load_4_reg_1286 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_load_5_reg_1291 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_load_6_reg_1296 : STD_LOGIC_VECTOR (14 downto 0);
    signal delay_line_I_2_load_reg_1301 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_I_3_load_reg_1306 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_I_4_load_reg_1311 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_I_5_load_reg_1316 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_I_6_load_reg_1321 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_I_7_load_reg_1326 : STD_LOGIC_VECTOR (17 downto 0);
    signal h_load_7_reg_1331 : STD_LOGIC_VECTOR (14 downto 0);
    signal delay_line_Q_1_load_reg_1336 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_Q_2_load_reg_1341 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_Q_3_load_reg_1346 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_Q_4_load_reg_1351 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_Q_5_load_reg_1356 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_Q_6_load_reg_1361 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_line_Q_7_load_reg_1366 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln_reg_1371 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1_reg_1376 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln77_1_reg_1381 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln77_2_reg_1386 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln77_3_reg_1391 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln77_4_reg_1396 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln77_5_reg_1401 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln77_6_reg_1406 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln77_7_reg_1411 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln78_1_reg_1416 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln78_2_reg_1421 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln78_3_reg_1426 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln78_4_reg_1431 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln78_5_reg_1436 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln78_6_reg_1441 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln78_7_reg_1446 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_2_cast_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_2_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_3_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_4_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_5_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_fu_761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln3_fu_648_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln75_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln75_1_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln75_2_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln75_3_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln75_4_fu_728_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln75_5_fu_739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln75_6_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln77_fu_778_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_1_fu_775_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_fu_778_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_fu_797_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_fu_797_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_1_fu_819_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_3_fu_816_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_1_fu_819_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_2_fu_853_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_4_fu_835_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_2_fu_853_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_3_fu_872_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_5_fu_838_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_3_fu_872_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_4_fu_891_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_6_fu_841_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_4_fu_891_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_5_fu_910_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_7_fu_844_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_5_fu_910_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_6_fu_929_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_8_fu_847_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_6_fu_929_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_7_fu_951_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln77_15_fu_948_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln77_7_fu_951_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_1_fu_970_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_1_fu_970_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_2_fu_989_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_2_fu_989_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_3_fu_1008_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_3_fu_1008_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_4_fu_1027_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_4_fu_1027_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_5_fu_1046_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_5_fu_1046_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_6_fu_1065_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_6_fu_1065_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln78_7_fu_1084_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_7_fu_1084_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component receiver_mul_15s_18s_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component receiver_mul_18s_15s_33_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component receiver_receiver_Pipeline_VITIS_LOOP_75_3_h_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component receiver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    h_U : component receiver_receiver_Pipeline_VITIS_LOOP_75_3_h_ROM_AUTO_1R
    generic map (
        DataWidth => 15,
        AddressRange => 193,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        q0 => h_q0,
        address1 => h_address1,
        ce1 => h_ce1,
        q1 => h_q1,
        address2 => h_address2,
        ce2 => h_ce2,
        q2 => h_q2,
        address3 => h_address3,
        ce3 => h_ce3,
        q3 => h_q3,
        address4 => h_address4,
        ce4 => h_ce4,
        q4 => h_q4,
        address5 => h_address5,
        ce5 => h_ce5,
        q5 => h_q5,
        address6 => h_address6,
        ce6 => h_ce6,
        q6 => h_q6,
        address7 => h_address7,
        ce7 => h_ce7,
        q7 => h_q7);

    mul_15s_18s_33_1_1_U20 : component receiver_mul_15s_18s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        din0 => mul_ln77_fu_778_p0,
        din1 => delay_line_I_0_load_reg_1251,
        dout => mul_ln77_fu_778_p2);

    mul_18s_15s_33_1_1_U21 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_0_load_reg_1261,
        din1 => mul_ln78_fu_797_p1,
        dout => mul_ln78_fu_797_p2);

    mul_15s_18s_33_1_1_U22 : component receiver_mul_15s_18s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        din0 => mul_ln77_1_fu_819_p0,
        din1 => delay_line_I_1_load_reg_1266,
        dout => mul_ln77_1_fu_819_p2);

    mul_18s_15s_33_1_1_U23 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_I_2_load_reg_1301,
        din1 => mul_ln77_2_fu_853_p1,
        dout => mul_ln77_2_fu_853_p2);

    mul_18s_15s_33_1_1_U24 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_I_3_load_reg_1306,
        din1 => mul_ln77_3_fu_872_p1,
        dout => mul_ln77_3_fu_872_p2);

    mul_18s_15s_33_1_1_U25 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_I_4_load_reg_1311,
        din1 => mul_ln77_4_fu_891_p1,
        dout => mul_ln77_4_fu_891_p2);

    mul_18s_15s_33_1_1_U26 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_I_5_load_reg_1316,
        din1 => mul_ln77_5_fu_910_p1,
        dout => mul_ln77_5_fu_910_p2);

    mul_18s_15s_33_1_1_U27 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_I_6_load_reg_1321,
        din1 => mul_ln77_6_fu_929_p1,
        dout => mul_ln77_6_fu_929_p2);

    mul_15s_18s_33_1_1_U28 : component receiver_mul_15s_18s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 18,
        dout_WIDTH => 33)
    port map (
        din0 => mul_ln77_7_fu_951_p0,
        din1 => delay_line_I_7_load_reg_1326,
        dout => mul_ln77_7_fu_951_p2);

    mul_18s_15s_33_1_1_U29 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_1_load_reg_1336,
        din1 => mul_ln78_1_fu_970_p1,
        dout => mul_ln78_1_fu_970_p2);

    mul_18s_15s_33_1_1_U30 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_2_load_reg_1341,
        din1 => mul_ln78_2_fu_989_p1,
        dout => mul_ln78_2_fu_989_p2);

    mul_18s_15s_33_1_1_U31 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_3_load_reg_1346,
        din1 => mul_ln78_3_fu_1008_p1,
        dout => mul_ln78_3_fu_1008_p2);

    mul_18s_15s_33_1_1_U32 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_4_load_reg_1351,
        din1 => mul_ln78_4_fu_1027_p1,
        dout => mul_ln78_4_fu_1027_p2);

    mul_18s_15s_33_1_1_U33 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_5_load_reg_1356,
        din1 => mul_ln78_5_fu_1046_p1,
        dout => mul_ln78_5_fu_1046_p2);

    mul_18s_15s_33_1_1_U34 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_6_load_reg_1361,
        din1 => mul_ln78_6_fu_1065_p1,
        dout => mul_ln78_6_fu_1065_p2);

    mul_18s_15s_33_1_1_U35 : component receiver_mul_18s_15s_33_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        din0 => delay_line_Q_7_load_reg_1366,
        din1 => mul_ln78_7_fu_1084_p1,
        dout => mul_ln78_7_fu_1084_p2);

    flow_control_loop_pipe_sequential_init_U : component receiver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i_2_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln75_fu_684_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_2_fu_118 <= add_ln75_fu_761_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_2_fu_118 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                delay_line_I_0_load_reg_1251 <= delay_line_I_0_q0;
                delay_line_Q_0_load_reg_1261 <= delay_line_Q_0_q0;
                icmp_ln75_reg_1142 <= icmp_ln75_fu_684_p2;
                icmp_ln75_reg_1142_pp0_iter1_reg <= icmp_ln75_reg_1142;
                    zext_ln75_reg_1107(4 downto 0) <= zext_ln75_fu_658_p1(4 downto 0);
                    zext_ln75_reg_1107_pp0_iter1_reg(4 downto 0) <= zext_ln75_reg_1107(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                delay_line_I_1_load_reg_1266 <= delay_line_I_1_q0;
                delay_line_I_2_load_reg_1301 <= delay_line_I_2_q0;
                delay_line_I_3_load_reg_1306 <= delay_line_I_3_q0;
                delay_line_I_4_load_reg_1311 <= delay_line_I_4_q0;
                delay_line_I_5_load_reg_1316 <= delay_line_I_5_q0;
                delay_line_I_6_load_reg_1321 <= delay_line_I_6_q0;
                delay_line_I_7_load_reg_1326 <= delay_line_I_7_q0;
                delay_line_Q_1_load_reg_1336 <= delay_line_Q_1_q0;
                delay_line_Q_2_load_reg_1341 <= delay_line_Q_2_q0;
                delay_line_Q_3_load_reg_1346 <= delay_line_Q_3_q0;
                delay_line_Q_4_load_reg_1351 <= delay_line_Q_4_q0;
                delay_line_Q_5_load_reg_1356 <= delay_line_Q_5_q0;
                delay_line_Q_6_load_reg_1361 <= delay_line_Q_6_q0;
                delay_line_Q_7_load_reg_1366 <= delay_line_Q_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                h_load_1_reg_1271 <= h_q6;
                h_load_2_reg_1276 <= h_q5;
                h_load_3_reg_1281 <= h_q4;
                h_load_4_reg_1286 <= h_q3;
                h_load_5_reg_1291 <= h_q2;
                h_load_6_reg_1296 <= h_q1;
                h_load_7_reg_1331 <= h_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                h_load_reg_1256 <= h_q7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln75_reg_1142_pp0_iter2_reg <= icmp_ln75_reg_1142_pp0_iter1_reg;
                trunc_ln1_reg_1376 <= mul_ln78_fu_797_p2(32 downto 16);
                trunc_ln_reg_1371 <= mul_ln77_fu_778_p2(32 downto 16);
                    zext_ln75_reg_1107_pp0_iter2_reg(4 downto 0) <= zext_ln75_reg_1107_pp0_iter1_reg(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter1_reg = ap_const_lv1_1))) then
                trunc_ln77_1_reg_1381 <= mul_ln77_1_fu_819_p2(32 downto 16);
                trunc_ln77_2_reg_1386 <= mul_ln77_2_fu_853_p2(32 downto 16);
                trunc_ln77_3_reg_1391 <= mul_ln77_3_fu_872_p2(32 downto 16);
                trunc_ln77_4_reg_1396 <= mul_ln77_4_fu_891_p2(32 downto 16);
                trunc_ln77_5_reg_1401 <= mul_ln77_5_fu_910_p2(32 downto 16);
                trunc_ln77_6_reg_1406 <= mul_ln77_6_fu_929_p2(32 downto 16);
                trunc_ln77_7_reg_1411 <= mul_ln77_7_fu_951_p2(32 downto 16);
                trunc_ln78_1_reg_1416 <= mul_ln78_1_fu_970_p2(32 downto 16);
                trunc_ln78_2_reg_1421 <= mul_ln78_2_fu_989_p2(32 downto 16);
                trunc_ln78_3_reg_1426 <= mul_ln78_3_fu_1008_p2(32 downto 16);
                trunc_ln78_4_reg_1431 <= mul_ln78_4_fu_1027_p2(32 downto 16);
                trunc_ln78_5_reg_1436 <= mul_ln78_5_fu_1046_p2(32 downto 16);
                trunc_ln78_6_reg_1441 <= mul_ln78_6_fu_1065_p2(32 downto 16);
                trunc_ln78_7_reg_1446 <= mul_ln78_7_fu_1084_p2(32 downto 16);
            end if;
        end if;
    end process;
    zext_ln75_reg_1107(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_1107_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln75_reg_1107_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln75_fu_761_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv8_8));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln75_fu_684_p2)
    begin
        if (((icmp_ln75_fu_684_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_2_fu_118, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i <= i_2_fu_118;
        end if; 
    end process;

    delay_line_I_0_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_0_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_I_1_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_1_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_I_2_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_2_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_I_3_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_3_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_I_4_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_4_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_I_5_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_5_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_I_6_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_6_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_I_7_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_I_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_I_7_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_0_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_0_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_1_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_1_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_2_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_2_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_3_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_3_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_4_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_4_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_5_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_5_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_6_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_6_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_line_Q_7_address0 <= zext_ln75_fu_658_p1(5 - 1 downto 0);

    delay_line_Q_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_line_Q_7_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_1_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_1_ce0 <= ap_const_logic_1;
        else 
            filt_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_1_d0 <= trunc_ln77_1_reg_1381;

    filt_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_1_we0 <= ap_const_logic_1;
        else 
            filt_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_2_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_2_ce0 <= ap_const_logic_1;
        else 
            filt_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_2_d0 <= trunc_ln77_2_reg_1386;

    filt_I_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_2_we0 <= ap_const_logic_1;
        else 
            filt_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_3_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_3_ce0 <= ap_const_logic_1;
        else 
            filt_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_3_d0 <= trunc_ln77_3_reg_1391;

    filt_I_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_3_we0 <= ap_const_logic_1;
        else 
            filt_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_4_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_4_ce0 <= ap_const_logic_1;
        else 
            filt_I_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_4_d0 <= trunc_ln77_4_reg_1396;

    filt_I_4_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_4_we0 <= ap_const_logic_1;
        else 
            filt_I_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_5_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_5_ce0 <= ap_const_logic_1;
        else 
            filt_I_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_5_d0 <= trunc_ln77_5_reg_1401;

    filt_I_5_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_5_we0 <= ap_const_logic_1;
        else 
            filt_I_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_6_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_6_ce0 <= ap_const_logic_1;
        else 
            filt_I_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_6_d0 <= trunc_ln77_6_reg_1406;

    filt_I_6_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_6_we0 <= ap_const_logic_1;
        else 
            filt_I_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_7_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_7_ce0 <= ap_const_logic_1;
        else 
            filt_I_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_7_d0 <= trunc_ln77_7_reg_1411;

    filt_I_7_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_7_we0 <= ap_const_logic_1;
        else 
            filt_I_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_ce0 <= ap_const_logic_1;
        else 
            filt_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_d0 <= trunc_ln_reg_1371;

    filt_I_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_I_we0 <= ap_const_logic_1;
        else 
            filt_I_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_1_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_1_ce0 <= ap_const_logic_1;
        else 
            filt_Q_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_1_d0 <= trunc_ln78_1_reg_1416;

    filt_Q_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_1_we0 <= ap_const_logic_1;
        else 
            filt_Q_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_2_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_2_ce0 <= ap_const_logic_1;
        else 
            filt_Q_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_2_d0 <= trunc_ln78_2_reg_1421;

    filt_Q_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_2_we0 <= ap_const_logic_1;
        else 
            filt_Q_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_3_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_3_ce0 <= ap_const_logic_1;
        else 
            filt_Q_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_3_d0 <= trunc_ln78_3_reg_1426;

    filt_Q_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_3_we0 <= ap_const_logic_1;
        else 
            filt_Q_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_4_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_4_ce0 <= ap_const_logic_1;
        else 
            filt_Q_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_4_d0 <= trunc_ln78_4_reg_1431;

    filt_Q_4_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_4_we0 <= ap_const_logic_1;
        else 
            filt_Q_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_5_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_5_ce0 <= ap_const_logic_1;
        else 
            filt_Q_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_5_d0 <= trunc_ln78_5_reg_1436;

    filt_Q_5_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_5_we0 <= ap_const_logic_1;
        else 
            filt_Q_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_6_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_6_ce0 <= ap_const_logic_1;
        else 
            filt_Q_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_6_d0 <= trunc_ln78_6_reg_1441;

    filt_Q_6_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_6_we0 <= ap_const_logic_1;
        else 
            filt_Q_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_7_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_7_ce0 <= ap_const_logic_1;
        else 
            filt_Q_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_7_d0 <= trunc_ln78_7_reg_1446;

    filt_Q_7_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln75_reg_1142_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln75_reg_1142_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_7_we0 <= ap_const_logic_1;
        else 
            filt_Q_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_address0 <= zext_ln75_reg_1107_pp0_iter2_reg(5 - 1 downto 0);

    filt_Q_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_ce0 <= ap_const_logic_1;
        else 
            filt_Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_d0 <= trunc_ln1_reg_1376;

    filt_Q_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            filt_Q_we0 <= ap_const_logic_1;
        else 
            filt_Q_we0 <= ap_const_logic_0;
        end if; 
    end process;

    h_address0 <= zext_ln77_5_fu_756_p1(8 - 1 downto 0);
    h_address1 <= zext_ln77_4_fu_745_p1(8 - 1 downto 0);
    h_address2 <= zext_ln77_3_fu_734_p1(8 - 1 downto 0);
    h_address3 <= zext_ln77_2_fu_723_p1(8 - 1 downto 0);
    h_address4 <= zext_ln77_1_fu_712_p1(8 - 1 downto 0);
    h_address5 <= zext_ln77_fu_701_p1(8 - 1 downto 0);
    h_address6 <= zext_ln75_1_fu_690_p1(8 - 1 downto 0);
    h_address7 <= i_2_cast_fu_643_p1(8 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce1 <= ap_const_logic_1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce2 <= ap_const_logic_1;
        else 
            h_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce3 <= ap_const_logic_1;
        else 
            h_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce4 <= ap_const_logic_1;
        else 
            h_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce5 <= ap_const_logic_1;
        else 
            h_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce6 <= ap_const_logic_1;
        else 
            h_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            h_ce7 <= ap_const_logic_1;
        else 
            h_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_cast_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    icmp_ln75_fu_684_p2 <= "1" when (unsigned(or_ln75_fu_678_p2) < unsigned(ap_const_lv8_C1)) else "0";
    lshr_ln3_fu_648_p4 <= ap_sig_allocacmp_i(7 downto 3);
    mul_ln77_1_fu_819_p0 <= sext_ln77_3_fu_816_p1(15 - 1 downto 0);
    mul_ln77_2_fu_853_p1 <= sext_ln77_4_fu_835_p1(15 - 1 downto 0);
    mul_ln77_3_fu_872_p1 <= sext_ln77_5_fu_838_p1(15 - 1 downto 0);
    mul_ln77_4_fu_891_p1 <= sext_ln77_6_fu_841_p1(15 - 1 downto 0);
    mul_ln77_5_fu_910_p1 <= sext_ln77_7_fu_844_p1(15 - 1 downto 0);
    mul_ln77_6_fu_929_p1 <= sext_ln77_8_fu_847_p1(15 - 1 downto 0);
    mul_ln77_7_fu_951_p0 <= sext_ln77_15_fu_948_p1(15 - 1 downto 0);
    mul_ln77_fu_778_p0 <= sext_ln77_1_fu_775_p1(15 - 1 downto 0);
    mul_ln78_1_fu_970_p1 <= sext_ln77_3_fu_816_p1(15 - 1 downto 0);
    mul_ln78_2_fu_989_p1 <= sext_ln77_4_fu_835_p1(15 - 1 downto 0);
    mul_ln78_3_fu_1008_p1 <= sext_ln77_5_fu_838_p1(15 - 1 downto 0);
    mul_ln78_4_fu_1027_p1 <= sext_ln77_6_fu_841_p1(15 - 1 downto 0);
    mul_ln78_5_fu_1046_p1 <= sext_ln77_7_fu_844_p1(15 - 1 downto 0);
    mul_ln78_6_fu_1065_p1 <= sext_ln77_8_fu_847_p1(15 - 1 downto 0);
    mul_ln78_7_fu_1084_p1 <= sext_ln77_15_fu_948_p1(15 - 1 downto 0);
    mul_ln78_fu_797_p1 <= sext_ln77_1_fu_775_p1(15 - 1 downto 0);
    or_ln75_1_fu_695_p2 <= (ap_sig_allocacmp_i or ap_const_lv8_2);
    or_ln75_2_fu_706_p2 <= (ap_sig_allocacmp_i or ap_const_lv8_3);
    or_ln75_3_fu_717_p2 <= (ap_sig_allocacmp_i or ap_const_lv8_4);
    or_ln75_4_fu_728_p2 <= (ap_sig_allocacmp_i or ap_const_lv8_5);
    or_ln75_5_fu_739_p2 <= (ap_sig_allocacmp_i or ap_const_lv8_6);
    or_ln75_6_fu_750_p2 <= (ap_sig_allocacmp_i or ap_const_lv8_7);
    or_ln75_fu_678_p2 <= (ap_sig_allocacmp_i or ap_const_lv8_1);
        sext_ln77_15_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_7_reg_1331),33));

        sext_ln77_1_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_reg_1256),33));

        sext_ln77_3_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_1_reg_1271),33));

        sext_ln77_4_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_2_reg_1276),33));

        sext_ln77_5_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_3_reg_1281),33));

        sext_ln77_6_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_4_reg_1286),33));

        sext_ln77_7_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_5_reg_1291),33));

        sext_ln77_8_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_load_6_reg_1296),33));

    zext_ln75_1_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_fu_678_p2),64));
    zext_ln75_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_648_p4),64));
    zext_ln77_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_2_fu_706_p2),64));
    zext_ln77_2_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_3_fu_717_p2),64));
    zext_ln77_3_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_4_fu_728_p2),64));
    zext_ln77_4_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_5_fu_739_p2),64));
    zext_ln77_5_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_6_fu_750_p2),64));
    zext_ln77_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln75_1_fu_695_p2),64));
end behav;
