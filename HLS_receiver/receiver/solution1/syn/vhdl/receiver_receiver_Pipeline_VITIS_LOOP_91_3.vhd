-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_91_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filt_I_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_ce0 : OUT STD_LOGIC;
    filt_I_we0 : OUT STD_LOGIC;
    filt_I_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_ce0 : OUT STD_LOGIC;
    filt_Q_we0 : OUT STD_LOGIC;
    filt_Q_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_I_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_1_ce0 : OUT STD_LOGIC;
    filt_I_1_we0 : OUT STD_LOGIC;
    filt_I_1_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_1_ce0 : OUT STD_LOGIC;
    filt_Q_1_we0 : OUT STD_LOGIC;
    filt_Q_1_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_I_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_2_ce0 : OUT STD_LOGIC;
    filt_I_2_we0 : OUT STD_LOGIC;
    filt_I_2_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_2_ce0 : OUT STD_LOGIC;
    filt_Q_2_we0 : OUT STD_LOGIC;
    filt_Q_2_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_I_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_3_ce0 : OUT STD_LOGIC;
    filt_I_3_we0 : OUT STD_LOGIC;
    filt_I_3_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_3_ce0 : OUT STD_LOGIC;
    filt_Q_3_we0 : OUT STD_LOGIC;
    filt_Q_3_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_I_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_4_ce0 : OUT STD_LOGIC;
    filt_I_4_we0 : OUT STD_LOGIC;
    filt_I_4_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_4_ce0 : OUT STD_LOGIC;
    filt_Q_4_we0 : OUT STD_LOGIC;
    filt_Q_4_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_I_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_5_ce0 : OUT STD_LOGIC;
    filt_I_5_we0 : OUT STD_LOGIC;
    filt_I_5_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_5_ce0 : OUT STD_LOGIC;
    filt_Q_5_we0 : OUT STD_LOGIC;
    filt_Q_5_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_I_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_6_ce0 : OUT STD_LOGIC;
    filt_I_6_we0 : OUT STD_LOGIC;
    filt_I_6_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_6_ce0 : OUT STD_LOGIC;
    filt_Q_6_we0 : OUT STD_LOGIC;
    filt_Q_6_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_I_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_I_7_ce0 : OUT STD_LOGIC;
    filt_I_7_we0 : OUT STD_LOGIC;
    filt_I_7_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    filt_Q_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    filt_Q_7_ce0 : OUT STD_LOGIC;
    filt_Q_7_we0 : OUT STD_LOGIC;
    filt_Q_7_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    delay_line_I_ce0 : OUT STD_LOGIC;
    delay_line_I_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_I_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    delay_line_I_ce1 : OUT STD_LOGIC;
    delay_line_I_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    delay_line_Q_ce0 : OUT STD_LOGIC;
    delay_line_Q_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    delay_line_Q_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    delay_line_Q_ce1 : OUT STD_LOGIC;
    delay_line_Q_q1 : IN STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of receiver_receiver_Pipeline_VITIS_LOOP_91_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_61 : STD_LOGIC_VECTOR (6 downto 0) := "1100001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln91_reg_1068 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_ce1 : STD_LOGIC;
    signal h_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_521 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_525 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_529 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_533 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_537 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_541 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_1_reg_1037 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1_reg_1048 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln91_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_1117 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln2_reg_1122 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln93_1_reg_1127 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_1_reg_1132 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln91_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_reg_1167 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln93_2_reg_1183 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_2_reg_1188 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln93_3_reg_1193 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_3_reg_1198 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln93_4_reg_1233 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_4_reg_1238 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln93_5_reg_1243 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_5_reg_1248 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln93_6_reg_1253 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_6_reg_1258 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln93_7_reg_1263 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_7_reg_1268 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal i_2_cast_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln91_1_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln93_1_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_2_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln93_3_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln93_4_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_5_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_90 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln91_fu_844_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln91_fu_570_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln91_1_fu_589_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln91_2_fu_601_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln93_fu_621_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_1_fu_617_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_fu_621_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_fu_641_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_fu_641_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_1_fu_665_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_3_fu_661_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_1_fu_665_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_1_fu_685_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_1_fu_685_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln91_3_fu_701_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln91_4_fu_713_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln93_2_fu_740_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_5_fu_736_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_2_fu_740_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_2_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_2_fu_760_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_3_fu_784_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_7_fu_780_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_3_fu_784_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_3_fu_804_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_3_fu_804_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal or_ln91_5_fu_820_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln91_6_fu_832_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln93_4_fu_862_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_9_fu_858_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_4_fu_862_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_4_fu_882_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_4_fu_882_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_5_fu_906_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_11_fu_902_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_5_fu_906_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_5_fu_926_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_5_fu_926_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_6_fu_950_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_13_fu_946_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_6_fu_950_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_6_fu_970_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_6_fu_970_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_7_fu_994_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_15_fu_990_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln93_7_fu_994_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln94_7_fu_1014_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln94_7_fu_1014_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component receiver_mul_16s_18s_34_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component receiver_mul_18s_16s_34_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component receiver_receiver_Pipeline_VITIS_LOOP_91_3_h_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component receiver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    h_U : component receiver_receiver_Pipeline_VITIS_LOOP_91_3_h_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 97,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        q0 => h_q0,
        address1 => h_address1,
        ce1 => h_ce1,
        q1 => h_q1);

    mul_16s_18s_34_1_1_U8 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_fu_621_p0,
        din1 => reg_521,
        dout => mul_ln93_fu_621_p2);

    mul_18s_16s_34_1_1_U9 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_529,
        din1 => mul_ln94_fu_641_p1,
        dout => mul_ln94_fu_641_p2);

    mul_16s_18s_34_1_1_U10 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_1_fu_665_p0,
        din1 => reg_533,
        dout => mul_ln93_1_fu_665_p2);

    mul_18s_16s_34_1_1_U11 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_541,
        din1 => mul_ln94_1_fu_685_p1,
        dout => mul_ln94_1_fu_685_p2);

    mul_16s_18s_34_1_1_U12 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_2_fu_740_p0,
        din1 => reg_521,
        dout => mul_ln93_2_fu_740_p2);

    mul_18s_16s_34_1_1_U13 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_529,
        din1 => mul_ln94_2_fu_760_p1,
        dout => mul_ln94_2_fu_760_p2);

    mul_16s_18s_34_1_1_U14 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_3_fu_784_p0,
        din1 => reg_533,
        dout => mul_ln93_3_fu_784_p2);

    mul_18s_16s_34_1_1_U15 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_541,
        din1 => mul_ln94_3_fu_804_p1,
        dout => mul_ln94_3_fu_804_p2);

    mul_16s_18s_34_1_1_U16 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_4_fu_862_p0,
        din1 => reg_521,
        dout => mul_ln93_4_fu_862_p2);

    mul_18s_16s_34_1_1_U17 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_529,
        din1 => mul_ln94_4_fu_882_p1,
        dout => mul_ln94_4_fu_882_p2);

    mul_16s_18s_34_1_1_U18 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_5_fu_906_p0,
        din1 => reg_533,
        dout => mul_ln93_5_fu_906_p2);

    mul_18s_16s_34_1_1_U19 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_541,
        din1 => mul_ln94_5_fu_926_p1,
        dout => mul_ln94_5_fu_926_p2);

    mul_16s_18s_34_1_1_U20 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_6_fu_950_p0,
        din1 => reg_521,
        dout => mul_ln93_6_fu_950_p2);

    mul_18s_16s_34_1_1_U21 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_529,
        din1 => mul_ln94_6_fu_970_p1,
        dout => mul_ln94_6_fu_970_p2);

    mul_16s_18s_34_1_1_U22 : component receiver_mul_16s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln93_7_fu_994_p0,
        din1 => reg_533,
        dout => mul_ln93_7_fu_994_p2);

    mul_18s_16s_34_1_1_U23 : component receiver_mul_18s_16s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        din0 => reg_541,
        din1 => mul_ln94_7_fu_1014_p1,
        dout => mul_ln94_7_fu_1014_p2);

    flow_control_loop_pipe_sequential_init_U : component receiver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_90 <= ap_const_lv7_0;
            elsif (((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                i_fu_90 <= add_ln91_fu_844_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_1037 <= ap_sig_allocacmp_i_1;
                icmp_ln91_reg_1068 <= icmp_ln91_fu_576_p2;
                lshr_ln1_reg_1048 <= ap_sig_allocacmp_i_1(6 downto 3);
                trunc_ln93_4_reg_1233 <= mul_ln93_4_fu_862_p2(33 downto 16);
                trunc_ln93_5_reg_1243 <= mul_ln93_5_fu_906_p2(33 downto 16);
                trunc_ln94_4_reg_1238 <= mul_ln94_4_fu_882_p2(33 downto 16);
                trunc_ln94_5_reg_1248 <= mul_ln94_5_fu_926_p2(33 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_521 <= delay_line_I_q1;
                reg_525 <= h_q1;
                reg_529 <= delay_line_Q_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_533 <= delay_line_I_q0;
                reg_537 <= h_q0;
                reg_541 <= delay_line_Q_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln1_reg_1117 <= mul_ln93_fu_621_p2(33 downto 16);
                trunc_ln2_reg_1122 <= mul_ln94_fu_641_p2(33 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln93_1_reg_1127 <= mul_ln93_1_fu_665_p2(33 downto 16);
                trunc_ln94_1_reg_1132 <= mul_ln94_1_fu_685_p2(33 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                trunc_ln93_2_reg_1183 <= mul_ln93_2_fu_740_p2(33 downto 16);
                trunc_ln93_3_reg_1193 <= mul_ln93_3_fu_784_p2(33 downto 16);
                trunc_ln94_2_reg_1188 <= mul_ln94_2_fu_760_p2(33 downto 16);
                trunc_ln94_3_reg_1198 <= mul_ln94_3_fu_804_p2(33 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln93_6_reg_1253 <= mul_ln93_6_fu_950_p2(33 downto 16);
                trunc_ln93_7_reg_1263 <= mul_ln93_7_fu_994_p2(33 downto 16);
                trunc_ln94_6_reg_1258 <= mul_ln94_6_fu_970_p2(33 downto 16);
                trunc_ln94_7_reg_1268 <= mul_ln94_7_fu_1014_p2(33 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    zext_ln91_reg_1167(3 downto 0) <= zext_ln91_fu_725_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln91_reg_1167(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln91_fu_844_p2 <= std_logic_vector(unsigned(i_1_reg_1037) + unsigned(ap_const_lv7_8));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln91_reg_1068)
    begin
        if (((icmp_ln91_reg_1068 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_90;
        end if; 
    end process;


    delay_line_I_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln91_1_fu_582_p1, ap_block_pp0_stage1, zext_ln93_1_fu_606_p1, ap_block_pp0_stage2, zext_ln93_3_fu_718_p1, ap_block_pp0_stage3, zext_ln93_5_fu_837_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                delay_line_I_address0 <= zext_ln93_5_fu_837_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                delay_line_I_address0 <= zext_ln93_3_fu_718_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                delay_line_I_address0 <= zext_ln93_1_fu_606_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                delay_line_I_address0 <= zext_ln91_1_fu_582_p1(7 - 1 downto 0);
            else 
                delay_line_I_address0 <= "XXXXXXX";
            end if;
        else 
            delay_line_I_address0 <= "XXXXXXX";
        end if; 
    end process;


    delay_line_I_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, i_2_cast_fu_553_p1, ap_block_pp0_stage0, zext_ln93_fu_594_p1, ap_block_pp0_stage1, zext_ln93_2_fu_706_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln93_4_fu_825_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                delay_line_I_address1 <= zext_ln93_4_fu_825_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                delay_line_I_address1 <= zext_ln93_2_fu_706_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                delay_line_I_address1 <= zext_ln93_fu_594_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                delay_line_I_address1 <= i_2_cast_fu_553_p1(7 - 1 downto 0);
            else 
                delay_line_I_address1 <= "XXXXXXX";
            end if;
        else 
            delay_line_I_address1 <= "XXXXXXX";
        end if; 
    end process;


    delay_line_I_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            delay_line_I_ce0 <= ap_const_logic_1;
        else 
            delay_line_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_line_I_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            delay_line_I_ce1 <= ap_const_logic_1;
        else 
            delay_line_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_line_Q_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln91_1_fu_582_p1, ap_block_pp0_stage1, zext_ln93_1_fu_606_p1, ap_block_pp0_stage2, zext_ln93_3_fu_718_p1, ap_block_pp0_stage3, zext_ln93_5_fu_837_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                delay_line_Q_address0 <= zext_ln93_5_fu_837_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                delay_line_Q_address0 <= zext_ln93_3_fu_718_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                delay_line_Q_address0 <= zext_ln93_1_fu_606_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                delay_line_Q_address0 <= zext_ln91_1_fu_582_p1(7 - 1 downto 0);
            else 
                delay_line_Q_address0 <= "XXXXXXX";
            end if;
        else 
            delay_line_Q_address0 <= "XXXXXXX";
        end if; 
    end process;


    delay_line_Q_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, i_2_cast_fu_553_p1, ap_block_pp0_stage0, zext_ln93_fu_594_p1, ap_block_pp0_stage1, zext_ln93_2_fu_706_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln93_4_fu_825_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                delay_line_Q_address1 <= zext_ln93_4_fu_825_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                delay_line_Q_address1 <= zext_ln93_2_fu_706_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                delay_line_Q_address1 <= zext_ln93_fu_594_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                delay_line_Q_address1 <= i_2_cast_fu_553_p1(7 - 1 downto 0);
            else 
                delay_line_Q_address1 <= "XXXXXXX";
            end if;
        else 
            delay_line_Q_address1 <= "XXXXXXX";
        end if; 
    end process;


    delay_line_Q_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            delay_line_Q_ce0 <= ap_const_logic_1;
        else 
            delay_line_Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_line_Q_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            delay_line_Q_ce1 <= ap_const_logic_1;
        else 
            delay_line_Q_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_1_address0 <= zext_ln91_fu_725_p1(4 - 1 downto 0);

    filt_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_I_1_ce0 <= ap_const_logic_1;
        else 
            filt_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_1_d0 <= trunc_ln93_1_reg_1127;

    filt_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, icmp_ln91_reg_1068, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_I_1_we0 <= ap_const_logic_1;
        else 
            filt_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_2_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_I_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_I_2_ce0 <= ap_const_logic_1;
        else 
            filt_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_2_d0 <= trunc_ln93_2_reg_1183;

    filt_I_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_I_2_we0 <= ap_const_logic_1;
        else 
            filt_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_3_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_I_3_ce0 <= ap_const_logic_1;
        else 
            filt_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_3_d0 <= trunc_ln93_3_reg_1193;

    filt_I_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_I_3_we0 <= ap_const_logic_1;
        else 
            filt_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_4_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_I_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_I_4_ce0 <= ap_const_logic_1;
        else 
            filt_I_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_4_d0 <= trunc_ln93_4_reg_1233;

    filt_I_4_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_I_4_we0 <= ap_const_logic_1;
        else 
            filt_I_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_5_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_I_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_I_5_ce0 <= ap_const_logic_1;
        else 
            filt_I_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_5_d0 <= trunc_ln93_5_reg_1243;

    filt_I_5_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_I_5_we0 <= ap_const_logic_1;
        else 
            filt_I_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_6_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_I_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_I_6_ce0 <= ap_const_logic_1;
        else 
            filt_I_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_6_d0 <= trunc_ln93_6_reg_1253;

    filt_I_6_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_I_6_we0 <= ap_const_logic_1;
        else 
            filt_I_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_7_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_I_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_I_7_ce0 <= ap_const_logic_1;
        else 
            filt_I_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_7_d0 <= trunc_ln93_7_reg_1263;

    filt_I_7_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_I_7_we0 <= ap_const_logic_1;
        else 
            filt_I_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_address0 <= zext_ln91_fu_725_p1(4 - 1 downto 0);

    filt_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_I_ce0 <= ap_const_logic_1;
        else 
            filt_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_I_d0 <= trunc_ln1_reg_1117;

    filt_I_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_I_we0 <= ap_const_logic_1;
        else 
            filt_I_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_1_address0 <= zext_ln91_fu_725_p1(4 - 1 downto 0);

    filt_Q_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_Q_1_ce0 <= ap_const_logic_1;
        else 
            filt_Q_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_1_d0 <= trunc_ln94_1_reg_1132;

    filt_Q_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, icmp_ln91_reg_1068, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln91_reg_1068 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_Q_1_we0 <= ap_const_logic_1;
        else 
            filt_Q_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_2_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_Q_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_Q_2_ce0 <= ap_const_logic_1;
        else 
            filt_Q_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_2_d0 <= trunc_ln94_2_reg_1188;

    filt_Q_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_Q_2_we0 <= ap_const_logic_1;
        else 
            filt_Q_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_3_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_Q_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_Q_3_ce0 <= ap_const_logic_1;
        else 
            filt_Q_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_3_d0 <= trunc_ln94_3_reg_1198;

    filt_Q_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filt_Q_3_we0 <= ap_const_logic_1;
        else 
            filt_Q_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_4_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_Q_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_Q_4_ce0 <= ap_const_logic_1;
        else 
            filt_Q_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_4_d0 <= trunc_ln94_4_reg_1238;

    filt_Q_4_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_Q_4_we0 <= ap_const_logic_1;
        else 
            filt_Q_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_5_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_Q_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_Q_5_ce0 <= ap_const_logic_1;
        else 
            filt_Q_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_5_d0 <= trunc_ln94_5_reg_1248;

    filt_Q_5_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            filt_Q_5_we0 <= ap_const_logic_1;
        else 
            filt_Q_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_6_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_Q_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_Q_6_ce0 <= ap_const_logic_1;
        else 
            filt_Q_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_6_d0 <= trunc_ln94_6_reg_1258;

    filt_Q_6_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_Q_6_we0 <= ap_const_logic_1;
        else 
            filt_Q_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_7_address0 <= zext_ln91_reg_1167(4 - 1 downto 0);

    filt_Q_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_Q_7_ce0 <= ap_const_logic_1;
        else 
            filt_Q_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_7_d0 <= trunc_ln94_7_reg_1268;

    filt_Q_7_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            filt_Q_7_we0 <= ap_const_logic_1;
        else 
            filt_Q_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_address0 <= zext_ln91_fu_725_p1(4 - 1 downto 0);

    filt_Q_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_Q_ce0 <= ap_const_logic_1;
        else 
            filt_Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filt_Q_d0 <= trunc_ln2_reg_1122;

    filt_Q_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            filt_Q_we0 <= ap_const_logic_1;
        else 
            filt_Q_we0 <= ap_const_logic_0;
        end if; 
    end process;


    h_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln91_1_fu_582_p1, ap_block_pp0_stage1, zext_ln93_1_fu_606_p1, ap_block_pp0_stage2, zext_ln93_3_fu_718_p1, ap_block_pp0_stage3, zext_ln93_5_fu_837_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                h_address0 <= zext_ln93_5_fu_837_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                h_address0 <= zext_ln93_3_fu_718_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                h_address0 <= zext_ln93_1_fu_606_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                h_address0 <= zext_ln91_1_fu_582_p1(7 - 1 downto 0);
            else 
                h_address0 <= "XXXXXXX";
            end if;
        else 
            h_address0 <= "XXXXXXX";
        end if; 
    end process;


    h_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, i_2_cast_fu_553_p1, ap_block_pp0_stage0, zext_ln93_fu_594_p1, ap_block_pp0_stage1, zext_ln93_2_fu_706_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln93_4_fu_825_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                h_address1 <= zext_ln93_4_fu_825_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                h_address1 <= zext_ln93_2_fu_706_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                h_address1 <= zext_ln93_fu_594_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                h_address1 <= i_2_cast_fu_553_p1(7 - 1 downto 0);
            else 
                h_address1 <= "XXXXXXX";
            end if;
        else 
            h_address1 <= "XXXXXXX";
        end if; 
    end process;


    h_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            h_ce1 <= ap_const_logic_1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    icmp_ln91_fu_576_p2 <= "1" when (unsigned(or_ln91_fu_570_p2) < unsigned(ap_const_lv7_61)) else "0";
    mul_ln93_1_fu_665_p0 <= sext_ln93_3_fu_661_p1(16 - 1 downto 0);
    mul_ln93_2_fu_740_p0 <= sext_ln93_5_fu_736_p1(16 - 1 downto 0);
    mul_ln93_3_fu_784_p0 <= sext_ln93_7_fu_780_p1(16 - 1 downto 0);
    mul_ln93_4_fu_862_p0 <= sext_ln93_9_fu_858_p1(16 - 1 downto 0);
    mul_ln93_5_fu_906_p0 <= sext_ln93_11_fu_902_p1(16 - 1 downto 0);
    mul_ln93_6_fu_950_p0 <= sext_ln93_13_fu_946_p1(16 - 1 downto 0);
    mul_ln93_7_fu_994_p0 <= sext_ln93_15_fu_990_p1(16 - 1 downto 0);
    mul_ln93_fu_621_p0 <= sext_ln93_1_fu_617_p1(16 - 1 downto 0);
    mul_ln94_1_fu_685_p1 <= sext_ln93_3_fu_661_p1(16 - 1 downto 0);
    mul_ln94_2_fu_760_p1 <= sext_ln93_5_fu_736_p1(16 - 1 downto 0);
    mul_ln94_3_fu_804_p1 <= sext_ln93_7_fu_780_p1(16 - 1 downto 0);
    mul_ln94_4_fu_882_p1 <= sext_ln93_9_fu_858_p1(16 - 1 downto 0);
    mul_ln94_5_fu_926_p1 <= sext_ln93_11_fu_902_p1(16 - 1 downto 0);
    mul_ln94_6_fu_970_p1 <= sext_ln93_13_fu_946_p1(16 - 1 downto 0);
    mul_ln94_7_fu_1014_p1 <= sext_ln93_15_fu_990_p1(16 - 1 downto 0);
    mul_ln94_fu_641_p1 <= sext_ln93_1_fu_617_p1(16 - 1 downto 0);
    or_ln91_1_fu_589_p2 <= (i_1_reg_1037 or ap_const_lv7_2);
    or_ln91_2_fu_601_p2 <= (i_1_reg_1037 or ap_const_lv7_3);
    or_ln91_3_fu_701_p2 <= (i_1_reg_1037 or ap_const_lv7_4);
    or_ln91_4_fu_713_p2 <= (i_1_reg_1037 or ap_const_lv7_5);
    or_ln91_5_fu_820_p2 <= (i_1_reg_1037 or ap_const_lv7_6);
    or_ln91_6_fu_832_p2 <= (i_1_reg_1037 or ap_const_lv7_7);
    or_ln91_fu_570_p2 <= (ap_sig_allocacmp_i_1 or ap_const_lv7_1);
        sext_ln93_11_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_537),34));

        sext_ln93_13_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_525),34));

        sext_ln93_15_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_537),34));

        sext_ln93_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_525),34));

        sext_ln93_3_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_537),34));

        sext_ln93_5_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_525),34));

        sext_ln93_7_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_537),34));

        sext_ln93_9_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_525),34));

    zext_ln91_1_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_fu_570_p2),64));
    zext_ln91_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_1048),64));
    zext_ln93_1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_2_fu_601_p2),64));
    zext_ln93_2_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_3_fu_701_p2),64));
    zext_ln93_3_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_4_fu_713_p2),64));
    zext_ln93_4_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_5_fu_820_p2),64));
    zext_ln93_5_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_6_fu_832_p2),64));
    zext_ln93_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln91_1_fu_589_p2),64));
end behav;
