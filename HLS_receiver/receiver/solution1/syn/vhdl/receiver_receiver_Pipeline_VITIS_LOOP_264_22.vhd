-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity receiver_receiver_Pipeline_VITIS_LOOP_264_22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln268 : IN STD_LOGIC_VECTOR (23 downto 0);
    sext_ln268_2 : IN STD_LOGIC_VECTOR (23 downto 0);
    result_I_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_0_ce0 : OUT STD_LOGIC;
    result_I_0_we0 : OUT STD_LOGIC;
    result_I_0_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_I_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_1_ce0 : OUT STD_LOGIC;
    result_I_1_we0 : OUT STD_LOGIC;
    result_I_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_I_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_2_ce0 : OUT STD_LOGIC;
    result_I_2_we0 : OUT STD_LOGIC;
    result_I_2_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_I_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_3_ce0 : OUT STD_LOGIC;
    result_I_3_we0 : OUT STD_LOGIC;
    result_I_3_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_I_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_4_ce0 : OUT STD_LOGIC;
    result_I_4_we0 : OUT STD_LOGIC;
    result_I_4_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_I_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_5_ce0 : OUT STD_LOGIC;
    result_I_5_we0 : OUT STD_LOGIC;
    result_I_5_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_I_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_6_ce0 : OUT STD_LOGIC;
    result_I_6_we0 : OUT STD_LOGIC;
    result_I_6_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_I_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_I_7_ce0 : OUT STD_LOGIC;
    result_I_7_we0 : OUT STD_LOGIC;
    result_I_7_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_0_ce0 : OUT STD_LOGIC;
    result_Q_0_we0 : OUT STD_LOGIC;
    result_Q_0_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_1_ce0 : OUT STD_LOGIC;
    result_Q_1_we0 : OUT STD_LOGIC;
    result_Q_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_2_ce0 : OUT STD_LOGIC;
    result_Q_2_we0 : OUT STD_LOGIC;
    result_Q_2_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_3_ce0 : OUT STD_LOGIC;
    result_Q_3_we0 : OUT STD_LOGIC;
    result_Q_3_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_4_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_4_ce0 : OUT STD_LOGIC;
    result_Q_4_we0 : OUT STD_LOGIC;
    result_Q_4_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_5_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_5_ce0 : OUT STD_LOGIC;
    result_Q_5_we0 : OUT STD_LOGIC;
    result_Q_5_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_6_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_6_ce0 : OUT STD_LOGIC;
    result_Q_6_we0 : OUT STD_LOGIC;
    result_Q_6_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    result_Q_7_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    result_Q_7_ce0 : OUT STD_LOGIC;
    result_Q_7_we0 : OUT STD_LOGIC;
    result_Q_7_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    matched_I_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_I_12_ce0 : OUT STD_LOGIC;
    matched_I_12_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    matched_I_12_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_I_12_ce1 : OUT STD_LOGIC;
    matched_I_12_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
    matched_Q_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_Q_12_ce0 : OUT STD_LOGIC;
    matched_Q_12_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    matched_Q_12_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    matched_Q_12_ce1 : OUT STD_LOGIC;
    matched_Q_12_q1 : IN STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of receiver_receiver_Pipeline_VITIS_LOOP_264_22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_EC : STD_LOGIC_VECTOR (12 downto 0) := "0000011101100";
    constant ap_const_lv8_E0 : STD_LOGIC_VECTOR (7 downto 0) := "11100000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv13_100 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln264_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_482 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_486 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_490 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_494 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln268_2_cast_fu_498_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_2_cast_reg_1070 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_cast_fu_502_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_cast_reg_1090 : STD_LOGIC_VECTOR (39 downto 0);
    signal j_1_reg_1110 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln264_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln264_reg_1116_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_reg_1120 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln263_1_fu_528_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln263_1_reg_1125 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln268_1_fu_578_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_1_reg_1175 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_3_fu_582_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_3_reg_1181 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_4_fu_618_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_4_reg_1207 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_11_fu_627_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_11_reg_1213 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln268_5_fu_665_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_5_reg_1239 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_6_fu_674_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_6_reg_1245 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_12_fu_683_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_12_reg_1256 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_13_fu_692_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_13_reg_1262 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_586_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln268_reg_1268 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_591_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_1_reg_1273 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_622_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_2_reg_1278 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_7_fu_721_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_7_reg_1283 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_8_fu_730_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_8_reg_1289 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_8_reg_1295 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_14_fu_739_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_14_reg_1300 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_15_fu_748_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_15_reg_1306 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_669_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_3_reg_1312 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_678_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_4_reg_1317 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_9_fu_757_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_9_reg_1322 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_10_fu_766_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_10_reg_1328 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_687_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_9_reg_1334 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_696_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_10_reg_1339 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_16_fu_770_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_16_reg_1344 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_17_fu_779_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln268_17_reg_1350 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln263_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln263_reg_1356 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_725_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_5_reg_1372 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_734_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_6_reg_1377 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_11_reg_1382 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_752_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_12_reg_1387 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_7_reg_1392 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_774_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_13_reg_1397 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_783_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln268_14_reg_1402 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal mul_ln269_15_reg_1407 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln263_1_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln268_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_1_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln268_2_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_3_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln268_4_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_5_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln268_6_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln264_7_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_112 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln270_fu_701_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln264_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln264_1_fu_556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln264_2_fu_567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_586_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_591_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln264_3_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln264_4_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_622_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_631_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln264_5_fu_643_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln264_6_fu_654_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_669_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_678_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_687_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_696_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_725_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_734_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_743_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_752_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_774_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_783_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_960_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_966_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_978_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_972_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_996_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_984_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1002_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_990_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1020_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1008_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1026_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1014_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1038_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1032_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1044_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1050_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_960_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_960_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_966_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_966_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_972_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_972_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_978_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_978_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_984_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_984_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_990_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_990_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_996_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_996_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1002_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1002_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1008_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1008_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1014_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1014_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1020_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1020_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1026_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1026_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1032_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1032_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1038_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1038_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1044_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1044_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1050_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1050_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component receiver_mul_24s_18s_40_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component receiver_mac_mulsub_24s_18s_40s_40_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component receiver_mac_muladd_24s_18s_40s_40_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component receiver_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_24s_18s_40_3_1_U790 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_586_p0,
        din1 => reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_586_p2);

    mul_24s_18s_40_3_1_U791 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_591_p0,
        din1 => reg_486,
        ce => ap_const_logic_1,
        dout => grp_fu_591_p2);

    mul_24s_18s_40_3_1_U792 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_622_p0,
        din1 => reg_490,
        ce => ap_const_logic_1,
        dout => grp_fu_622_p2);

    mul_24s_18s_40_3_1_U793 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_631_p0,
        din1 => reg_494,
        ce => ap_const_logic_1,
        dout => grp_fu_631_p2);

    mul_24s_18s_40_3_1_U794 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_669_p0,
        din1 => reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_669_p2);

    mul_24s_18s_40_3_1_U795 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_678_p0,
        din1 => reg_490,
        ce => ap_const_logic_1,
        dout => grp_fu_678_p2);

    mul_24s_18s_40_3_1_U796 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_687_p0,
        din1 => reg_486,
        ce => ap_const_logic_1,
        dout => grp_fu_687_p2);

    mul_24s_18s_40_3_1_U797 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_696_p0,
        din1 => reg_494,
        ce => ap_const_logic_1,
        dout => grp_fu_696_p2);

    mul_24s_18s_40_3_1_U798 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_725_p0,
        din1 => reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_725_p2);

    mul_24s_18s_40_3_1_U799 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_734_p0,
        din1 => reg_490,
        ce => ap_const_logic_1,
        dout => grp_fu_734_p2);

    mul_24s_18s_40_3_1_U800 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_743_p0,
        din1 => reg_486,
        ce => ap_const_logic_1,
        dout => grp_fu_743_p2);

    mul_24s_18s_40_3_1_U801 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_752_p0,
        din1 => reg_494,
        ce => ap_const_logic_1,
        dout => grp_fu_752_p2);

    mul_24s_18s_40_3_1_U802 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_761_p0,
        din1 => reg_482,
        ce => ap_const_logic_1,
        dout => grp_fu_761_p2);

    mul_24s_18s_40_3_1_U803 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_774_p0,
        din1 => reg_486,
        ce => ap_const_logic_1,
        dout => grp_fu_774_p2);

    mul_24s_18s_40_3_1_U804 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_783_p0,
        din1 => reg_490,
        ce => ap_const_logic_1,
        dout => grp_fu_783_p2);

    mul_24s_18s_40_3_1_U805 : component receiver_mul_24s_18s_40_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_788_p0,
        din1 => reg_494,
        ce => ap_const_logic_1,
        dout => grp_fu_788_p2);

    mac_mulsub_24s_18s_40s_40_4_1_U806 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_960_p0,
        din1 => grp_fu_960_p1,
        din2 => mul_ln268_reg_1268,
        ce => ap_const_logic_1,
        dout => grp_fu_960_p3);

    mac_muladd_24s_18s_40s_40_4_1_U807 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_966_p0,
        din1 => grp_fu_966_p1,
        din2 => mul_ln269_1_reg_1273,
        ce => ap_const_logic_1,
        dout => grp_fu_966_p3);

    mac_muladd_24s_18s_40s_40_4_1_U808 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_972_p0,
        din1 => grp_fu_972_p1,
        din2 => mul_ln269_8_reg_1295,
        ce => ap_const_logic_1,
        dout => grp_fu_972_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U809 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_978_p0,
        din1 => grp_fu_978_p1,
        din2 => mul_ln269_2_reg_1278,
        ce => ap_const_logic_1,
        dout => grp_fu_978_p3);

    mac_muladd_24s_18s_40s_40_4_1_U810 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_984_p0,
        din1 => grp_fu_984_p1,
        din2 => mul_ln269_9_reg_1334,
        ce => ap_const_logic_1,
        dout => grp_fu_984_p3);

    mac_muladd_24s_18s_40s_40_4_1_U811 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_990_p0,
        din1 => grp_fu_990_p1,
        din2 => mul_ln269_10_reg_1339,
        ce => ap_const_logic_1,
        dout => grp_fu_990_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U812 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_996_p0,
        din1 => grp_fu_996_p1,
        din2 => mul_ln269_3_reg_1312,
        ce => ap_const_logic_1,
        dout => grp_fu_996_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U813 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1002_p0,
        din1 => grp_fu_1002_p1,
        din2 => mul_ln269_4_reg_1317,
        ce => ap_const_logic_1,
        dout => grp_fu_1002_p3);

    mac_muladd_24s_18s_40s_40_4_1_U814 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1008_p0,
        din1 => grp_fu_1008_p1,
        din2 => mul_ln269_11_reg_1382,
        ce => ap_const_logic_1,
        dout => grp_fu_1008_p3);

    mac_muladd_24s_18s_40s_40_4_1_U815 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1014_p0,
        din1 => grp_fu_1014_p1,
        din2 => mul_ln269_12_reg_1387,
        ce => ap_const_logic_1,
        dout => grp_fu_1014_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U816 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1020_p0,
        din1 => grp_fu_1020_p1,
        din2 => mul_ln269_5_reg_1372,
        ce => ap_const_logic_1,
        dout => grp_fu_1020_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U817 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1026_p0,
        din1 => grp_fu_1026_p1,
        din2 => mul_ln269_6_reg_1377,
        ce => ap_const_logic_1,
        dout => grp_fu_1026_p3);

    mac_muladd_24s_18s_40s_40_4_1_U818 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1032_p0,
        din1 => grp_fu_1032_p1,
        din2 => mul_ln269_13_reg_1397,
        ce => ap_const_logic_1,
        dout => grp_fu_1032_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U819 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1038_p0,
        din1 => grp_fu_1038_p1,
        din2 => mul_ln269_7_reg_1392,
        ce => ap_const_logic_1,
        dout => grp_fu_1038_p3);

    mac_mulsub_24s_18s_40s_40_4_1_U820 : component receiver_mac_mulsub_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1044_p0,
        din1 => grp_fu_1044_p1,
        din2 => mul_ln268_14_reg_1402,
        ce => ap_const_logic_1,
        dout => grp_fu_1044_p3);

    mac_muladd_24s_18s_40s_40_4_1_U821 : component receiver_mac_muladd_24s_18s_40s_40_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 18,
        din2_WIDTH => 40,
        dout_WIDTH => 40)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1050_p0,
        din1 => grp_fu_1050_p1,
        din2 => mul_ln269_15_reg_1407,
        ce => ap_const_logic_1,
        dout => grp_fu_1050_p3);

    flow_control_loop_pipe_sequential_init_U : component receiver_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_112 <= ap_const_lv13_EC;
            elsif (((icmp_ln264_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                i_fu_112 <= add_ln270_fu_701_p2;
            end if; 
        end if;
    end process;

    j_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_108 <= ap_const_lv8_0;
            elsif (((icmp_ln264_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                j_fu_108 <= add_ln264_7_fu_706_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln264_fu_519_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_load_reg_1120 <= ap_sig_allocacmp_i_load;
                lshr_ln263_1_reg_1125 <= ap_sig_allocacmp_i_load(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln264_reg_1116 <= icmp_ln264_fu_519_p2;
                icmp_ln264_reg_1116_pp0_iter1_reg <= icmp_ln264_reg_1116;
                j_1_reg_1110 <= ap_sig_allocacmp_j_1;
                mul_ln268_reg_1268 <= grp_fu_586_p2;
                mul_ln269_1_reg_1273 <= grp_fu_591_p2;
                mul_ln269_2_reg_1278 <= grp_fu_622_p2;
                mul_ln269_8_reg_1295 <= grp_fu_631_p2;
                sext_ln268_14_reg_1300 <= sext_ln268_14_fu_739_p1;
                sext_ln268_15_reg_1306 <= sext_ln268_15_fu_748_p1;
                sext_ln268_2_cast_reg_1070 <= sext_ln268_2_cast_fu_498_p1;
                sext_ln268_7_reg_1283 <= sext_ln268_7_fu_721_p1;
                sext_ln268_8_reg_1289 <= sext_ln268_8_fu_730_p1;
                sext_ln268_cast_reg_1090 <= sext_ln268_cast_fu_502_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln268_14_reg_1402 <= grp_fu_783_p2;
                mul_ln269_13_reg_1397 <= grp_fu_774_p2;
                mul_ln269_15_reg_1407 <= grp_fu_788_p2;
                mul_ln269_7_reg_1392 <= grp_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln269_10_reg_1339 <= grp_fu_696_p2;
                mul_ln269_3_reg_1312 <= grp_fu_669_p2;
                mul_ln269_4_reg_1317 <= grp_fu_678_p2;
                mul_ln269_9_reg_1334 <= grp_fu_687_p2;
                sext_ln268_10_reg_1328 <= sext_ln268_10_fu_766_p1;
                sext_ln268_16_reg_1344 <= sext_ln268_16_fu_770_p1;
                sext_ln268_17_reg_1350 <= sext_ln268_17_fu_779_p1;
                sext_ln268_9_reg_1322 <= sext_ln268_9_fu_757_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln269_11_reg_1382 <= grp_fu_743_p2;
                mul_ln269_12_reg_1387 <= grp_fu_752_p2;
                mul_ln269_5_reg_1372 <= grp_fu_725_p2;
                mul_ln269_6_reg_1377 <= grp_fu_734_p2;
                    zext_ln263_reg_1356(0) <= zext_ln263_fu_793_p1(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln264_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln264_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln264_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_482 <= matched_I_12_q1;
                reg_486 <= matched_Q_12_q1;
                reg_490 <= matched_I_12_q0;
                reg_494 <= matched_Q_12_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln264_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sext_ln268_11_reg_1213 <= sext_ln268_11_fu_627_p1;
                sext_ln268_1_reg_1175 <= sext_ln268_1_fu_578_p1;
                sext_ln268_3_reg_1181 <= sext_ln268_3_fu_582_p1;
                sext_ln268_4_reg_1207 <= sext_ln268_4_fu_618_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln264_reg_1116 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                sext_ln268_12_reg_1256 <= sext_ln268_12_fu_683_p1;
                sext_ln268_13_reg_1262 <= sext_ln268_13_fu_692_p1;
                sext_ln268_5_reg_1239 <= sext_ln268_5_fu_665_p1;
                sext_ln268_6_reg_1245 <= sext_ln268_6_fu_674_p1;
                tmp_reg_1219 <= j_1_reg_1110(3 downto 3);
            end if;
        end if;
    end process;
    zext_ln263_reg_1356(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln264_1_fu_556_p2 <= std_logic_vector(unsigned(lshr_ln263_1_reg_1125) + unsigned(ap_const_lv8_2));
    add_ln264_2_fu_567_p2 <= std_logic_vector(unsigned(lshr_ln263_1_reg_1125) + unsigned(ap_const_lv8_3));
    add_ln264_3_fu_596_p2 <= std_logic_vector(unsigned(lshr_ln263_1_reg_1125) + unsigned(ap_const_lv8_4));
    add_ln264_4_fu_607_p2 <= std_logic_vector(unsigned(lshr_ln263_1_reg_1125) + unsigned(ap_const_lv8_5));
    add_ln264_5_fu_643_p2 <= std_logic_vector(unsigned(lshr_ln263_1_reg_1125) + unsigned(ap_const_lv8_6));
    add_ln264_6_fu_654_p2 <= std_logic_vector(unsigned(lshr_ln263_1_reg_1125) + unsigned(ap_const_lv8_7));
    add_ln264_7_fu_706_p2 <= std_logic_vector(unsigned(j_1_reg_1110) + unsigned(ap_const_lv8_8));
    add_ln264_fu_544_p2 <= std_logic_vector(unsigned(lshr_ln263_1_fu_528_p4) + unsigned(ap_const_lv8_1));
    add_ln270_fu_701_p2 <= std_logic_vector(unsigned(i_load_reg_1120) + unsigned(ap_const_lv13_100));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln264_reg_1116)
    begin
        if (((icmp_ln264_reg_1116 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln264_reg_1116_pp0_iter1_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln264_reg_1116_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv13_EC;
        else 
            ap_sig_allocacmp_i_load <= i_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_108, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_108;
        end if; 
    end process;

    grp_fu_1002_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1002_p1 <= sext_ln268_13_reg_1262(18 - 1 downto 0);
    grp_fu_1008_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1008_p1 <= sext_ln268_7_reg_1283(18 - 1 downto 0);
    grp_fu_1014_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1014_p1 <= sext_ln268_8_reg_1289(18 - 1 downto 0);
    grp_fu_1020_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1020_p1 <= sext_ln268_14_reg_1300(18 - 1 downto 0);
    grp_fu_1026_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1026_p1 <= sext_ln268_15_reg_1306(18 - 1 downto 0);
    grp_fu_1032_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1032_p1 <= sext_ln268_9_reg_1322(18 - 1 downto 0);
    grp_fu_1038_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1038_p1 <= sext_ln268_16_reg_1344(18 - 1 downto 0);
    grp_fu_1044_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1044_p1 <= sext_ln268_17_reg_1350(18 - 1 downto 0);
    grp_fu_1050_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_1050_p1 <= sext_ln268_10_reg_1328(18 - 1 downto 0);
    grp_fu_586_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_591_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_622_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_631_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_669_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_678_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_687_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_696_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_725_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_734_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_743_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_752_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_761_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_774_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_783_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_788_p0 <= sext_ln268_cast_reg_1090(24 - 1 downto 0);
    grp_fu_960_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_960_p1 <= sext_ln268_3_reg_1181(18 - 1 downto 0);
    grp_fu_966_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_966_p1 <= sext_ln268_1_reg_1175(18 - 1 downto 0);
    grp_fu_972_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_972_p1 <= sext_ln268_4_reg_1207(18 - 1 downto 0);
    grp_fu_978_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_978_p1 <= sext_ln268_11_reg_1213(18 - 1 downto 0);
    grp_fu_984_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_984_p1 <= sext_ln268_5_reg_1239(18 - 1 downto 0);
    grp_fu_990_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_990_p1 <= sext_ln268_6_reg_1245(18 - 1 downto 0);
    grp_fu_996_p0 <= sext_ln268_2_cast_reg_1070(24 - 1 downto 0);
    grp_fu_996_p1 <= sext_ln268_12_reg_1256(18 - 1 downto 0);
    icmp_ln264_fu_519_p2 <= "1" when (unsigned(ap_sig_allocacmp_j_1) < unsigned(ap_const_lv8_E0)) else "0";
    lshr_ln263_1_fu_528_p4 <= ap_sig_allocacmp_i_load(12 downto 5);

    matched_I_12_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln268_fu_550_p1, ap_block_pp0_stage1, zext_ln268_2_fu_572_p1, ap_block_pp0_stage2, zext_ln268_4_fu_612_p1, ap_block_pp0_stage3, zext_ln268_6_fu_659_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_I_12_address0 <= zext_ln268_6_fu_659_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_I_12_address0 <= zext_ln268_4_fu_612_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_I_12_address0 <= zext_ln268_2_fu_572_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_I_12_address0 <= zext_ln268_fu_550_p1(8 - 1 downto 0);
            else 
                matched_I_12_address0 <= "XXXXXXXX";
            end if;
        else 
            matched_I_12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    matched_I_12_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln263_1_fu_538_p1, ap_block_pp0_stage0, zext_ln268_1_fu_561_p1, ap_block_pp0_stage1, zext_ln268_3_fu_601_p1, ap_block_pp0_stage2, zext_ln268_5_fu_648_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_I_12_address1 <= zext_ln268_5_fu_648_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_I_12_address1 <= zext_ln268_3_fu_601_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_I_12_address1 <= zext_ln268_1_fu_561_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_I_12_address1 <= zext_ln263_1_fu_538_p1(8 - 1 downto 0);
            else 
                matched_I_12_address1 <= "XXXXXXXX";
            end if;
        else 
            matched_I_12_address1 <= "XXXXXXXX";
        end if; 
    end process;


    matched_I_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_I_12_ce0 <= ap_const_logic_1;
        else 
            matched_I_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matched_I_12_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_I_12_ce1 <= ap_const_logic_1;
        else 
            matched_I_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matched_Q_12_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln268_fu_550_p1, ap_block_pp0_stage1, zext_ln268_2_fu_572_p1, ap_block_pp0_stage2, zext_ln268_4_fu_612_p1, ap_block_pp0_stage3, zext_ln268_6_fu_659_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_Q_12_address0 <= zext_ln268_6_fu_659_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_Q_12_address0 <= zext_ln268_4_fu_612_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_Q_12_address0 <= zext_ln268_2_fu_572_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_Q_12_address0 <= zext_ln268_fu_550_p1(8 - 1 downto 0);
            else 
                matched_Q_12_address0 <= "XXXXXXXX";
            end if;
        else 
            matched_Q_12_address0 <= "XXXXXXXX";
        end if; 
    end process;


    matched_Q_12_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln263_1_fu_538_p1, ap_block_pp0_stage0, zext_ln268_1_fu_561_p1, ap_block_pp0_stage1, zext_ln268_3_fu_601_p1, ap_block_pp0_stage2, zext_ln268_5_fu_648_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                matched_Q_12_address1 <= zext_ln268_5_fu_648_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                matched_Q_12_address1 <= zext_ln268_3_fu_601_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                matched_Q_12_address1 <= zext_ln268_1_fu_561_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                matched_Q_12_address1 <= zext_ln263_1_fu_538_p1(8 - 1 downto 0);
            else 
                matched_Q_12_address1 <= "XXXXXXXX";
            end if;
        else 
            matched_Q_12_address1 <= "XXXXXXXX";
        end if; 
    end process;


    matched_Q_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_Q_12_ce0 <= ap_const_logic_1;
        else 
            matched_Q_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matched_Q_12_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            matched_Q_12_ce1 <= ap_const_logic_1;
        else 
            matched_Q_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_0_address0 <= zext_ln263_fu_793_p1(1 - 1 downto 0);

    result_I_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_I_0_ce0 <= ap_const_logic_1;
        else 
            result_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_0_d0 <= grp_fu_960_p3(39 downto 16);

    result_I_0_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_I_0_we0 <= ap_const_logic_1;
        else 
            result_I_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_1_address0 <= zext_ln263_fu_793_p1(1 - 1 downto 0);

    result_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_I_1_ce0 <= ap_const_logic_1;
        else 
            result_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_1_d0 <= grp_fu_978_p3(39 downto 16);

    result_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_I_1_we0 <= ap_const_logic_1;
        else 
            result_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_2_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_I_2_ce0 <= ap_const_logic_1;
        else 
            result_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_2_d0 <= grp_fu_996_p3(39 downto 16);

    result_I_2_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_I_2_we0 <= ap_const_logic_1;
        else 
            result_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_3_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_I_3_ce0 <= ap_const_logic_1;
        else 
            result_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_3_d0 <= grp_fu_1002_p3(39 downto 16);

    result_I_3_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_I_3_we0 <= ap_const_logic_1;
        else 
            result_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_4_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_I_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_I_4_ce0 <= ap_const_logic_1;
        else 
            result_I_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_4_d0 <= grp_fu_1020_p3(39 downto 16);

    result_I_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_I_4_we0 <= ap_const_logic_1;
        else 
            result_I_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_5_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_I_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_I_5_ce0 <= ap_const_logic_1;
        else 
            result_I_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_5_d0 <= grp_fu_1026_p3(39 downto 16);

    result_I_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_I_5_we0 <= ap_const_logic_1;
        else 
            result_I_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_6_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_I_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_I_6_ce0 <= ap_const_logic_1;
        else 
            result_I_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_6_d0 <= grp_fu_1038_p3(39 downto 16);

    result_I_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_I_6_we0 <= ap_const_logic_1;
        else 
            result_I_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_7_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_I_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_I_7_ce0 <= ap_const_logic_1;
        else 
            result_I_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_I_7_d0 <= grp_fu_1044_p3(39 downto 16);

    result_I_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_I_7_we0 <= ap_const_logic_1;
        else 
            result_I_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_0_address0 <= zext_ln263_fu_793_p1(1 - 1 downto 0);

    result_Q_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_Q_0_ce0 <= ap_const_logic_1;
        else 
            result_Q_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_0_d0 <= grp_fu_966_p3(39 downto 16);

    result_Q_0_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_Q_0_we0 <= ap_const_logic_1;
        else 
            result_Q_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_1_address0 <= zext_ln263_fu_793_p1(1 - 1 downto 0);

    result_Q_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_Q_1_ce0 <= ap_const_logic_1;
        else 
            result_Q_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_1_d0 <= grp_fu_972_p3(39 downto 16);

    result_Q_1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            result_Q_1_we0 <= ap_const_logic_1;
        else 
            result_Q_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_2_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_Q_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_Q_2_ce0 <= ap_const_logic_1;
        else 
            result_Q_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_2_d0 <= grp_fu_984_p3(39 downto 16);

    result_Q_2_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_Q_2_we0 <= ap_const_logic_1;
        else 
            result_Q_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_3_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_Q_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_Q_3_ce0 <= ap_const_logic_1;
        else 
            result_Q_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_3_d0 <= grp_fu_990_p3(39 downto 16);

    result_Q_3_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            result_Q_3_we0 <= ap_const_logic_1;
        else 
            result_Q_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_4_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_Q_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_Q_4_ce0 <= ap_const_logic_1;
        else 
            result_Q_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_4_d0 <= grp_fu_1008_p3(39 downto 16);

    result_Q_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_Q_4_we0 <= ap_const_logic_1;
        else 
            result_Q_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_5_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_Q_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_Q_5_ce0 <= ap_const_logic_1;
        else 
            result_Q_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_5_d0 <= grp_fu_1014_p3(39 downto 16);

    result_Q_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_Q_5_we0 <= ap_const_logic_1;
        else 
            result_Q_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_6_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_Q_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_Q_6_ce0 <= ap_const_logic_1;
        else 
            result_Q_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_6_d0 <= grp_fu_1032_p3(39 downto 16);

    result_Q_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_Q_6_we0 <= ap_const_logic_1;
        else 
            result_Q_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_7_address0 <= zext_ln263_reg_1356(1 - 1 downto 0);

    result_Q_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_Q_7_ce0 <= ap_const_logic_1;
        else 
            result_Q_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_Q_7_d0 <= grp_fu_1050_p3(39 downto 16);

    result_Q_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_Q_7_we0 <= ap_const_logic_1;
        else 
            result_Q_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln268_10_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_490),40));

        sext_ln268_11_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_494),40));

        sext_ln268_12_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_486),40));

        sext_ln268_13_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_494),40));

        sext_ln268_14_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_486),40));

        sext_ln268_15_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_494),40));

        sext_ln268_16_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_486),40));

        sext_ln268_17_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_494),40));

        sext_ln268_1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_482),40));

        sext_ln268_2_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln268_2),40));

        sext_ln268_3_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_486),40));

        sext_ln268_4_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_490),40));

        sext_ln268_5_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_482),40));

        sext_ln268_6_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_490),40));

        sext_ln268_7_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_482),40));

        sext_ln268_8_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_490),40));

        sext_ln268_9_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_482),40));

        sext_ln268_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln268),40));

    zext_ln263_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln263_1_fu_528_p4),64));
    zext_ln263_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1219),64));
    zext_ln268_1_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_1_fu_556_p2),64));
    zext_ln268_2_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_2_fu_567_p2),64));
    zext_ln268_3_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_3_fu_596_p2),64));
    zext_ln268_4_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_4_fu_607_p2),64));
    zext_ln268_5_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_5_fu_643_p2),64));
    zext_ln268_6_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_6_fu_654_p2),64));
    zext_ln268_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln264_fu_544_p2),64));
end behav;
