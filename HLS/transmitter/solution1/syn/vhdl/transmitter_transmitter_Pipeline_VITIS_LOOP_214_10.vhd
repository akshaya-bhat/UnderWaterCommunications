-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transmitter_transmitter_Pipeline_VITIS_LOOP_214_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dataPulseShapedI_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_1_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_2_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_3_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_4_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_5_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_6_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_7_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_8_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_9_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_10_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_11_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_12_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_13_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_14_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedI_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedI_15_ce0 : OUT STD_LOGIC;
    dataPulseShapedI_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_1_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_2_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_3_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_4_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_5_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_6_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_7_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_8_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_9_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_10_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_11_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_12_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_13_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_14_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dataPulseShapedQ_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dataPulseShapedQ_15_ce0 : OUT STD_LOGIC;
    dataPulseShapedQ_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    real_output_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    real_output_ce0 : OUT STD_LOGIC;
    real_output_we0 : OUT STD_LOGIC;
    real_output_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_16066_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16066_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16066_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_16066_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16066_p_ce : OUT STD_LOGIC;
    grp_fu_16070_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16070_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16070_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16070_p_ce : OUT STD_LOGIC;
    grp_fu_16074_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16074_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16074_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_16074_p_ce : OUT STD_LOGIC );
end;


architecture behav of transmitter_transmitter_Pipeline_VITIS_LOOP_214_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_471C4000 : STD_LOGIC_VECTOR (31 downto 0) := "01000111000111000100000000000000";
    constant ap_const_lv64_4040000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_40FF400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011111111010000000000000000000000000000000000000000000000";
    constant ap_const_lv13_1480 : STD_LOGIC_VECTOR (12 downto 0) := "1010010000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3F7B14BA : STD_LOGIC_VECTOR (31 downto 0) := "00111111011110110001010010111010";
    constant ap_const_lv32_3F6C8366 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011011001000001101100110";
    constant ap_const_lv32_3F54DB38 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010101001101101100111000";
    constant ap_const_lv32_3F3504F7 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101010000010011110111";
    constant ap_const_lv32_3F0E39D6 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000011100011100111010110";
    constant ap_const_lv32_3EC3EF07 : STD_LOGIC_VECTOR (31 downto 0) := "00111110110000111110111100000111";
    constant ap_const_lv32_3E47C5AC : STD_LOGIC_VECTOR (31 downto 0) := "00111110010001111100010110101100";
    constant ap_const_lv32_BE47C5AC : STD_LOGIC_VECTOR (31 downto 0) := "10111110010001111100010110101100";
    constant ap_const_lv32_BEC3EF07 : STD_LOGIC_VECTOR (31 downto 0) := "10111110110000111110111100000111";
    constant ap_const_lv32_BF0E39D6 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000011100011100111010110";
    constant ap_const_lv32_BF3504F7 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001101010000010011110111";
    constant ap_const_lv32_BF54DB38 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010101001101101100111000";
    constant ap_const_lv32_BF6C8366 : STD_LOGIC_VECTOR (31 downto 0) := "10111111011011001000001101100110";
    constant ap_const_lv32_BF7B14BA : STD_LOGIC_VECTOR (31 downto 0) := "10111111011110110001010010111010";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state46_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_state48_pp0_stage1_iter23 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter24 : BOOLEAN;
    signal ap_block_state52_pp0_stage1_iter25 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter26 : BOOLEAN;
    signal ap_block_state56_pp0_stage1_iter27 : BOOLEAN;
    signal ap_block_state58_pp0_stage1_iter28 : BOOLEAN;
    signal ap_block_state60_pp0_stage1_iter29 : BOOLEAN;
    signal ap_block_state62_pp0_stage1_iter30 : BOOLEAN;
    signal ap_block_state64_pp0_stage1_iter31 : BOOLEAN;
    signal ap_block_state66_pp0_stage1_iter32 : BOOLEAN;
    signal ap_block_state68_pp0_stage1_iter33 : BOOLEAN;
    signal ap_block_state70_pp0_stage1_iter34 : BOOLEAN;
    signal ap_block_state72_pp0_stage1_iter35 : BOOLEAN;
    signal ap_block_state74_pp0_stage1_iter36 : BOOLEAN;
    signal ap_block_state76_pp0_stage1_iter37 : BOOLEAN;
    signal ap_block_state78_pp0_stage1_iter38 : BOOLEAN;
    signal ap_block_state80_pp0_stage1_iter39 : BOOLEAN;
    signal ap_block_state82_pp0_stage1_iter40 : BOOLEAN;
    signal ap_block_state84_pp0_stage1_iter41 : BOOLEAN;
    signal ap_block_state86_pp0_stage1_iter42 : BOOLEAN;
    signal ap_block_state88_pp0_stage1_iter43 : BOOLEAN;
    signal ap_block_state90_pp0_stage1_iter44 : BOOLEAN;
    signal ap_block_state92_pp0_stage1_iter45 : BOOLEAN;
    signal ap_block_state94_pp0_stage1_iter46 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln214_reg_1115 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_1_reg_1108 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state83_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state85_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state87_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state89_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state91_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state93_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state95_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_1108_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter9_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter10_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter11_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter12_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter13_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter14_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter15_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter16_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter18_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter19_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter20_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter21_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter22_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter23_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter24_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter25_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter26_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter27_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter28_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter29_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter30_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter31_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter32_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter33_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter34_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter35_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter36_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter37_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter38_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter39_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter40_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter41_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter42_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter43_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter44_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter45_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1108_pp0_iter46_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln214_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln214_reg_1115_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_1124 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_1129 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_reg_1144 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1149 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_1154 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_fu_792_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal val_reg_1159 : STD_LOGIC_VECTOR (4 downto 0);
    signal cos_fu_856_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln223_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln223_reg_1330 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1009_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1335 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_1047_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_fu_1085_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal modI_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal modQ_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln227_fu_1093_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln227_reg_1365 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln224_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln214_fu_1097_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_180 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln214_fu_659_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_617_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_642_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_696_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_700_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_V_fu_686_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_714_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_718_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_fu_732_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_724_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_738_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_742_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_710_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln1488_fu_754_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_758_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_fu_770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_764_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln818_fu_778_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_782_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln1_fu_800_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_V_1_fu_845_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln59_fu_850_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_926_p34 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln223_fu_996_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln224_fu_1006_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln227_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter46_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to45 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to47 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component transmitter_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transmitter_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transmitter_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transmitter_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component transmitter_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component transmitter_ddiv_64ns_64ns_64_59_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component transmitter_sitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component transmitter_mux_325_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transmitter_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transmitter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fptrunc_64ns_32_2_no_dsp_1_U6715 : component transmitter_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_1129,
        ce => ap_const_logic_1,
        dout => grp_fu_626_p1);

    fpext_32ns_64_2_no_dsp_1_U6716 : component transmitter_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_629_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_629_p1);

    dmul_64ns_64ns_64_7_max_dsp_1_U6717 : component transmitter_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv3_reg_1144,
        din1 => ap_const_lv64_4040000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_632_p2);

    ddiv_64ns_64ns_64_59_no_dsp_1_U6718 : component transmitter_ddiv_64ns_64ns_64_59_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 59,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_1124,
        din1 => ap_const_lv64_40FF400000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    sitodp_32ns_64_6_no_dsp_1_U6719 : component transmitter_sitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_642_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_642_p1);

    mux_325_32_1_1_U6720 : component transmitter_mux_325_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F7B14BA,
        din2 => ap_const_lv32_3F6C8366,
        din3 => ap_const_lv32_3F54DB38,
        din4 => ap_const_lv32_3F3504F7,
        din5 => ap_const_lv32_3F0E39D6,
        din6 => ap_const_lv32_3EC3EF07,
        din7 => ap_const_lv32_3E47C5AC,
        din8 => ap_const_lv32_0,
        din9 => ap_const_lv32_BE47C5AC,
        din10 => ap_const_lv32_BEC3EF07,
        din11 => ap_const_lv32_BF0E39D6,
        din12 => ap_const_lv32_BF3504F7,
        din13 => ap_const_lv32_BF54DB38,
        din14 => ap_const_lv32_BF6C8366,
        din15 => ap_const_lv32_BF7B14BA,
        din16 => ap_const_lv32_BF800000,
        din17 => ap_const_lv32_BF7B14BA,
        din18 => ap_const_lv32_BF6C8366,
        din19 => ap_const_lv32_BF54DB38,
        din20 => ap_const_lv32_BF3504F7,
        din21 => ap_const_lv32_BF0E39D6,
        din22 => ap_const_lv32_BEC3EF07,
        din23 => ap_const_lv32_BE47C5AC,
        din24 => ap_const_lv32_80000000,
        din25 => ap_const_lv32_3E47C5AC,
        din26 => ap_const_lv32_3EC3EF07,
        din27 => ap_const_lv32_3F0E39D6,
        din28 => ap_const_lv32_3F3504F7,
        din29 => ap_const_lv32_3F54DB38,
        din30 => ap_const_lv32_3F6C8366,
        din31 => ap_const_lv32_3F7B14BA,
        din32 => select_ln59_fu_850_p3,
        dout => cos_fu_856_p34);

    mux_325_32_1_1_U6721 : component transmitter_mux_325_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_BE47C5AC,
        din2 => ap_const_lv32_BEC3EF07,
        din3 => ap_const_lv32_BF0E39D6,
        din4 => ap_const_lv32_BF3504F7,
        din5 => ap_const_lv32_BF54DB38,
        din6 => ap_const_lv32_BF6C8366,
        din7 => ap_const_lv32_BF7B14BA,
        din8 => ap_const_lv32_BF800000,
        din9 => ap_const_lv32_BF7B14BA,
        din10 => ap_const_lv32_BF6C8366,
        din11 => ap_const_lv32_BF54DB38,
        din12 => ap_const_lv32_BF3504F7,
        din13 => ap_const_lv32_BF0E39D6,
        din14 => ap_const_lv32_BEC3EF07,
        din15 => ap_const_lv32_BE47C5AC,
        din16 => ap_const_lv32_80000000,
        din17 => ap_const_lv32_3E47C5AC,
        din18 => ap_const_lv32_3EC3EF07,
        din19 => ap_const_lv32_3F0E39D6,
        din20 => ap_const_lv32_3F3504F7,
        din21 => ap_const_lv32_3F54DB38,
        din22 => ap_const_lv32_3F6C8366,
        din23 => ap_const_lv32_3F7B14BA,
        din24 => ap_const_lv32_3F800000,
        din25 => ap_const_lv32_3F7B14BA,
        din26 => ap_const_lv32_3F6C8366,
        din27 => ap_const_lv32_3F54DB38,
        din28 => ap_const_lv32_3F3504F7,
        din29 => ap_const_lv32_3F0E39D6,
        din30 => ap_const_lv32_3EC3EF07,
        din31 => ap_const_lv32_3E47C5AC,
        din32 => select_ln59_fu_850_p3,
        dout => tmp_s_fu_926_p34);

    mux_164_32_1_1_U6722 : component transmitter_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataPulseShapedI_q0,
        din1 => dataPulseShapedI_1_q0,
        din2 => dataPulseShapedI_2_q0,
        din3 => dataPulseShapedI_3_q0,
        din4 => dataPulseShapedI_4_q0,
        din5 => dataPulseShapedI_5_q0,
        din6 => dataPulseShapedI_6_q0,
        din7 => dataPulseShapedI_7_q0,
        din8 => dataPulseShapedI_8_q0,
        din9 => dataPulseShapedI_9_q0,
        din10 => dataPulseShapedI_10_q0,
        din11 => dataPulseShapedI_11_q0,
        din12 => dataPulseShapedI_12_q0,
        din13 => dataPulseShapedI_13_q0,
        din14 => dataPulseShapedI_14_q0,
        din15 => dataPulseShapedI_15_q0,
        din16 => trunc_ln224_fu_1006_p1,
        dout => tmp_2_fu_1009_p18);

    mux_164_32_1_1_U6723 : component transmitter_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => dataPulseShapedQ_q0,
        din1 => dataPulseShapedQ_1_q0,
        din2 => dataPulseShapedQ_2_q0,
        din3 => dataPulseShapedQ_3_q0,
        din4 => dataPulseShapedQ_4_q0,
        din5 => dataPulseShapedQ_5_q0,
        din6 => dataPulseShapedQ_6_q0,
        din7 => dataPulseShapedQ_7_q0,
        din8 => dataPulseShapedQ_8_q0,
        din9 => dataPulseShapedQ_9_q0,
        din10 => dataPulseShapedQ_10_q0,
        din11 => dataPulseShapedQ_11_q0,
        din12 => dataPulseShapedQ_12_q0,
        din13 => dataPulseShapedQ_13_q0,
        din14 => dataPulseShapedQ_14_q0,
        din15 => dataPulseShapedQ_15_q0,
        din16 => trunc_ln224_fu_1006_p1,
        dout => tmp_3_fu_1047_p18);

    flow_control_loop_pipe_sequential_init_U : component transmitter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter46_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter21_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter22_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter23_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter24_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter25_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter26_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter27_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter28_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter29_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter30_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter31_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter31_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter32_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter32_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter33_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter33_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter34_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter34_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter35_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter35_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter36_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter36_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter37_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter37_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter38_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter38_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter39_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter39_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter40_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter40_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter41_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter41_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter42_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter42_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter43_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter43_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter44_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter44_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter45_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter45_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter46_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter46_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    i_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln214_fu_653_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_180 <= add_ln214_fu_659_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_180 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_reg_1360 <= grp_fu_16066_p_dout0;
                div_reg_1129 <= grp_fu_637_p2;
                i_1_reg_1108 <= ap_sig_allocacmp_i_1;
                i_1_reg_1108_pp0_iter10_reg <= i_1_reg_1108_pp0_iter9_reg;
                i_1_reg_1108_pp0_iter11_reg <= i_1_reg_1108_pp0_iter10_reg;
                i_1_reg_1108_pp0_iter12_reg <= i_1_reg_1108_pp0_iter11_reg;
                i_1_reg_1108_pp0_iter13_reg <= i_1_reg_1108_pp0_iter12_reg;
                i_1_reg_1108_pp0_iter14_reg <= i_1_reg_1108_pp0_iter13_reg;
                i_1_reg_1108_pp0_iter15_reg <= i_1_reg_1108_pp0_iter14_reg;
                i_1_reg_1108_pp0_iter16_reg <= i_1_reg_1108_pp0_iter15_reg;
                i_1_reg_1108_pp0_iter17_reg <= i_1_reg_1108_pp0_iter16_reg;
                i_1_reg_1108_pp0_iter18_reg <= i_1_reg_1108_pp0_iter17_reg;
                i_1_reg_1108_pp0_iter19_reg <= i_1_reg_1108_pp0_iter18_reg;
                i_1_reg_1108_pp0_iter1_reg <= i_1_reg_1108;
                i_1_reg_1108_pp0_iter20_reg <= i_1_reg_1108_pp0_iter19_reg;
                i_1_reg_1108_pp0_iter21_reg <= i_1_reg_1108_pp0_iter20_reg;
                i_1_reg_1108_pp0_iter22_reg <= i_1_reg_1108_pp0_iter21_reg;
                i_1_reg_1108_pp0_iter23_reg <= i_1_reg_1108_pp0_iter22_reg;
                i_1_reg_1108_pp0_iter24_reg <= i_1_reg_1108_pp0_iter23_reg;
                i_1_reg_1108_pp0_iter25_reg <= i_1_reg_1108_pp0_iter24_reg;
                i_1_reg_1108_pp0_iter26_reg <= i_1_reg_1108_pp0_iter25_reg;
                i_1_reg_1108_pp0_iter27_reg <= i_1_reg_1108_pp0_iter26_reg;
                i_1_reg_1108_pp0_iter28_reg <= i_1_reg_1108_pp0_iter27_reg;
                i_1_reg_1108_pp0_iter29_reg <= i_1_reg_1108_pp0_iter28_reg;
                i_1_reg_1108_pp0_iter2_reg <= i_1_reg_1108_pp0_iter1_reg;
                i_1_reg_1108_pp0_iter30_reg <= i_1_reg_1108_pp0_iter29_reg;
                i_1_reg_1108_pp0_iter31_reg <= i_1_reg_1108_pp0_iter30_reg;
                i_1_reg_1108_pp0_iter32_reg <= i_1_reg_1108_pp0_iter31_reg;
                i_1_reg_1108_pp0_iter33_reg <= i_1_reg_1108_pp0_iter32_reg;
                i_1_reg_1108_pp0_iter34_reg <= i_1_reg_1108_pp0_iter33_reg;
                i_1_reg_1108_pp0_iter35_reg <= i_1_reg_1108_pp0_iter34_reg;
                i_1_reg_1108_pp0_iter36_reg <= i_1_reg_1108_pp0_iter35_reg;
                i_1_reg_1108_pp0_iter37_reg <= i_1_reg_1108_pp0_iter36_reg;
                i_1_reg_1108_pp0_iter38_reg <= i_1_reg_1108_pp0_iter37_reg;
                i_1_reg_1108_pp0_iter39_reg <= i_1_reg_1108_pp0_iter38_reg;
                i_1_reg_1108_pp0_iter3_reg <= i_1_reg_1108_pp0_iter2_reg;
                i_1_reg_1108_pp0_iter40_reg <= i_1_reg_1108_pp0_iter39_reg;
                i_1_reg_1108_pp0_iter41_reg <= i_1_reg_1108_pp0_iter40_reg;
                i_1_reg_1108_pp0_iter42_reg <= i_1_reg_1108_pp0_iter41_reg;
                i_1_reg_1108_pp0_iter43_reg <= i_1_reg_1108_pp0_iter42_reg;
                i_1_reg_1108_pp0_iter44_reg <= i_1_reg_1108_pp0_iter43_reg;
                i_1_reg_1108_pp0_iter45_reg <= i_1_reg_1108_pp0_iter44_reg;
                i_1_reg_1108_pp0_iter46_reg <= i_1_reg_1108_pp0_iter45_reg;
                i_1_reg_1108_pp0_iter4_reg <= i_1_reg_1108_pp0_iter3_reg;
                i_1_reg_1108_pp0_iter5_reg <= i_1_reg_1108_pp0_iter4_reg;
                i_1_reg_1108_pp0_iter6_reg <= i_1_reg_1108_pp0_iter5_reg;
                i_1_reg_1108_pp0_iter7_reg <= i_1_reg_1108_pp0_iter6_reg;
                i_1_reg_1108_pp0_iter8_reg <= i_1_reg_1108_pp0_iter7_reg;
                i_1_reg_1108_pp0_iter9_reg <= i_1_reg_1108_pp0_iter8_reg;
                icmp_ln214_reg_1115 <= icmp_ln214_fu_653_p2;
                icmp_ln214_reg_1115_pp0_iter10_reg <= icmp_ln214_reg_1115_pp0_iter9_reg;
                icmp_ln214_reg_1115_pp0_iter11_reg <= icmp_ln214_reg_1115_pp0_iter10_reg;
                icmp_ln214_reg_1115_pp0_iter12_reg <= icmp_ln214_reg_1115_pp0_iter11_reg;
                icmp_ln214_reg_1115_pp0_iter13_reg <= icmp_ln214_reg_1115_pp0_iter12_reg;
                icmp_ln214_reg_1115_pp0_iter14_reg <= icmp_ln214_reg_1115_pp0_iter13_reg;
                icmp_ln214_reg_1115_pp0_iter15_reg <= icmp_ln214_reg_1115_pp0_iter14_reg;
                icmp_ln214_reg_1115_pp0_iter16_reg <= icmp_ln214_reg_1115_pp0_iter15_reg;
                icmp_ln214_reg_1115_pp0_iter17_reg <= icmp_ln214_reg_1115_pp0_iter16_reg;
                icmp_ln214_reg_1115_pp0_iter18_reg <= icmp_ln214_reg_1115_pp0_iter17_reg;
                icmp_ln214_reg_1115_pp0_iter19_reg <= icmp_ln214_reg_1115_pp0_iter18_reg;
                icmp_ln214_reg_1115_pp0_iter1_reg <= icmp_ln214_reg_1115;
                icmp_ln214_reg_1115_pp0_iter20_reg <= icmp_ln214_reg_1115_pp0_iter19_reg;
                icmp_ln214_reg_1115_pp0_iter21_reg <= icmp_ln214_reg_1115_pp0_iter20_reg;
                icmp_ln214_reg_1115_pp0_iter22_reg <= icmp_ln214_reg_1115_pp0_iter21_reg;
                icmp_ln214_reg_1115_pp0_iter23_reg <= icmp_ln214_reg_1115_pp0_iter22_reg;
                icmp_ln214_reg_1115_pp0_iter24_reg <= icmp_ln214_reg_1115_pp0_iter23_reg;
                icmp_ln214_reg_1115_pp0_iter25_reg <= icmp_ln214_reg_1115_pp0_iter24_reg;
                icmp_ln214_reg_1115_pp0_iter26_reg <= icmp_ln214_reg_1115_pp0_iter25_reg;
                icmp_ln214_reg_1115_pp0_iter27_reg <= icmp_ln214_reg_1115_pp0_iter26_reg;
                icmp_ln214_reg_1115_pp0_iter28_reg <= icmp_ln214_reg_1115_pp0_iter27_reg;
                icmp_ln214_reg_1115_pp0_iter29_reg <= icmp_ln214_reg_1115_pp0_iter28_reg;
                icmp_ln214_reg_1115_pp0_iter2_reg <= icmp_ln214_reg_1115_pp0_iter1_reg;
                icmp_ln214_reg_1115_pp0_iter30_reg <= icmp_ln214_reg_1115_pp0_iter29_reg;
                icmp_ln214_reg_1115_pp0_iter31_reg <= icmp_ln214_reg_1115_pp0_iter30_reg;
                icmp_ln214_reg_1115_pp0_iter32_reg <= icmp_ln214_reg_1115_pp0_iter31_reg;
                icmp_ln214_reg_1115_pp0_iter33_reg <= icmp_ln214_reg_1115_pp0_iter32_reg;
                icmp_ln214_reg_1115_pp0_iter34_reg <= icmp_ln214_reg_1115_pp0_iter33_reg;
                icmp_ln214_reg_1115_pp0_iter35_reg <= icmp_ln214_reg_1115_pp0_iter34_reg;
                icmp_ln214_reg_1115_pp0_iter36_reg <= icmp_ln214_reg_1115_pp0_iter35_reg;
                icmp_ln214_reg_1115_pp0_iter37_reg <= icmp_ln214_reg_1115_pp0_iter36_reg;
                icmp_ln214_reg_1115_pp0_iter38_reg <= icmp_ln214_reg_1115_pp0_iter37_reg;
                icmp_ln214_reg_1115_pp0_iter39_reg <= icmp_ln214_reg_1115_pp0_iter38_reg;
                icmp_ln214_reg_1115_pp0_iter3_reg <= icmp_ln214_reg_1115_pp0_iter2_reg;
                icmp_ln214_reg_1115_pp0_iter40_reg <= icmp_ln214_reg_1115_pp0_iter39_reg;
                icmp_ln214_reg_1115_pp0_iter41_reg <= icmp_ln214_reg_1115_pp0_iter40_reg;
                icmp_ln214_reg_1115_pp0_iter42_reg <= icmp_ln214_reg_1115_pp0_iter41_reg;
                icmp_ln214_reg_1115_pp0_iter43_reg <= icmp_ln214_reg_1115_pp0_iter42_reg;
                icmp_ln214_reg_1115_pp0_iter44_reg <= icmp_ln214_reg_1115_pp0_iter43_reg;
                icmp_ln214_reg_1115_pp0_iter45_reg <= icmp_ln214_reg_1115_pp0_iter44_reg;
                icmp_ln214_reg_1115_pp0_iter4_reg <= icmp_ln214_reg_1115_pp0_iter3_reg;
                icmp_ln214_reg_1115_pp0_iter5_reg <= icmp_ln214_reg_1115_pp0_iter4_reg;
                icmp_ln214_reg_1115_pp0_iter6_reg <= icmp_ln214_reg_1115_pp0_iter5_reg;
                icmp_ln214_reg_1115_pp0_iter7_reg <= icmp_ln214_reg_1115_pp0_iter6_reg;
                icmp_ln214_reg_1115_pp0_iter8_reg <= icmp_ln214_reg_1115_pp0_iter7_reg;
                icmp_ln214_reg_1115_pp0_iter9_reg <= icmp_ln214_reg_1115_pp0_iter8_reg;
                p_Result_s_reg_1154 <= data_V_fu_675_p1(63 downto 63);
                t_reg_1134 <= grp_fu_626_p1;
                val_reg_1159 <= val_fu_792_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then
                conv3_reg_1144 <= grp_fu_629_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv_reg_1124 <= grp_fu_642_p1;
                cos_reg_1325 <= cos_fu_856_p34;
                dc_reg_1149 <= grp_fu_632_p2;
                modQ_reg_1355 <= grp_fu_16074_p_dout0;
                tmp_2_reg_1335 <= tmp_2_fu_1009_p18;
                tmp_3_reg_1340 <= tmp_3_fu_1047_p18;
                trunc_ln227_reg_1365 <= trunc_ln227_fu_1093_p1;
                xor_ln223_reg_1330 <= xor_ln223_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1))) then
                modI_reg_1350 <= grp_fu_16070_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then
                theta_reg_1139 <= grp_fu_16070_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter46_stage0, ap_idle_pp0_0to45, ap_idle_pp0_1to47, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter46_stage0) and (ap_idle_pp0_0to45 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to47 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln214_fu_659_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv13_1));
    add_ln515_fu_718_p2 <= std_logic_vector(unsigned(zext_ln515_fu_714_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage1_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage1_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage1_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage1_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage1_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage1_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage1_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage1_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage1_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage1_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage1_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage1_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage1_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage1_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage1_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage1_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage1_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage1_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage1_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage1_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage1_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage1_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln214_reg_1115)
    begin
        if (((icmp_ln214_reg_1115 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter46_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter46, icmp_ln214_reg_1115_pp0_iter45_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln214_reg_1115_pp0_iter45_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter46_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter46_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter46_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter46_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to45_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to45 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to47_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_1to47 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to47 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_180, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_180;
        end if; 
    end process;

    bitcast_ln223_fu_996_p1 <= tmp_s_fu_926_p34;
    bitcast_ln227_fu_1089_p1 <= grp_fu_629_p1;
    dataPulseShapedI_10_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_10_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_11_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_11_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_12_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_12_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_13_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_13_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_14_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_14_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_15_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_15_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_1_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_1_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_2_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_2_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_3_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_3_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_4_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_4_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_5_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_5_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_6_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_6_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_7_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_7_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_8_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_8_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_9_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_9_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedI_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedI_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedI_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedI_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_10_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_10_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_11_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_11_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_12_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_12_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_13_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_13_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_14_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_14_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_15_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_15_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_1_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_1_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_2_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_2_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_3_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_3_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_4_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_4_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_5_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_5_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_6_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_6_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_7_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_7_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_8_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_8_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_9_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_9_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dataPulseShapedQ_address0 <= zext_ln224_fu_809_p1(9 - 1 downto 0);

    dataPulseShapedQ_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            dataPulseShapedQ_ce0 <= ap_const_logic_1;
        else 
            dataPulseShapedQ_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_675_p1 <= dc_reg_1149;
    grp_fu_16066_p_ce <= ap_const_logic_1;
    grp_fu_16066_p_din0 <= modI_reg_1350;
    grp_fu_16066_p_din1 <= modQ_reg_1355;
    grp_fu_16066_p_opcode <= ap_const_lv2_0;
    grp_fu_16070_p_ce <= ap_const_logic_1;
    grp_fu_16070_p_din0 <= grp_fu_617_p0;
    grp_fu_16070_p_din1 <= grp_fu_617_p1;
    grp_fu_16074_p_ce <= ap_const_logic_1;
    grp_fu_16074_p_din0 <= tmp_3_reg_1340;
    grp_fu_16074_p_din1 <= sin_fu_1085_p1;

    grp_fu_617_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter41, ap_CS_fsm_pp0_stage1, t_reg_1134, tmp_2_reg_1335, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            grp_fu_617_p0 <= tmp_2_reg_1335;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then 
            grp_fu_617_p0 <= t_reg_1134;
        else 
            grp_fu_617_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_617_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter41, ap_CS_fsm_pp0_stage1, cos_reg_1325, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            grp_fu_617_p1 <= cos_reg_1325;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then 
            grp_fu_617_p1 <= ap_const_lv32_471C4000;
        else 
            grp_fu_617_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_629_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter46, ap_CS_fsm_pp0_stage1, theta_reg_1139, add_reg_1360, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            grp_fu_629_p0 <= add_reg_1360;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then 
            grp_fu_629_p0 <= theta_reg_1139;
        else 
            grp_fu_629_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_642_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
    icmp_ln214_fu_653_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv13_1480) else "0";
    isNeg_fu_724_p3 <= add_ln515_fu_718_p2(11 downto 11);
    lshr_ln1_fu_800_p4 <= i_1_reg_1108_pp0_iter39_reg(12 downto 4);
    mantissa_fu_700_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_696_p1) & ap_const_lv1_0);
    p_Result_1_fu_696_p1 <= data_V_fu_675_p1(52 - 1 downto 0);
    r_V_1_fu_764_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_710_p1),to_integer(unsigned('0' & zext_ln1488_fu_754_p1(31-1 downto 0)))));
    r_V_fu_758_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_710_p1),to_integer(unsigned('0' & zext_ln1488_fu_754_p1(31-1 downto 0)))));
    real_output_address0 <= zext_ln214_fu_1097_p1(13 - 1 downto 0);

    real_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter47, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))) then 
            real_output_ce0 <= ap_const_logic_1;
        else 
            real_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    real_output_d0 <= trunc_ln227_reg_1365;

    real_output_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter47, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))) then 
            real_output_we0 <= ap_const_logic_1;
        else 
            real_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_V_1_fu_845_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(val_reg_1159));
    select_ln59_fu_850_p3 <= 
        result_V_1_fu_845_p2 when (p_Result_s_reg_1154(0) = '1') else 
        val_reg_1159;
        sext_ln1488_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_742_p3),32));

        sext_ln1512_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_732_p2),12));

    sin_fu_1085_p1 <= xor_ln223_reg_1330;
    sub_ln1512_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_V_fu_686_p4));
    tmp_1_fu_782_p4 <= r_V_1_fu_764_p2(57 downto 53);
    tmp_fu_770_p3 <= r_V_fu_758_p2(53 downto 53);
    trunc_ln224_fu_1006_p1 <= i_1_reg_1108_pp0_iter40_reg(4 - 1 downto 0);
    trunc_ln227_fu_1093_p1 <= bitcast_ln227_fu_1089_p1(16 - 1 downto 0);
    ush_fu_742_p3 <= 
        sext_ln1512_fu_738_p1 when (isNeg_fu_724_p3(0) = '1') else 
        add_ln515_fu_718_p2;
    val_fu_792_p3 <= 
        zext_ln818_fu_778_p1 when (isNeg_fu_724_p3(0) = '1') else 
        tmp_1_fu_782_p4;
    xor_ln223_fu_1000_p2 <= (bitcast_ln223_fu_996_p1 xor ap_const_lv32_80000000);
    xs_exp_V_fu_686_p4 <= data_V_fu_675_p1(62 downto 52);
    zext_ln1488_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_750_p1),137));
    zext_ln15_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_700_p4),137));
    zext_ln214_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_1108_pp0_iter46_reg),64));
    zext_ln224_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_800_p4),64));
    zext_ln515_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_686_p4),12));
    zext_ln818_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_770_p3),5));
end behav;
