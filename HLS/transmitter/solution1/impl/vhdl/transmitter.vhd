-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transmitter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_i : IN STD_LOGIC_VECTOR (15 downto 0);
    input_q : IN STD_LOGIC_VECTOR (15 downto 0);
    output_i : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_i_ap_vld : OUT STD_LOGIC );
end;


architecture behav of transmitter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "transmitter_transmitter,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.622000,HLS_SYN_LAT=130,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=193,HLS_SYN_LUT=752,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal pnGenSequence_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pnGenSequence_ce0 : STD_LOGIC;
    signal pnGenSequence_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal pnGenSequence_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal pnGenSequence_ce1 : STD_LOGIC;
    signal pnGenSequence_q1 : STD_LOGIC_VECTOR (0 downto 0);
    signal encoder_state_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal trunc_ln32_fu_526_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln32_reg_978 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln29_fu_530_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln29_reg_983 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_988 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln29_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_1004 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_reg_1015 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_reg_1026 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln29_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_7_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_7_reg_1040 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_10_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_10_reg_1065 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln31_13_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_13_reg_1076 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_16_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_16_reg_1087 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln31_19_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_19_reg_1098 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_22_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_22_reg_1109 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln31_25_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_25_reg_1120 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_28_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_28_reg_1131 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln31_31_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_31_reg_1142 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_34_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_34_reg_1153 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln31_37_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_37_reg_1164 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_40_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_40_reg_1175 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln31_43_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_43_reg_1186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln43_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal scrambledDataI_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal scrambledDataI_ce0 : STD_LOGIC;
    signal scrambledDataI_we0 : STD_LOGIC;
    signal scrambledDataI_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scrambledDataI_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scrambledDataI_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal scrambledDataI_ce1 : STD_LOGIC;
    signal scrambledDataI_we1 : STD_LOGIC;
    signal scrambledDataI_d1 : STD_LOGIC_VECTOR (4 downto 0);
    signal scrambledDataQ_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal scrambledDataQ_ce0 : STD_LOGIC;
    signal scrambledDataQ_we0 : STD_LOGIC;
    signal scrambledDataQ_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal scrambledDataQ_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal scrambledDataQ_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal scrambledDataQ_ce1 : STD_LOGIC;
    signal scrambledDataQ_we1 : STD_LOGIC;
    signal scrambledDataQ_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln43_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_90 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln29_fu_614_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal and38_i3032_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_1_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_1_fu_106 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln43_fu_913_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln31_fu_566_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_3_fu_578_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_5_fu_638_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_8_fu_648_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_11_fu_678_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_14_fu_688_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_17_fu_718_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_20_fu_728_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_23_fu_758_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_26_fu_768_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_29_fu_798_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_32_fu_808_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_35_fu_838_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_38_fu_848_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_41_fu_878_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_44_fu_888_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln32_fu_572_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_4_fu_583_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_6_fu_643_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_9_fu_653_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_12_fu_683_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_15_fu_693_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_18_fu_723_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_21_fu_733_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_24_fu_763_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_27_fu_773_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_30_fu_803_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_33_fu_813_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_36_fu_843_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_39_fu_853_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_42_fu_883_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_45_fu_893_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_fu_547_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_fu_558_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_1_fu_562_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_1_fu_588_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_2_fu_604_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_3_fu_658_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_4_fu_668_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_5_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_6_fu_708_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_7_fu_738_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_8_fu_748_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_9_fu_778_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_10_fu_788_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_11_fu_818_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_12_fu_828_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_13_fu_858_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln29_14_fu_868_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln220_fu_930_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_934_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln220_fu_942_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln220_1_fu_948_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln220_1_fu_956_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component transmitter_pnGenSequence_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component transmitter_scrambledDataI_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component transmitter_scrambledDataQ_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    pnGenSequence_U : component transmitter_pnGenSequence_ROM_AUTO_1R
    generic map (
        DataWidth => 1,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pnGenSequence_address0,
        ce0 => pnGenSequence_ce0,
        q0 => pnGenSequence_q0,
        address1 => pnGenSequence_address1,
        ce1 => pnGenSequence_ce1,
        q1 => pnGenSequence_q1);

    scrambledDataI_U : component transmitter_scrambledDataI_RAM_AUTO_1R1W
    generic map (
        DataWidth => 5,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => scrambledDataI_address0,
        ce0 => scrambledDataI_ce0,
        we0 => scrambledDataI_we0,
        d0 => scrambledDataI_d0,
        q0 => scrambledDataI_q0,
        address1 => scrambledDataI_address1,
        ce1 => scrambledDataI_ce1,
        we1 => scrambledDataI_we1,
        d1 => scrambledDataI_d1);

    scrambledDataQ_U : component transmitter_scrambledDataQ_RAM_AUTO_1R1W
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => scrambledDataQ_address0,
        ce0 => scrambledDataQ_ce0,
        we0 => scrambledDataQ_we0,
        d0 => scrambledDataQ_d0,
        q0 => scrambledDataQ_q0,
        address1 => scrambledDataQ_address1,
        ce1 => scrambledDataQ_ce1,
        we1 => scrambledDataQ_we1,
        d1 => scrambledDataQ_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    and38_i3032_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                and38_i3032_fu_102 <= encoder_state_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                and38_i3032_fu_102 <= zext_ln43_1_fu_962_p1;
            end if; 
        end if;
    end process;

    i_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_fu_106 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln43_fu_907_p2 = ap_const_lv1_0))) then 
                i_1_fu_106 <= add_ln43_fu_913_p2;
            end if; 
        end if;
    end process;

    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_90 <= ap_const_lv6_0;
            elsif (((icmp_ln29_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_90 <= add_ln29_fu_614_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln43_fu_907_p2 = ap_const_lv1_1))) then
                encoder_state_1 <= and38_i3032_fu_102;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_988 <= i_fu_90;
                    zext_ln29_reg_1004(5 downto 0) <= zext_ln29_fu_542_p1(5 downto 0);
                    zext_ln31_2_reg_1015(5 downto 1) <= zext_ln31_2_fu_553_p1(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln29_reg_983 <= trunc_ln29_fu_530_p1;
                trunc_ln32_reg_978 <= trunc_ln32_fu_526_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    zext_ln29_1_reg_1026(0) <= zext_ln29_1_fu_593_p1(0);    zext_ln29_1_reg_1026(5 downto 2) <= zext_ln29_1_fu_593_p1(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln31_10_reg_1065(1 downto 0) <= zext_ln31_10_fu_663_p1(1 downto 0);    zext_ln31_10_reg_1065(5 downto 3) <= zext_ln31_10_fu_663_p1(5 downto 3);
                    zext_ln31_13_reg_1076(1) <= zext_ln31_13_fu_673_p1(1);    zext_ln31_13_reg_1076(5 downto 3) <= zext_ln31_13_fu_673_p1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    zext_ln31_16_reg_1087(0) <= zext_ln31_16_fu_703_p1(0);    zext_ln31_16_reg_1087(5 downto 3) <= zext_ln31_16_fu_703_p1(5 downto 3);
                    zext_ln31_19_reg_1098(5 downto 3) <= zext_ln31_19_fu_713_p1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    zext_ln31_22_reg_1109(2 downto 0) <= zext_ln31_22_fu_743_p1(2 downto 0);    zext_ln31_22_reg_1109(5 downto 4) <= zext_ln31_22_fu_743_p1(5 downto 4);
                    zext_ln31_25_reg_1120(2 downto 1) <= zext_ln31_25_fu_753_p1(2 downto 1);    zext_ln31_25_reg_1120(5 downto 4) <= zext_ln31_25_fu_753_p1(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    zext_ln31_28_reg_1131(0) <= zext_ln31_28_fu_783_p1(0);    zext_ln31_28_reg_1131(2) <= zext_ln31_28_fu_783_p1(2);    zext_ln31_28_reg_1131(5 downto 4) <= zext_ln31_28_fu_783_p1(5 downto 4);
                    zext_ln31_31_reg_1142(2) <= zext_ln31_31_fu_793_p1(2);    zext_ln31_31_reg_1142(5 downto 4) <= zext_ln31_31_fu_793_p1(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    zext_ln31_34_reg_1153(1 downto 0) <= zext_ln31_34_fu_823_p1(1 downto 0);    zext_ln31_34_reg_1153(5 downto 4) <= zext_ln31_34_fu_823_p1(5 downto 4);
                    zext_ln31_37_reg_1164(1) <= zext_ln31_37_fu_833_p1(1);    zext_ln31_37_reg_1164(5 downto 4) <= zext_ln31_37_fu_833_p1(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    zext_ln31_40_reg_1175(0) <= zext_ln31_40_fu_863_p1(0);    zext_ln31_40_reg_1175(5 downto 4) <= zext_ln31_40_fu_863_p1(5 downto 4);
                    zext_ln31_43_reg_1186(5 downto 4) <= zext_ln31_43_fu_873_p1(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln31_7_reg_1040(5 downto 2) <= zext_ln31_7_fu_609_p1(5 downto 2);
            end if;
        end if;
    end process;
    zext_ln29_reg_1004(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_2_reg_1015(0) <= '1';
    zext_ln31_2_reg_1015(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln29_1_reg_1026(1) <= '1';
    zext_ln29_1_reg_1026(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_7_reg_1040(1 downto 0) <= "11";
    zext_ln31_7_reg_1040(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_10_reg_1065(2) <= '1';
    zext_ln31_10_reg_1065(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_13_reg_1076(0) <= '1';
    zext_ln31_13_reg_1076(2 downto 2) <= "1";
    zext_ln31_13_reg_1076(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_16_reg_1087(2 downto 1) <= "11";
    zext_ln31_16_reg_1087(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_19_reg_1098(2 downto 0) <= "111";
    zext_ln31_19_reg_1098(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_22_reg_1109(3) <= '1';
    zext_ln31_22_reg_1109(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_25_reg_1120(0) <= '1';
    zext_ln31_25_reg_1120(3 downto 3) <= "1";
    zext_ln31_25_reg_1120(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_28_reg_1131(1) <= '1';
    zext_ln31_28_reg_1131(3 downto 3) <= "1";
    zext_ln31_28_reg_1131(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_31_reg_1142(1 downto 0) <= "11";
    zext_ln31_31_reg_1142(3 downto 3) <= "1";
    zext_ln31_31_reg_1142(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_34_reg_1153(3 downto 2) <= "11";
    zext_ln31_34_reg_1153(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_37_reg_1164(0) <= '1';
    zext_ln31_37_reg_1164(3 downto 2) <= "11";
    zext_ln31_37_reg_1164(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_40_reg_1175(3 downto 1) <= "111";
    zext_ln31_40_reg_1175(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_43_reg_1186(3 downto 0) <= "1111";
    zext_ln31_43_reg_1186(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln29_fu_598_p2, ap_CS_fsm_state11, icmp_ln43_fu_907_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln29_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln43_fu_907_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln29_fu_614_p2 <= std_logic_vector(unsigned(i_fu_90) + unsigned(ap_const_lv6_10));
    add_ln43_fu_913_p2 <= std_logic_vector(unsigned(i_1_fu_106) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state11, icmp_ln43_fu_907_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln43_fu_907_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln43_fu_907_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln43_fu_907_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln29_fu_598_p2 <= "1" when (or_ln29_1_fu_588_p2 = ap_const_lv6_32) else "0";
    icmp_ln43_fu_907_p2 <= "1" when (i_1_fu_106 = ap_const_lv6_32) else "0";
    or_ln220_1_fu_956_p2 <= (shl_ln220_1_fu_948_p3 or scrambledDataQ_q0);
    or_ln220_fu_942_p2 <= (shl_ln_fu_934_p3 or scrambledDataI_q0);
    or_ln29_10_fu_788_p2 <= (i_2_reg_988 or ap_const_lv6_B);
    or_ln29_11_fu_818_p2 <= (i_2_reg_988 or ap_const_lv6_C);
    or_ln29_12_fu_828_p2 <= (i_2_reg_988 or ap_const_lv6_D);
    or_ln29_13_fu_858_p2 <= (i_2_reg_988 or ap_const_lv6_E);
    or_ln29_14_fu_868_p2 <= (i_2_reg_988 or ap_const_lv6_F);
    or_ln29_1_fu_588_p2 <= (i_fu_90 or ap_const_lv6_2);
    or_ln29_2_fu_604_p2 <= (i_fu_90 or ap_const_lv6_3);
    or_ln29_3_fu_658_p2 <= (i_2_reg_988 or ap_const_lv6_4);
    or_ln29_4_fu_668_p2 <= (i_2_reg_988 or ap_const_lv6_5);
    or_ln29_5_fu_698_p2 <= (i_2_reg_988 or ap_const_lv6_6);
    or_ln29_6_fu_708_p2 <= (i_2_reg_988 or ap_const_lv6_7);
    or_ln29_7_fu_738_p2 <= (i_2_reg_988 or ap_const_lv6_8);
    or_ln29_8_fu_748_p2 <= (i_2_reg_988 or ap_const_lv6_9);
    or_ln29_9_fu_778_p2 <= (i_2_reg_988 or ap_const_lv6_A);
    or_ln29_fu_547_p2 <= (i_fu_90 or ap_const_lv6_1);
    output_i <= ap_const_lv64_0;

    output_i_ap_vld_assign_proc : process(ap_CS_fsm_state11, icmp_ln43_fu_907_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln43_fu_907_p2 = ap_const_lv1_1))) then 
            output_i_ap_vld <= ap_const_logic_1;
        else 
            output_i_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pnGenSequence_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln31_2_fu_553_p1, ap_CS_fsm_state3, zext_ln31_7_fu_609_p1, ap_CS_fsm_state4, zext_ln31_13_fu_673_p1, ap_CS_fsm_state5, zext_ln31_19_fu_713_p1, ap_CS_fsm_state6, zext_ln31_25_fu_753_p1, ap_CS_fsm_state7, zext_ln31_31_fu_793_p1, ap_CS_fsm_state8, zext_ln31_37_fu_833_p1, ap_CS_fsm_state9, zext_ln31_43_fu_873_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pnGenSequence_address0 <= zext_ln31_43_fu_873_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pnGenSequence_address0 <= zext_ln31_37_fu_833_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pnGenSequence_address0 <= zext_ln31_31_fu_793_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pnGenSequence_address0 <= zext_ln31_25_fu_753_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pnGenSequence_address0 <= zext_ln31_19_fu_713_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pnGenSequence_address0 <= zext_ln31_13_fu_673_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pnGenSequence_address0 <= zext_ln31_7_fu_609_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pnGenSequence_address0 <= zext_ln31_2_fu_553_p1(6 - 1 downto 0);
        else 
            pnGenSequence_address0 <= "XXXXXX";
        end if; 
    end process;


    pnGenSequence_address1_assign_proc : process(ap_CS_fsm_state2, zext_ln29_fu_542_p1, zext_ln29_1_fu_593_p1, ap_CS_fsm_state3, zext_ln31_10_fu_663_p1, ap_CS_fsm_state4, zext_ln31_16_fu_703_p1, ap_CS_fsm_state5, zext_ln31_22_fu_743_p1, ap_CS_fsm_state6, zext_ln31_28_fu_783_p1, ap_CS_fsm_state7, zext_ln31_34_fu_823_p1, ap_CS_fsm_state8, zext_ln31_40_fu_863_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pnGenSequence_address1 <= zext_ln31_40_fu_863_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            pnGenSequence_address1 <= zext_ln31_34_fu_823_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pnGenSequence_address1 <= zext_ln31_28_fu_783_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pnGenSequence_address1 <= zext_ln31_22_fu_743_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pnGenSequence_address1 <= zext_ln31_16_fu_703_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pnGenSequence_address1 <= zext_ln31_10_fu_663_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pnGenSequence_address1 <= zext_ln29_1_fu_593_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pnGenSequence_address1 <= zext_ln29_fu_542_p1(6 - 1 downto 0);
        else 
            pnGenSequence_address1 <= "XXXXXX";
        end if; 
    end process;


    pnGenSequence_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pnGenSequence_ce0 <= ap_const_logic_1;
        else 
            pnGenSequence_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pnGenSequence_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pnGenSequence_ce1 <= ap_const_logic_1;
        else 
            pnGenSequence_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataI_address0_assign_proc : process(zext_ln31_2_reg_1015, ap_CS_fsm_state3, zext_ln31_7_reg_1040, ap_CS_fsm_state4, zext_ln31_13_reg_1076, ap_CS_fsm_state5, zext_ln31_19_reg_1098, ap_CS_fsm_state6, zext_ln31_25_reg_1120, ap_CS_fsm_state7, zext_ln31_31_reg_1142, ap_CS_fsm_state8, zext_ln31_37_reg_1164, ap_CS_fsm_state9, zext_ln31_43_reg_1186, ap_CS_fsm_state11, ap_CS_fsm_state10, zext_ln43_fu_901_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            scrambledDataI_address0 <= zext_ln43_fu_901_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataI_address0 <= zext_ln31_43_reg_1186(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataI_address0 <= zext_ln31_37_reg_1164(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataI_address0 <= zext_ln31_31_reg_1142(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataI_address0 <= zext_ln31_25_reg_1120(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataI_address0 <= zext_ln31_19_reg_1098(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataI_address0 <= zext_ln31_13_reg_1076(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataI_address0 <= zext_ln31_7_reg_1040(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataI_address0 <= zext_ln31_2_reg_1015(6 - 1 downto 0);
        else 
            scrambledDataI_address0 <= "XXXXXX";
        end if; 
    end process;


    scrambledDataI_address1_assign_proc : process(zext_ln29_reg_1004, zext_ln29_1_reg_1026, ap_CS_fsm_state3, zext_ln31_10_reg_1065, ap_CS_fsm_state4, zext_ln31_16_reg_1087, ap_CS_fsm_state5, zext_ln31_22_reg_1109, ap_CS_fsm_state6, zext_ln31_28_reg_1131, ap_CS_fsm_state7, zext_ln31_34_reg_1153, ap_CS_fsm_state8, zext_ln31_40_reg_1175, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataI_address1 <= zext_ln31_40_reg_1175(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataI_address1 <= zext_ln31_34_reg_1153(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataI_address1 <= zext_ln31_28_reg_1131(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataI_address1 <= zext_ln31_22_reg_1109(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataI_address1 <= zext_ln31_16_reg_1087(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataI_address1 <= zext_ln31_10_reg_1065(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataI_address1 <= zext_ln29_1_reg_1026(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataI_address1 <= zext_ln29_reg_1004(6 - 1 downto 0);
        else 
            scrambledDataI_address1 <= "XXXXXX";
        end if; 
    end process;


    scrambledDataI_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataI_ce0 <= ap_const_logic_1;
        else 
            scrambledDataI_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataI_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataI_ce1 <= ap_const_logic_1;
        else 
            scrambledDataI_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataI_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln31_3_fu_578_p1, zext_ln31_8_fu_648_p1, zext_ln31_14_fu_688_p1, zext_ln31_20_fu_728_p1, zext_ln31_26_fu_768_p1, zext_ln31_32_fu_808_p1, zext_ln31_38_fu_848_p1, zext_ln31_44_fu_888_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataI_d0 <= zext_ln31_44_fu_888_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataI_d0 <= zext_ln31_38_fu_848_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataI_d0 <= zext_ln31_32_fu_808_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataI_d0 <= zext_ln31_26_fu_768_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataI_d0 <= zext_ln31_20_fu_728_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataI_d0 <= zext_ln31_14_fu_688_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataI_d0 <= zext_ln31_8_fu_648_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataI_d0 <= zext_ln31_3_fu_578_p1;
        else 
            scrambledDataI_d0 <= "XXXXX";
        end if; 
    end process;


    scrambledDataI_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, xor_ln31_fu_566_p2, zext_ln31_5_fu_638_p1, zext_ln31_11_fu_678_p1, zext_ln31_17_fu_718_p1, zext_ln31_23_fu_758_p1, zext_ln31_29_fu_798_p1, zext_ln31_35_fu_838_p1, zext_ln31_41_fu_878_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataI_d1 <= zext_ln31_41_fu_878_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataI_d1 <= zext_ln31_35_fu_838_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataI_d1 <= zext_ln31_29_fu_798_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataI_d1 <= zext_ln31_23_fu_758_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataI_d1 <= zext_ln31_17_fu_718_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataI_d1 <= zext_ln31_11_fu_678_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataI_d1 <= zext_ln31_5_fu_638_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataI_d1 <= xor_ln31_fu_566_p2;
        else 
            scrambledDataI_d1 <= "XXXXX";
        end if; 
    end process;


    scrambledDataI_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataI_we0 <= ap_const_logic_1;
        else 
            scrambledDataI_we0 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataI_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataI_we1 <= ap_const_logic_1;
        else 
            scrambledDataI_we1 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataQ_address0_assign_proc : process(zext_ln31_2_reg_1015, ap_CS_fsm_state3, zext_ln31_7_reg_1040, ap_CS_fsm_state4, zext_ln31_13_reg_1076, ap_CS_fsm_state5, zext_ln31_19_reg_1098, ap_CS_fsm_state6, zext_ln31_25_reg_1120, ap_CS_fsm_state7, zext_ln31_31_reg_1142, ap_CS_fsm_state8, zext_ln31_37_reg_1164, ap_CS_fsm_state9, zext_ln31_43_reg_1186, ap_CS_fsm_state11, ap_CS_fsm_state10, zext_ln43_fu_901_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            scrambledDataQ_address0 <= zext_ln43_fu_901_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataQ_address0 <= zext_ln31_43_reg_1186(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataQ_address0 <= zext_ln31_37_reg_1164(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataQ_address0 <= zext_ln31_31_reg_1142(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataQ_address0 <= zext_ln31_25_reg_1120(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataQ_address0 <= zext_ln31_19_reg_1098(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataQ_address0 <= zext_ln31_13_reg_1076(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataQ_address0 <= zext_ln31_7_reg_1040(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataQ_address0 <= zext_ln31_2_reg_1015(6 - 1 downto 0);
        else 
            scrambledDataQ_address0 <= "XXXXXX";
        end if; 
    end process;


    scrambledDataQ_address1_assign_proc : process(zext_ln29_reg_1004, zext_ln29_1_reg_1026, ap_CS_fsm_state3, zext_ln31_10_reg_1065, ap_CS_fsm_state4, zext_ln31_16_reg_1087, ap_CS_fsm_state5, zext_ln31_22_reg_1109, ap_CS_fsm_state6, zext_ln31_28_reg_1131, ap_CS_fsm_state7, zext_ln31_34_reg_1153, ap_CS_fsm_state8, zext_ln31_40_reg_1175, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataQ_address1 <= zext_ln31_40_reg_1175(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataQ_address1 <= zext_ln31_34_reg_1153(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataQ_address1 <= zext_ln31_28_reg_1131(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataQ_address1 <= zext_ln31_22_reg_1109(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataQ_address1 <= zext_ln31_16_reg_1087(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataQ_address1 <= zext_ln31_10_reg_1065(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataQ_address1 <= zext_ln29_1_reg_1026(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataQ_address1 <= zext_ln29_reg_1004(6 - 1 downto 0);
        else 
            scrambledDataQ_address1 <= "XXXXXX";
        end if; 
    end process;


    scrambledDataQ_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataQ_ce0 <= ap_const_logic_1;
        else 
            scrambledDataQ_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataQ_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataQ_ce1 <= ap_const_logic_1;
        else 
            scrambledDataQ_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataQ_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln31_4_fu_583_p1, zext_ln31_9_fu_653_p1, zext_ln31_15_fu_693_p1, zext_ln31_21_fu_733_p1, zext_ln31_27_fu_773_p1, zext_ln31_33_fu_813_p1, zext_ln31_39_fu_853_p1, zext_ln31_45_fu_893_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataQ_d0 <= zext_ln31_45_fu_893_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataQ_d0 <= zext_ln31_39_fu_853_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataQ_d0 <= zext_ln31_33_fu_813_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataQ_d0 <= zext_ln31_27_fu_773_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataQ_d0 <= zext_ln31_21_fu_733_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataQ_d0 <= zext_ln31_15_fu_693_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataQ_d0 <= zext_ln31_9_fu_653_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataQ_d0 <= zext_ln31_4_fu_583_p1;
        else 
            scrambledDataQ_d0 <= "XXXXXX";
        end if; 
    end process;


    scrambledDataQ_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, xor_ln32_fu_572_p2, zext_ln31_6_fu_643_p1, zext_ln31_12_fu_683_p1, zext_ln31_18_fu_723_p1, zext_ln31_24_fu_763_p1, zext_ln31_30_fu_803_p1, zext_ln31_36_fu_843_p1, zext_ln31_42_fu_883_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            scrambledDataQ_d1 <= zext_ln31_42_fu_883_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            scrambledDataQ_d1 <= zext_ln31_36_fu_843_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            scrambledDataQ_d1 <= zext_ln31_30_fu_803_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            scrambledDataQ_d1 <= zext_ln31_24_fu_763_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            scrambledDataQ_d1 <= zext_ln31_18_fu_723_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            scrambledDataQ_d1 <= zext_ln31_12_fu_683_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            scrambledDataQ_d1 <= zext_ln31_6_fu_643_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            scrambledDataQ_d1 <= xor_ln32_fu_572_p2;
        else 
            scrambledDataQ_d1 <= "XXXXXX";
        end if; 
    end process;


    scrambledDataQ_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataQ_we0 <= ap_const_logic_1;
        else 
            scrambledDataQ_we0 <= ap_const_logic_0;
        end if; 
    end process;


    scrambledDataQ_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            scrambledDataQ_we1 <= ap_const_logic_1;
        else 
            scrambledDataQ_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln220_1_fu_948_p3 <= (or_ln220_fu_942_p2 & ap_const_lv1_0);
    shl_ln_fu_934_p3 <= (trunc_ln220_fu_930_p1 & ap_const_lv1_0);
    trunc_ln220_fu_930_p1 <= and38_i3032_fu_102(4 - 1 downto 0);
    trunc_ln29_fu_530_p1 <= input_q(6 - 1 downto 0);
    trunc_ln32_fu_526_p1 <= input_i(5 - 1 downto 0);
    xor_ln31_fu_566_p2 <= (zext_ln31_fu_558_p1 xor trunc_ln32_reg_978);
    xor_ln32_fu_572_p2 <= (zext_ln31_1_fu_562_p1 xor trunc_ln29_reg_983);
    zext_ln29_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_1_fu_588_p2),64));
    zext_ln29_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_90),64));
    zext_ln31_10_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_3_fu_658_p2),64));
    zext_ln31_11_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln31_12_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_13_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_4_fu_668_p2),64));
    zext_ln31_14_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_15_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_16_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_5_fu_698_p2),64));
    zext_ln31_17_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln31_18_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_19_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_6_fu_708_p2),64));
    zext_ln31_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_20_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_21_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_22_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_7_fu_738_p2),64));
    zext_ln31_23_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln31_24_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_25_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_8_fu_748_p2),64));
    zext_ln31_26_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_27_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_28_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_9_fu_778_p2),64));
    zext_ln31_29_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln31_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_fu_547_p2),64));
    zext_ln31_30_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_31_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_10_fu_788_p2),64));
    zext_ln31_32_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_33_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_34_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_11_fu_818_p2),64));
    zext_ln31_35_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln31_36_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_37_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_12_fu_828_p2),64));
    zext_ln31_38_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_39_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_3_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_40_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_13_fu_858_p2),64));
    zext_ln31_41_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln31_42_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_43_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_14_fu_868_p2),64));
    zext_ln31_44_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_45_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_4_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_5_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln31_6_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),6));
    zext_ln31_7_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_2_fu_604_p2),64));
    zext_ln31_8_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),5));
    zext_ln31_9_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q0),6));
    zext_ln31_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pnGenSequence_q1),5));
    zext_ln43_1_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln220_1_fu_956_p2),32));
    zext_ln43_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_106),64));
end behav;
